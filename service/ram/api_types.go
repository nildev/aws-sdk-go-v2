// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ram

import (
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

var _ aws.Config
var _ = awsutil.Prettify

// Describes a principal for use with AWS Resource Access Manager.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ram-2018-01-04/Principal
type Principal struct {
	_ struct{} `type:"structure"`

	// The time when the principal was associated with the resource share.
	CreationTime *time.Time `json:"ram:Principal:CreationTime" locationName:"creationTime" type:"timestamp" timestampFormat:"unix"`

	// Indicates whether the principal belongs to the same organization as the AWS
	// account that owns the resource share.
	External *bool `json:"ram:Principal:External" locationName:"external" type:"boolean"`

	// The ID of the principal.
	Id *string `json:"ram:Principal:Id" locationName:"id" type:"string"`

	// The time when the association was last updated.
	LastUpdatedTime *time.Time `json:"ram:Principal:LastUpdatedTime" locationName:"lastUpdatedTime" type:"timestamp" timestampFormat:"unix"`

	// The Amazon Resource Name (ARN) of the resource share.
	ResourceShareArn *string `json:"ram:Principal:ResourceShareArn" locationName:"resourceShareArn" type:"string"`
}

// String returns the string representation
func (s Principal) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Principal) MarshalFields(e protocol.FieldEncoder) error {
	if s.CreationTime != nil {
		v := *s.CreationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "creationTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.External != nil {
		v := *s.External

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "external", protocol.BoolValue(v), metadata)
	}
	if s.Id != nil {
		v := *s.Id

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "id", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.LastUpdatedTime != nil {
		v := *s.LastUpdatedTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "lastUpdatedTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.ResourceShareArn != nil {
		v := *s.ResourceShareArn

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceShareArn", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Describes a resource associated with a resource share.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ram-2018-01-04/Resource
type Resource struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) of the resource.
	Arn *string `json:"ram:Resource:Arn" locationName:"arn" type:"string"`

	// The time when the resource was associated with the resource share.
	CreationTime *time.Time `json:"ram:Resource:CreationTime" locationName:"creationTime" type:"timestamp" timestampFormat:"unix"`

	// The time when the association was last updated.
	LastUpdatedTime *time.Time `json:"ram:Resource:LastUpdatedTime" locationName:"lastUpdatedTime" type:"timestamp" timestampFormat:"unix"`

	// The Amazon Resource Name (ARN) of the resource share.
	ResourceShareArn *string `json:"ram:Resource:ResourceShareArn" locationName:"resourceShareArn" type:"string"`

	// The status of the resource.
	Status ResourceStatus `json:"ram:Resource:Status" locationName:"status" type:"string" enum:"true"`

	// A message about the status of the resource.
	StatusMessage *string `json:"ram:Resource:StatusMessage" locationName:"statusMessage" type:"string"`

	// The resource type.
	Type *string `json:"ram:Resource:Type" locationName:"type" type:"string"`
}

// String returns the string representation
func (s Resource) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Resource) MarshalFields(e protocol.FieldEncoder) error {
	if s.Arn != nil {
		v := *s.Arn

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "arn", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.CreationTime != nil {
		v := *s.CreationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "creationTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.LastUpdatedTime != nil {
		v := *s.LastUpdatedTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "lastUpdatedTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.ResourceShareArn != nil {
		v := *s.ResourceShareArn

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceShareArn", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Status) > 0 {
		v := s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: v}, metadata)
	}
	if s.StatusMessage != nil {
		v := *s.StatusMessage

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "statusMessage", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Type != nil {
		v := *s.Type

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "type", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Describes a resource share.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ram-2018-01-04/ResourceShare
type ResourceShare struct {
	_ struct{} `type:"structure"`

	// Indicates whether principals outside your organization can be associated
	// with a resource share.
	AllowExternalPrincipals *bool `json:"ram:ResourceShare:AllowExternalPrincipals" locationName:"allowExternalPrincipals" type:"boolean"`

	// The time when the resource share was created.
	CreationTime *time.Time `json:"ram:ResourceShare:CreationTime" locationName:"creationTime" type:"timestamp" timestampFormat:"unix"`

	// The time when the resource share was last updated.
	LastUpdatedTime *time.Time `json:"ram:ResourceShare:LastUpdatedTime" locationName:"lastUpdatedTime" type:"timestamp" timestampFormat:"unix"`

	// The name of the resource share.
	Name *string `json:"ram:ResourceShare:Name" locationName:"name" type:"string"`

	// The ID of the AWS account that owns the resource share.
	OwningAccountId *string `json:"ram:ResourceShare:OwningAccountId" locationName:"owningAccountId" type:"string"`

	// The Amazon Resource Name (ARN) of the resource share.
	ResourceShareArn *string `json:"ram:ResourceShare:ResourceShareArn" locationName:"resourceShareArn" type:"string"`

	// The status of the resource share.
	Status ResourceShareStatus `json:"ram:ResourceShare:Status" locationName:"status" type:"string" enum:"true"`

	// A message about the status of the resource share.
	StatusMessage *string `json:"ram:ResourceShare:StatusMessage" locationName:"statusMessage" type:"string"`

	// The tags for the resource share.
	Tags []Tag `json:"ram:ResourceShare:Tags" locationName:"tags" type:"list"`
}

// String returns the string representation
func (s ResourceShare) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ResourceShare) MarshalFields(e protocol.FieldEncoder) error {
	if s.AllowExternalPrincipals != nil {
		v := *s.AllowExternalPrincipals

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "allowExternalPrincipals", protocol.BoolValue(v), metadata)
	}
	if s.CreationTime != nil {
		v := *s.CreationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "creationTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.LastUpdatedTime != nil {
		v := *s.LastUpdatedTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "lastUpdatedTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.OwningAccountId != nil {
		v := *s.OwningAccountId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "owningAccountId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ResourceShareArn != nil {
		v := *s.ResourceShareArn

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceShareArn", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Status) > 0 {
		v := s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: v}, metadata)
	}
	if s.StatusMessage != nil {
		v := *s.StatusMessage

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "statusMessage", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Tags != nil {
		v := s.Tags

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "tags", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// Describes an association with a resource share.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ram-2018-01-04/ResourceShareAssociation
type ResourceShareAssociation struct {
	_ struct{} `type:"structure"`

	// The associated entity. For resource associations, this is the ARN of the
	// resource. For principal associations, this is the ID of an AWS account or
	// the ARN of an OU or organization from AWS Organizations.
	AssociatedEntity *string `json:"ram:ResourceShareAssociation:AssociatedEntity" locationName:"associatedEntity" type:"string"`

	// The association type.
	AssociationType ResourceShareAssociationType `json:"ram:ResourceShareAssociation:AssociationType" locationName:"associationType" type:"string" enum:"true"`

	// The time when the association was created.
	CreationTime *time.Time `json:"ram:ResourceShareAssociation:CreationTime" locationName:"creationTime" type:"timestamp" timestampFormat:"unix"`

	// Indicates whether the principal belongs to the same organization as the AWS
	// account that owns the resource share.
	External *bool `json:"ram:ResourceShareAssociation:External" locationName:"external" type:"boolean"`

	// The time when the association was last updated.
	LastUpdatedTime *time.Time `json:"ram:ResourceShareAssociation:LastUpdatedTime" locationName:"lastUpdatedTime" type:"timestamp" timestampFormat:"unix"`

	// The Amazon Resource Name (ARN) of the resource share.
	ResourceShareArn *string `json:"ram:ResourceShareAssociation:ResourceShareArn" locationName:"resourceShareArn" type:"string"`

	// The status of the association.
	Status ResourceShareAssociationStatus `json:"ram:ResourceShareAssociation:Status" locationName:"status" type:"string" enum:"true"`

	// A message about the status of the association.
	StatusMessage *string `json:"ram:ResourceShareAssociation:StatusMessage" locationName:"statusMessage" type:"string"`
}

// String returns the string representation
func (s ResourceShareAssociation) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ResourceShareAssociation) MarshalFields(e protocol.FieldEncoder) error {
	if s.AssociatedEntity != nil {
		v := *s.AssociatedEntity

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "associatedEntity", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.AssociationType) > 0 {
		v := s.AssociationType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "associationType", protocol.QuotedValue{ValueMarshaler: v}, metadata)
	}
	if s.CreationTime != nil {
		v := *s.CreationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "creationTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.External != nil {
		v := *s.External

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "external", protocol.BoolValue(v), metadata)
	}
	if s.LastUpdatedTime != nil {
		v := *s.LastUpdatedTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "lastUpdatedTime", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.ResourceShareArn != nil {
		v := *s.ResourceShareArn

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceShareArn", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Status) > 0 {
		v := s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: v}, metadata)
	}
	if s.StatusMessage != nil {
		v := *s.StatusMessage

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "statusMessage", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Describes an invitation to join a resource share.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ram-2018-01-04/ResourceShareInvitation
type ResourceShareInvitation struct {
	_ struct{} `type:"structure"`

	// The date and time when the invitation was sent.
	InvitationTimestamp *time.Time `json:"ram:ResourceShareInvitation:InvitationTimestamp" locationName:"invitationTimestamp" type:"timestamp" timestampFormat:"unix"`

	// The ID of the AWS account that received the invitation.
	ReceiverAccountId *string `json:"ram:ResourceShareInvitation:ReceiverAccountId" locationName:"receiverAccountId" type:"string"`

	// The Amazon Resource Name (ARN) of the resource share.
	ResourceShareArn *string `json:"ram:ResourceShareInvitation:ResourceShareArn" locationName:"resourceShareArn" type:"string"`

	// The resources associated with the resource share.
	ResourceShareAssociations []ResourceShareAssociation `json:"ram:ResourceShareInvitation:ResourceShareAssociations" locationName:"resourceShareAssociations" type:"list"`

	// The Amazon Resource Name (ARN) of the invitation.
	ResourceShareInvitationArn *string `json:"ram:ResourceShareInvitation:ResourceShareInvitationArn" locationName:"resourceShareInvitationArn" type:"string"`

	// The name of the resource share.
	ResourceShareName *string `json:"ram:ResourceShareInvitation:ResourceShareName" locationName:"resourceShareName" type:"string"`

	// The ID of the AWS account that sent the invitation.
	SenderAccountId *string `json:"ram:ResourceShareInvitation:SenderAccountId" locationName:"senderAccountId" type:"string"`

	// The status of the invitation.
	Status ResourceShareInvitationStatus `json:"ram:ResourceShareInvitation:Status" locationName:"status" type:"string" enum:"true"`
}

// String returns the string representation
func (s ResourceShareInvitation) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ResourceShareInvitation) MarshalFields(e protocol.FieldEncoder) error {
	if s.InvitationTimestamp != nil {
		v := *s.InvitationTimestamp

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "invitationTimestamp", protocol.TimeValue{V: v, Format: protocol.UnixTimeFormat}, metadata)
	}
	if s.ReceiverAccountId != nil {
		v := *s.ReceiverAccountId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "receiverAccountId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ResourceShareArn != nil {
		v := *s.ResourceShareArn

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceShareArn", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ResourceShareAssociations != nil {
		v := s.ResourceShareAssociations

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "resourceShareAssociations", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.ResourceShareInvitationArn != nil {
		v := *s.ResourceShareInvitationArn

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceShareInvitationArn", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ResourceShareName != nil {
		v := *s.ResourceShareName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceShareName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.SenderAccountId != nil {
		v := *s.SenderAccountId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "senderAccountId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Status) > 0 {
		v := s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: v}, metadata)
	}
	return nil
}

// Information about a tag.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ram-2018-01-04/Tag
type Tag struct {
	_ struct{} `type:"structure"`

	// The key of the tag.
	Key *string `json:"ram:Tag:Key" locationName:"key" type:"string"`

	// The value of the tag.
	Value *string `json:"ram:Tag:Value" locationName:"value" type:"string"`
}

// String returns the string representation
func (s Tag) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Tag) MarshalFields(e protocol.FieldEncoder) error {
	if s.Key != nil {
		v := *s.Key

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "key", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Value != nil {
		v := *s.Value

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "value", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Used to filter information based on tags.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ram-2018-01-04/TagFilter
type TagFilter struct {
	_ struct{} `type:"structure"`

	// The tag key.
	TagKey *string `json:"ram:TagFilter:TagKey" locationName:"tagKey" type:"string"`

	// The tag values.
	TagValues []string `json:"ram:TagFilter:TagValues" locationName:"tagValues" type:"list"`
}

// String returns the string representation
func (s TagFilter) String() string {
	return awsutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s TagFilter) MarshalFields(e protocol.FieldEncoder) error {
	if s.TagKey != nil {
		v := *s.TagKey

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "tagKey", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.TagValues != nil {
		v := s.TagValues

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "tagValues", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	return nil
}
