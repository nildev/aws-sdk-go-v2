// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ssm

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

var _ aws.Config
var _ = awsutil.Prettify

// An activation registers one or more on-premises servers or virtual machines
// (VMs) with AWS so that you can configure those servers or VMs using Run Command.
// A server or VM that has been registered with AWS is called a managed instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/Activation
type Activation struct {
	_ struct{} `type:"structure"`

	// The ID created by Systems Manager when you submitted the activation.
	ActivationId *string `json:"ssm:Activation:ActivationId" type:"string"`

	// The date the activation was created.
	CreatedDate *time.Time `json:"ssm:Activation:CreatedDate" type:"timestamp" timestampFormat:"unix"`

	// A name for the managed instance when it is created.
	DefaultInstanceName *string `json:"ssm:Activation:DefaultInstanceName" type:"string"`

	// A user defined description of the activation.
	Description *string `json:"ssm:Activation:Description" type:"string"`

	// The date when this activation can no longer be used to register managed instances.
	ExpirationDate *time.Time `json:"ssm:Activation:ExpirationDate" type:"timestamp" timestampFormat:"unix"`

	// Whether or not the activation is expired.
	Expired *bool `json:"ssm:Activation:Expired" type:"boolean"`

	// The Amazon Identity and Access Management (IAM) role to assign to the managed
	// instance.
	IamRole *string `json:"ssm:Activation:IamRole" type:"string"`

	// The maximum number of managed instances that can be registered using this
	// activation.
	RegistrationLimit *int64 `json:"ssm:Activation:RegistrationLimit" min:"1" type:"integer"`

	// The number of managed instances already registered with this activation.
	RegistrationsCount *int64 `json:"ssm:Activation:RegistrationsCount" min:"1" type:"integer"`

	// Tags assigned to the activation.
	Tags []Tag `json:"ssm:Activation:Tags" type:"list"`
}

// String returns the string representation
func (s Activation) String() string {
	return awsutil.Prettify(s)
}

// Describes an association of a Systems Manager document and an instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/Association
type Association struct {
	_ struct{} `type:"structure"`

	// The ID created by the system when you create an association. An association
	// is a binding between a document and a set of targets with a schedule.
	AssociationId *string `json:"ssm:Association:AssociationId" type:"string"`

	// The association name.
	AssociationName *string `json:"ssm:Association:AssociationName" type:"string"`

	// The association version.
	AssociationVersion *string `json:"ssm:Association:AssociationVersion" type:"string"`

	// The version of the document used in the association.
	DocumentVersion *string `json:"ssm:Association:DocumentVersion" type:"string"`

	// The ID of the instance.
	InstanceId *string `json:"ssm:Association:InstanceId" type:"string"`

	// The date on which the association was last run.
	LastExecutionDate *time.Time `json:"ssm:Association:LastExecutionDate" type:"timestamp" timestampFormat:"unix"`

	// The name of the Systems Manager document.
	Name *string `json:"ssm:Association:Name" type:"string"`

	// Information about the association.
	Overview *AssociationOverview `json:"ssm:Association:Overview" type:"structure"`

	// A cron expression that specifies a schedule when the association runs.
	ScheduleExpression *string `json:"ssm:Association:ScheduleExpression" min:"1" type:"string"`

	// The instances targeted by the request to create an association.
	Targets []Target `json:"ssm:Association:Targets" type:"list"`
}

// String returns the string representation
func (s Association) String() string {
	return awsutil.Prettify(s)
}

// Describes the parameters for a document.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationDescription
type AssociationDescription struct {
	_ struct{} `type:"structure"`

	// The association ID.
	AssociationId *string `json:"ssm:AssociationDescription:AssociationId" type:"string"`

	// The association name.
	AssociationName *string `json:"ssm:AssociationDescription:AssociationName" type:"string"`

	// The association version.
	AssociationVersion *string `json:"ssm:AssociationDescription:AssociationVersion" type:"string"`

	// Specify the target for the association. This target is required for associations
	// that use an Automation document and target resources by using rate controls.
	AutomationTargetParameterName *string `json:"ssm:AssociationDescription:AutomationTargetParameterName" min:"1" type:"string"`

	// The severity level that is assigned to the association.
	ComplianceSeverity AssociationComplianceSeverity `json:"ssm:AssociationDescription:ComplianceSeverity" type:"string" enum:"true"`

	// The date when the association was made.
	Date *time.Time `json:"ssm:AssociationDescription:Date" type:"timestamp" timestampFormat:"unix"`

	// The document version.
	DocumentVersion *string `json:"ssm:AssociationDescription:DocumentVersion" type:"string"`

	// The ID of the instance.
	InstanceId *string `json:"ssm:AssociationDescription:InstanceId" type:"string"`

	// The date on which the association was last run.
	LastExecutionDate *time.Time `json:"ssm:AssociationDescription:LastExecutionDate" type:"timestamp" timestampFormat:"unix"`

	// The last date on which the association was successfully run.
	LastSuccessfulExecutionDate *time.Time `json:"ssm:AssociationDescription:LastSuccessfulExecutionDate" type:"timestamp" timestampFormat:"unix"`

	// The date when the association was last updated.
	LastUpdateAssociationDate *time.Time `json:"ssm:AssociationDescription:LastUpdateAssociationDate" type:"timestamp" timestampFormat:"unix"`

	// The maximum number of targets allowed to run the association at the same
	// time. You can specify a number, for example 10, or a percentage of the target
	// set, for example 10%. The default value is 100%, which means all targets
	// run the association at the same time.
	//
	// If a new instance starts and attempts to run an association while Systems
	// Manager is running MaxConcurrency associations, the association is allowed
	// to run. During the next association interval, the new instance will process
	// its association within the limit specified for MaxConcurrency.
	MaxConcurrency *string `json:"ssm:AssociationDescription:MaxConcurrency" min:"1" type:"string"`

	// The number of errors that are allowed before the system stops sending requests
	// to run the association on additional targets. You can specify either an absolute
	// number of errors, for example 10, or a percentage of the target set, for
	// example 10%. If you specify 3, for example, the system stops sending requests
	// when the fourth error is received. If you specify 0, then the system stops
	// sending requests after the first error is returned. If you run an association
	// on 50 instances and set MaxError to 10%, then the system stops sending the
	// request when the sixth error is received.
	//
	// Executions that are already running an association when MaxErrors is reached
	// are allowed to complete, but some of these executions may fail as well. If
	// you need to ensure that there won't be more than max-errors failed executions,
	// set MaxConcurrency to 1 so that executions proceed one at a time.
	MaxErrors *string `json:"ssm:AssociationDescription:MaxErrors" min:"1" type:"string"`

	// The name of the Systems Manager document.
	Name *string `json:"ssm:AssociationDescription:Name" type:"string"`

	// An Amazon S3 bucket where you want to store the output details of the request.
	OutputLocation *InstanceAssociationOutputLocation `json:"ssm:AssociationDescription:OutputLocation" type:"structure"`

	// Information about the association.
	Overview *AssociationOverview `json:"ssm:AssociationDescription:Overview" type:"structure"`

	// A description of the parameters for a document.
	Parameters map[string][]string `json:"ssm:AssociationDescription:Parameters" type:"map"`

	// A cron expression that specifies a schedule when the association runs.
	ScheduleExpression *string `json:"ssm:AssociationDescription:ScheduleExpression" min:"1" type:"string"`

	// The association status.
	Status *AssociationStatus `json:"ssm:AssociationDescription:Status" type:"structure"`

	// The instances targeted by the request.
	Targets []Target `json:"ssm:AssociationDescription:Targets" type:"list"`
}

// String returns the string representation
func (s AssociationDescription) String() string {
	return awsutil.Prettify(s)
}

// Includes information about the specified association.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationExecution
type AssociationExecution struct {
	_ struct{} `type:"structure"`

	// The association ID.
	AssociationId *string `json:"ssm:AssociationExecution:AssociationId" type:"string"`

	// The association version.
	AssociationVersion *string `json:"ssm:AssociationExecution:AssociationVersion" type:"string"`

	// The time the execution started.
	CreatedTime *time.Time `json:"ssm:AssociationExecution:CreatedTime" type:"timestamp" timestampFormat:"unix"`

	// Detailed status information about the execution.
	DetailedStatus *string `json:"ssm:AssociationExecution:DetailedStatus" type:"string"`

	// The execution ID for the association.
	ExecutionId *string `json:"ssm:AssociationExecution:ExecutionId" type:"string"`

	// The date of the last execution.
	LastExecutionDate *time.Time `json:"ssm:AssociationExecution:LastExecutionDate" type:"timestamp" timestampFormat:"unix"`

	// An aggregate status of the resources in the execution based on the status
	// type.
	ResourceCountByStatus *string `json:"ssm:AssociationExecution:ResourceCountByStatus" type:"string"`

	// The status of the association execution.
	Status *string `json:"ssm:AssociationExecution:Status" type:"string"`
}

// String returns the string representation
func (s AssociationExecution) String() string {
	return awsutil.Prettify(s)
}

// Filters used in the request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationExecutionFilter
type AssociationExecutionFilter struct {
	_ struct{} `type:"structure"`

	// The key value used in the request.
	//
	// Key is a required field
	Key AssociationExecutionFilterKey `json:"ssm:AssociationExecutionFilter:Key" type:"string" required:"true" enum:"true"`

	// The filter type specified in the request.
	//
	// Type is a required field
	Type AssociationFilterOperatorType `json:"ssm:AssociationExecutionFilter:Type" type:"string" required:"true" enum:"true"`

	// The value specified for the key.
	//
	// Value is a required field
	Value *string `json:"ssm:AssociationExecutionFilter:Value" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s AssociationExecutionFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociationExecutionFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AssociationExecutionFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if len(s.Type) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Type"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}
	if s.Value != nil && len(*s.Value) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Value", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Includes information about the specified association execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationExecutionTarget
type AssociationExecutionTarget struct {
	_ struct{} `type:"structure"`

	// The association ID.
	AssociationId *string `json:"ssm:AssociationExecutionTarget:AssociationId" type:"string"`

	// The association version.
	AssociationVersion *string `json:"ssm:AssociationExecutionTarget:AssociationVersion" type:"string"`

	// Detailed information about the execution status.
	DetailedStatus *string `json:"ssm:AssociationExecutionTarget:DetailedStatus" type:"string"`

	// The execution ID.
	ExecutionId *string `json:"ssm:AssociationExecutionTarget:ExecutionId" type:"string"`

	// The date of the last execution.
	LastExecutionDate *time.Time `json:"ssm:AssociationExecutionTarget:LastExecutionDate" type:"timestamp" timestampFormat:"unix"`

	// The location where the association details are saved.
	OutputSource *OutputSource `json:"ssm:AssociationExecutionTarget:OutputSource" type:"structure"`

	// The resource ID, for example, the instance ID where the association ran.
	ResourceId *string `json:"ssm:AssociationExecutionTarget:ResourceId" min:"1" type:"string"`

	// The resource type, for example, instance.
	ResourceType *string `json:"ssm:AssociationExecutionTarget:ResourceType" min:"1" type:"string"`

	// The association execution status.
	Status *string `json:"ssm:AssociationExecutionTarget:Status" type:"string"`
}

// String returns the string representation
func (s AssociationExecutionTarget) String() string {
	return awsutil.Prettify(s)
}

// Filters for the association execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationExecutionTargetsFilter
type AssociationExecutionTargetsFilter struct {
	_ struct{} `type:"structure"`

	// The key value used in the request.
	//
	// Key is a required field
	Key AssociationExecutionTargetsFilterKey `json:"ssm:AssociationExecutionTargetsFilter:Key" type:"string" required:"true" enum:"true"`

	// The value specified for the key.
	//
	// Value is a required field
	Value *string `json:"ssm:AssociationExecutionTargetsFilter:Value" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s AssociationExecutionTargetsFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociationExecutionTargetsFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AssociationExecutionTargetsFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}
	if s.Value != nil && len(*s.Value) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Value", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Describes a filter.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationFilter
type AssociationFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key AssociationFilterKey `json:"ssm:AssociationFilter:Key" locationName:"key" type:"string" required:"true" enum:"true"`

	// The filter value.
	//
	// Value is a required field
	Value *string `json:"ssm:AssociationFilter:Value" locationName:"value" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s AssociationFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociationFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AssociationFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}
	if s.Value != nil && len(*s.Value) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Value", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information about the association.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationOverview
type AssociationOverview struct {
	_ struct{} `type:"structure"`

	// Returns the number of targets for the association status. For example, if
	// you created an association with two instances, and one of them was successful,
	// this would return the count of instances by status.
	AssociationStatusAggregatedCount map[string]int64 `json:"ssm:AssociationOverview:AssociationStatusAggregatedCount" type:"map"`

	// A detailed status of the association.
	DetailedStatus *string `json:"ssm:AssociationOverview:DetailedStatus" type:"string"`

	// The status of the association. Status can be: Pending, Success, or Failed.
	Status *string `json:"ssm:AssociationOverview:Status" type:"string"`
}

// String returns the string representation
func (s AssociationOverview) String() string {
	return awsutil.Prettify(s)
}

// Describes an association status.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationStatus
type AssociationStatus struct {
	_ struct{} `type:"structure"`

	// A user-defined string.
	AdditionalInfo *string `json:"ssm:AssociationStatus:AdditionalInfo" type:"string"`

	// The date when the status changed.
	//
	// Date is a required field
	Date *time.Time `json:"ssm:AssociationStatus:Date" type:"timestamp" timestampFormat:"unix" required:"true"`

	// The reason for the status.
	//
	// Message is a required field
	Message *string `json:"ssm:AssociationStatus:Message" min:"1" type:"string" required:"true"`

	// The status.
	//
	// Name is a required field
	Name AssociationStatusName `json:"ssm:AssociationStatus:Name" type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s AssociationStatus) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AssociationStatus) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AssociationStatus"}

	if s.Date == nil {
		invalidParams.Add(aws.NewErrParamRequired("Date"))
	}

	if s.Message == nil {
		invalidParams.Add(aws.NewErrParamRequired("Message"))
	}
	if s.Message != nil && len(*s.Message) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Message", 1))
	}
	if len(s.Name) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information about the association version.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AssociationVersionInfo
type AssociationVersionInfo struct {
	_ struct{} `type:"structure"`

	// The ID created by the system when the association was created.
	AssociationId *string `json:"ssm:AssociationVersionInfo:AssociationId" type:"string"`

	// The name specified for the association version when the association version
	// was created.
	AssociationName *string `json:"ssm:AssociationVersionInfo:AssociationName" type:"string"`

	// The association version.
	AssociationVersion *string `json:"ssm:AssociationVersionInfo:AssociationVersion" type:"string"`

	// The severity level that is assigned to the association.
	ComplianceSeverity AssociationComplianceSeverity `json:"ssm:AssociationVersionInfo:ComplianceSeverity" type:"string" enum:"true"`

	// The date the association version was created.
	CreatedDate *time.Time `json:"ssm:AssociationVersionInfo:CreatedDate" type:"timestamp" timestampFormat:"unix"`

	// The version of a Systems Manager document used when the association version
	// was created.
	DocumentVersion *string `json:"ssm:AssociationVersionInfo:DocumentVersion" type:"string"`

	// The maximum number of targets allowed to run the association at the same
	// time. You can specify a number, for example 10, or a percentage of the target
	// set, for example 10%. The default value is 100%, which means all targets
	// run the association at the same time.
	//
	// If a new instance starts and attempts to run an association while Systems
	// Manager is running MaxConcurrency associations, the association is allowed
	// to run. During the next association interval, the new instance will process
	// its association within the limit specified for MaxConcurrency.
	MaxConcurrency *string `json:"ssm:AssociationVersionInfo:MaxConcurrency" min:"1" type:"string"`

	// The number of errors that are allowed before the system stops sending requests
	// to run the association on additional targets. You can specify either an absolute
	// number of errors, for example 10, or a percentage of the target set, for
	// example 10%. If you specify 3, for example, the system stops sending requests
	// when the fourth error is received. If you specify 0, then the system stops
	// sending requests after the first error is returned. If you run an association
	// on 50 instances and set MaxError to 10%, then the system stops sending the
	// request when the sixth error is received.
	//
	// Executions that are already running an association when MaxErrors is reached
	// are allowed to complete, but some of these executions may fail as well. If
	// you need to ensure that there won't be more than max-errors failed executions,
	// set MaxConcurrency to 1 so that executions proceed one at a time.
	MaxErrors *string `json:"ssm:AssociationVersionInfo:MaxErrors" min:"1" type:"string"`

	// The name specified when the association was created.
	Name *string `json:"ssm:AssociationVersionInfo:Name" type:"string"`

	// The location in Amazon S3 specified for the association when the association
	// version was created.
	OutputLocation *InstanceAssociationOutputLocation `json:"ssm:AssociationVersionInfo:OutputLocation" type:"structure"`

	// Parameters specified when the association version was created.
	Parameters map[string][]string `json:"ssm:AssociationVersionInfo:Parameters" type:"map"`

	// The cron or rate schedule specified for the association when the association
	// version was created.
	ScheduleExpression *string `json:"ssm:AssociationVersionInfo:ScheduleExpression" min:"1" type:"string"`

	// The targets specified for the association when the association version was
	// created.
	Targets []Target `json:"ssm:AssociationVersionInfo:Targets" type:"list"`
}

// String returns the string representation
func (s AssociationVersionInfo) String() string {
	return awsutil.Prettify(s)
}

// A structure that includes attributes that describe a document attachment.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AttachmentContent
type AttachmentContent struct {
	_ struct{} `type:"structure"`

	// The cryptographic hash value of the document content.
	Hash *string `json:"ssm:AttachmentContent:Hash" type:"string"`

	// The hash algorithm used to calculate the hash value.
	HashType AttachmentHashType `json:"ssm:AttachmentContent:HashType" type:"string" enum:"true"`

	// The name of an attachment.
	Name *string `json:"ssm:AttachmentContent:Name" type:"string"`

	// The size of an attachment in bytes.
	Size *int64 `json:"ssm:AttachmentContent:Size" type:"long"`

	// The URL location of the attachment content.
	Url *string `json:"ssm:AttachmentContent:Url" type:"string"`
}

// String returns the string representation
func (s AttachmentContent) String() string {
	return awsutil.Prettify(s)
}

// An attribute of an attachment, such as the attachment name.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AttachmentInformation
type AttachmentInformation struct {
	_ struct{} `type:"structure"`

	// The name of the attachment.
	Name *string `json:"ssm:AttachmentInformation:Name" type:"string"`
}

// String returns the string representation
func (s AttachmentInformation) String() string {
	return awsutil.Prettify(s)
}

// A key and value pair that identifies the location of an attachment to a document.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AttachmentsSource
type AttachmentsSource struct {
	_ struct{} `type:"structure"`

	// The key of a key and value pair that identifies the location of an attachment
	// to a document.
	Key AttachmentsSourceKey `json:"ssm:AttachmentsSource:Key" type:"string" enum:"true"`

	// The URL of the location of a document attachment, such as the URL of an Amazon
	// S3 bucket.
	Values []string `json:"ssm:AttachmentsSource:Values" min:"1" type:"list"`
}

// String returns the string representation
func (s AttachmentsSource) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AttachmentsSource) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AttachmentsSource"}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Detailed information about the current state of an individual Automation
// execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AutomationExecution
type AutomationExecution struct {
	_ struct{} `type:"structure"`

	// The execution ID.
	AutomationExecutionId *string `json:"ssm:AutomationExecution:AutomationExecutionId" min:"36" type:"string"`

	// The execution status of the Automation.
	AutomationExecutionStatus AutomationExecutionStatus `json:"ssm:AutomationExecution:AutomationExecutionStatus" type:"string" enum:"true"`

	// The action of the step that is currently running.
	CurrentAction *string `json:"ssm:AutomationExecution:CurrentAction" type:"string"`

	// The name of the step that is currently running.
	CurrentStepName *string `json:"ssm:AutomationExecution:CurrentStepName" type:"string"`

	// The name of the Automation document used during the execution.
	DocumentName *string `json:"ssm:AutomationExecution:DocumentName" type:"string"`

	// The version of the document to use during execution.
	DocumentVersion *string `json:"ssm:AutomationExecution:DocumentVersion" type:"string"`

	// The Amazon Resource Name (ARN) of the user who ran the automation.
	ExecutedBy *string `json:"ssm:AutomationExecution:ExecutedBy" type:"string"`

	// The time the execution finished.
	ExecutionEndTime *time.Time `json:"ssm:AutomationExecution:ExecutionEndTime" type:"timestamp" timestampFormat:"unix"`

	// The time the execution started.
	ExecutionStartTime *time.Time `json:"ssm:AutomationExecution:ExecutionStartTime" type:"timestamp" timestampFormat:"unix"`

	// A message describing why an execution has failed, if the status is set to
	// Failed.
	FailureMessage *string `json:"ssm:AutomationExecution:FailureMessage" type:"string"`

	// The MaxConcurrency value specified by the user when the execution started.
	MaxConcurrency *string `json:"ssm:AutomationExecution:MaxConcurrency" min:"1" type:"string"`

	// The MaxErrors value specified by the user when the execution started.
	MaxErrors *string `json:"ssm:AutomationExecution:MaxErrors" min:"1" type:"string"`

	// The automation execution mode.
	Mode ExecutionMode `json:"ssm:AutomationExecution:Mode" type:"string" enum:"true"`

	// The list of execution outputs as defined in the automation document.
	Outputs map[string][]string `json:"ssm:AutomationExecution:Outputs" min:"1" type:"map"`

	// The key-value map of execution parameters, which were supplied when calling
	// StartAutomationExecution.
	Parameters map[string][]string `json:"ssm:AutomationExecution:Parameters" min:"1" type:"map"`

	// The AutomationExecutionId of the parent automation.
	ParentAutomationExecutionId *string `json:"ssm:AutomationExecution:ParentAutomationExecutionId" min:"36" type:"string"`

	// An aggregate of step execution statuses displayed in the AWS Console for
	// a multi-Region and multi-account Automation execution.
	ProgressCounters *ProgressCounters `json:"ssm:AutomationExecution:ProgressCounters" type:"structure"`

	// A list of resolved targets in the rate control execution.
	ResolvedTargets *ResolvedTargets `json:"ssm:AutomationExecution:ResolvedTargets" type:"structure"`

	// A list of details about the current state of all steps that comprise an execution.
	// An Automation document contains a list of steps that are run in order.
	StepExecutions []StepExecution `json:"ssm:AutomationExecution:StepExecutions" type:"list"`

	// A boolean value that indicates if the response contains the full list of
	// the Automation step executions. If true, use the DescribeAutomationStepExecutions
	// API action to get the full list of step executions.
	StepExecutionsTruncated *bool `json:"ssm:AutomationExecution:StepExecutionsTruncated" type:"boolean"`

	// The target of the execution.
	Target *string `json:"ssm:AutomationExecution:Target" type:"string"`

	// The combination of AWS Regions and/or AWS accounts where you want to run
	// the Automation.
	TargetLocations []TargetLocation `json:"ssm:AutomationExecution:TargetLocations" min:"1" type:"list"`

	// The specified key-value mapping of document parameters to target resources.
	TargetMaps []map[string][]string `json:"ssm:AutomationExecution:TargetMaps" type:"list"`

	// The parameter name.
	TargetParameterName *string `json:"ssm:AutomationExecution:TargetParameterName" min:"1" type:"string"`

	// The specified targets.
	Targets []Target `json:"ssm:AutomationExecution:Targets" type:"list"`
}

// String returns the string representation
func (s AutomationExecution) String() string {
	return awsutil.Prettify(s)
}

// A filter used to match specific automation executions. This is used to limit
// the scope of Automation execution information returned.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AutomationExecutionFilter
type AutomationExecutionFilter struct {
	_ struct{} `type:"structure"`

	// One or more keys to limit the results. Valid filter keys include the following:
	// DocumentNamePrefix, ExecutionStatus, ExecutionId, ParentExecutionId, CurrentAction,
	// StartTimeBefore, StartTimeAfter.
	//
	// Key is a required field
	Key AutomationExecutionFilterKey `json:"ssm:AutomationExecutionFilter:Key" type:"string" required:"true" enum:"true"`

	// The values used to limit the execution information associated with the filter's
	// key.
	//
	// Values is a required field
	Values []string `json:"ssm:AutomationExecutionFilter:Values" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s AutomationExecutionFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AutomationExecutionFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AutomationExecutionFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Details about a specific Automation execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/AutomationExecutionMetadata
type AutomationExecutionMetadata struct {
	_ struct{} `type:"structure"`

	// The execution ID.
	AutomationExecutionId *string `json:"ssm:AutomationExecutionMetadata:AutomationExecutionId" min:"36" type:"string"`

	// The status of the execution. Valid values include: Running, Succeeded, Failed,
	// Timed out, or Cancelled.
	AutomationExecutionStatus AutomationExecutionStatus `json:"ssm:AutomationExecutionMetadata:AutomationExecutionStatus" type:"string" enum:"true"`

	// Use this filter with DescribeAutomationExecutions. Specify either Local or
	// CrossAccount. CrossAccount is an Automation that runs in multiple AWS Regions
	// and accounts. For more information, see Executing Automations in Multiple
	// AWS Regions and Accounts (http://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html)
	// in the AWS Systems Manager User Guide.
	AutomationType AutomationType `json:"ssm:AutomationExecutionMetadata:AutomationType" type:"string" enum:"true"`

	// The action of the step that is currently running.
	CurrentAction *string `json:"ssm:AutomationExecutionMetadata:CurrentAction" type:"string"`

	// The name of the step that is currently running.
	CurrentStepName *string `json:"ssm:AutomationExecutionMetadata:CurrentStepName" type:"string"`

	// The name of the Automation document used during execution.
	DocumentName *string `json:"ssm:AutomationExecutionMetadata:DocumentName" type:"string"`

	// The document version used during the execution.
	DocumentVersion *string `json:"ssm:AutomationExecutionMetadata:DocumentVersion" type:"string"`

	// The IAM role ARN of the user who ran the Automation.
	ExecutedBy *string `json:"ssm:AutomationExecutionMetadata:ExecutedBy" type:"string"`

	// The time the execution finished. This is not populated if the execution is
	// still in progress.
	ExecutionEndTime *time.Time `json:"ssm:AutomationExecutionMetadata:ExecutionEndTime" type:"timestamp" timestampFormat:"unix"`

	// The time the execution started.>
	ExecutionStartTime *time.Time `json:"ssm:AutomationExecutionMetadata:ExecutionStartTime" type:"timestamp" timestampFormat:"unix"`

	// The list of execution outputs as defined in the Automation document.
	FailureMessage *string `json:"ssm:AutomationExecutionMetadata:FailureMessage" type:"string"`

	// An Amazon S3 bucket where execution information is stored.
	LogFile *string `json:"ssm:AutomationExecutionMetadata:LogFile" type:"string"`

	// The MaxConcurrency value specified by the user when starting the Automation.
	MaxConcurrency *string `json:"ssm:AutomationExecutionMetadata:MaxConcurrency" min:"1" type:"string"`

	// The MaxErrors value specified by the user when starting the Automation.
	MaxErrors *string `json:"ssm:AutomationExecutionMetadata:MaxErrors" min:"1" type:"string"`

	// The Automation execution mode.
	Mode ExecutionMode `json:"ssm:AutomationExecutionMetadata:Mode" type:"string" enum:"true"`

	// The list of execution outputs as defined in the Automation document.
	Outputs map[string][]string `json:"ssm:AutomationExecutionMetadata:Outputs" min:"1" type:"map"`

	// The ExecutionId of the parent Automation.
	ParentAutomationExecutionId *string `json:"ssm:AutomationExecutionMetadata:ParentAutomationExecutionId" min:"36" type:"string"`

	// A list of targets that resolved during the execution.
	ResolvedTargets *ResolvedTargets `json:"ssm:AutomationExecutionMetadata:ResolvedTargets" type:"structure"`

	// The list of execution outputs as defined in the Automation document.
	Target *string `json:"ssm:AutomationExecutionMetadata:Target" type:"string"`

	// The specified key-value mapping of document parameters to target resources.
	TargetMaps []map[string][]string `json:"ssm:AutomationExecutionMetadata:TargetMaps" type:"list"`

	// The list of execution outputs as defined in the Automation document.
	TargetParameterName *string `json:"ssm:AutomationExecutionMetadata:TargetParameterName" min:"1" type:"string"`

	// The targets defined by the user when starting the Automation.
	Targets []Target `json:"ssm:AutomationExecutionMetadata:Targets" type:"list"`
}

// String returns the string representation
func (s AutomationExecutionMetadata) String() string {
	return awsutil.Prettify(s)
}

// Configuration options for sending command output to CloudWatch Logs.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/CloudWatchOutputConfig
type CloudWatchOutputConfig struct {
	_ struct{} `type:"structure"`

	// The name of the CloudWatch log group where you want to send command output.
	// If you don't specify a group name, Systems Manager automatically creates
	// a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
	CloudWatchLogGroupName *string `json:"ssm:CloudWatchOutputConfig:CloudWatchLogGroupName" min:"1" type:"string"`

	// Enables Systems Manager to send command output to CloudWatch Logs.
	CloudWatchOutputEnabled *bool `json:"ssm:CloudWatchOutputConfig:CloudWatchOutputEnabled" type:"boolean"`
}

// String returns the string representation
func (s CloudWatchOutputConfig) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CloudWatchOutputConfig) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CloudWatchOutputConfig"}
	if s.CloudWatchLogGroupName != nil && len(*s.CloudWatchLogGroupName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("CloudWatchLogGroupName", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Describes a command request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/Command
type Command struct {
	_ struct{} `type:"structure"`

	// CloudWatch Logs information where you want Systems Manager to send the command
	// output.
	CloudWatchOutputConfig *CloudWatchOutputConfig `json:"ssm:Command:CloudWatchOutputConfig" type:"structure"`

	// A unique identifier for this command.
	CommandId *string `json:"ssm:Command:CommandId" min:"36" type:"string"`

	// User-specified information about the command, such as a brief description
	// of what the command should do.
	Comment *string `json:"ssm:Command:Comment" type:"string"`

	// The number of targets for which the command invocation reached a terminal
	// state. Terminal states include the following: Success, Failed, Execution
	// Timed Out, Delivery Timed Out, Canceled, Terminated, or Undeliverable.
	CompletedCount *int64 `json:"ssm:Command:CompletedCount" type:"integer"`

	// The number of targets for which the status is Delivery Timed Out.
	DeliveryTimedOutCount *int64 `json:"ssm:Command:DeliveryTimedOutCount" type:"integer"`

	// The name of the document requested for execution.
	DocumentName *string `json:"ssm:Command:DocumentName" type:"string"`

	// The SSM document version.
	DocumentVersion *string `json:"ssm:Command:DocumentVersion" type:"string"`

	// The number of targets for which the status is Failed or Execution Timed Out.
	ErrorCount *int64 `json:"ssm:Command:ErrorCount" type:"integer"`

	// If this time is reached and the command has not already started running,
	// it will not run. Calculated based on the ExpiresAfter user input provided
	// as part of the SendCommand API.
	ExpiresAfter *time.Time `json:"ssm:Command:ExpiresAfter" type:"timestamp" timestampFormat:"unix"`

	// The instance IDs against which this command was requested.
	InstanceIds []string `json:"ssm:Command:InstanceIds" type:"list"`

	// The maximum number of instances that are allowed to run the command at the
	// same time. You can specify a number of instances, such as 10, or a percentage
	// of instances, such as 10%. The default value is 50. For more information
	// about how to use MaxConcurrency, see Running Commands Using Systems Manager
	// Run Command (http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html)
	// in the AWS Systems Manager User Guide.
	MaxConcurrency *string `json:"ssm:Command:MaxConcurrency" min:"1" type:"string"`

	// The maximum number of errors allowed before the system stops sending the
	// command to additional targets. You can specify a number of errors, such as
	// 10, or a percentage or errors, such as 10%. The default value is 0. For more
	// information about how to use MaxErrors, see Running Commands Using Systems
	// Manager Run Command (http://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html)
	// in the AWS Systems Manager User Guide.
	MaxErrors *string `json:"ssm:Command:MaxErrors" min:"1" type:"string"`

	// Configurations for sending notifications about command status changes.
	NotificationConfig *NotificationConfig `json:"ssm:Command:NotificationConfig" type:"structure"`

	// The S3 bucket where the responses to the command executions should be stored.
	// This was requested when issuing the command.
	OutputS3BucketName *string `json:"ssm:Command:OutputS3BucketName" min:"3" type:"string"`

	// The S3 directory path inside the bucket where the responses to the command
	// executions should be stored. This was requested when issuing the command.
	OutputS3KeyPrefix *string `json:"ssm:Command:OutputS3KeyPrefix" type:"string"`

	// (Deprecated) You can no longer specify this parameter. The system ignores
	// it. Instead, Systems Manager automatically determines the Amazon S3 bucket
	// region.
	OutputS3Region *string `json:"ssm:Command:OutputS3Region" min:"3" type:"string"`

	// The parameter values to be inserted in the document when running the command.
	Parameters map[string][]string `json:"ssm:Command:Parameters" type:"map"`

	// The date and time the command was requested.
	RequestedDateTime *time.Time `json:"ssm:Command:RequestedDateTime" type:"timestamp" timestampFormat:"unix"`

	// The IAM service role that Run Command uses to act on your behalf when sending
	// notifications about command status changes.
	ServiceRole *string `json:"ssm:Command:ServiceRole" type:"string"`

	// The status of the command.
	Status CommandStatus `json:"ssm:Command:Status" type:"string" enum:"true"`

	// A detailed status of the command execution. StatusDetails includes more information
	// than Status because it includes states resulting from error and concurrency
	// control parameters. StatusDetails can show different results than Status.
	// For more information about these statuses, see Understanding Command Statuses
	// (http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html)
	// in the AWS Systems Manager User Guide. StatusDetails can be one of the following
	// values:
	//
	//    * Pending: The command has not been sent to any instances.
	//
	//    * In Progress: The command has been sent to at least one instance but
	//    has not reached a final state on all instances.
	//
	//    * Success: The command successfully ran on all invocations. This is a
	//    terminal state.
	//
	//    * Delivery Timed Out: The value of MaxErrors or more command invocations
	//    shows a status of Delivery Timed Out. This is a terminal state.
	//
	//    * Execution Timed Out: The value of MaxErrors or more command invocations
	//    shows a status of Execution Timed Out. This is a terminal state.
	//
	//    * Failed: The value of MaxErrors or more command invocations shows a status
	//    of Failed. This is a terminal state.
	//
	//    * Incomplete: The command was attempted on all instances and one or more
	//    invocations does not have a value of Success but not enough invocations
	//    failed for the status to be Failed. This is a terminal state.
	//
	//    * Canceled: The command was terminated before it was completed. This is
	//    a terminal state.
	//
	//    * Rate Exceeded: The number of instances targeted by the command exceeded
	//    the account limit for pending invocations. The system has canceled the
	//    command before running it on any instance. This is a terminal state.
	StatusDetails *string `json:"ssm:Command:StatusDetails" type:"string"`

	// The number of targets for the command.
	TargetCount *int64 `json:"ssm:Command:TargetCount" type:"integer"`

	// An array of search criteria that targets instances using a Key,Value combination
	// that you specify. Targets is required if you don't provide one or more instance
	// IDs in the call.
	Targets []Target `json:"ssm:Command:Targets" type:"list"`
}

// String returns the string representation
func (s Command) String() string {
	return awsutil.Prettify(s)
}

// Describes a command filter.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/CommandFilter
type CommandFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key CommandFilterKey `json:"ssm:CommandFilter:Key" locationName:"key" type:"string" required:"true" enum:"true"`

	// The filter value. Valid values for each filter key are as follows:
	//
	//    * InvokedAfter: Specify a timestamp to limit your results. For example,
	//    specify 2018-07-07T00:00:00Z to see a list of command executions occurring
	//    July 7, 2018, and later.
	//
	//    * InvokedBefore: Specify a timestamp to limit your results. For example,
	//    specify 2018-07-07T00:00:00Z to see a list of command executions from
	//    before July 7, 2018.
	//
	//    * Status: Specify a valid command status to see a list of all command
	//    executions with that status. Status values you can specify include: Pending
	//    InProgress Success Cancelled Failed TimedOut Cancelling
	//
	//    * DocumentName: Specify name of the SSM document for which you want to
	//    see command execution results. For example, specify AWS-RunPatchBaseline
	//    to see command executions that used this SSM document to perform security
	//    patching operations on instances.
	//
	//    * ExecutionStage: Specify one of the following values: Executing: Returns
	//    a list of command executions that are currently still running. Complete:
	//    Returns a list of command executions that have already completed.
	//
	// Value is a required field
	Value *string `json:"ssm:CommandFilter:Value" locationName:"value" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s CommandFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CommandFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CommandFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}
	if s.Value != nil && len(*s.Value) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Value", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// An invocation is copy of a command sent to a specific instance. A command
// can apply to one or more instances. A command invocation applies to one instance.
// For example, if a user runs SendCommand against three instances, then a command
// invocation is created for each requested instance ID. A command invocation
// returns status and detail information about a command you ran.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/CommandInvocation
type CommandInvocation struct {
	_ struct{} `type:"structure"`

	// CloudWatch Logs information where you want Systems Manager to send the command
	// output.
	CloudWatchOutputConfig *CloudWatchOutputConfig `json:"ssm:CommandInvocation:CloudWatchOutputConfig" type:"structure"`

	// The command against which this invocation was requested.
	CommandId *string `json:"ssm:CommandInvocation:CommandId" min:"36" type:"string"`

	CommandPlugins []CommandPlugin `json:"ssm:CommandInvocation:CommandPlugins" type:"list"`

	// User-specified information about the command, such as a brief description
	// of what the command should do.
	Comment *string `json:"ssm:CommandInvocation:Comment" type:"string"`

	// The document name that was requested for execution.
	DocumentName *string `json:"ssm:CommandInvocation:DocumentName" type:"string"`

	// The SSM document version.
	DocumentVersion *string `json:"ssm:CommandInvocation:DocumentVersion" type:"string"`

	// The instance ID in which this invocation was requested.
	InstanceId *string `json:"ssm:CommandInvocation:InstanceId" type:"string"`

	// The name of the invocation target. For Amazon EC2 instances this is the value
	// for the aws:Name tag. For on-premises instances, this is the name of the
	// instance.
	InstanceName *string `json:"ssm:CommandInvocation:InstanceName" type:"string"`

	// Configurations for sending notifications about command status changes on
	// a per instance basis.
	NotificationConfig *NotificationConfig `json:"ssm:CommandInvocation:NotificationConfig" type:"structure"`

	// The time and date the request was sent to this instance.
	RequestedDateTime *time.Time `json:"ssm:CommandInvocation:RequestedDateTime" type:"timestamp" timestampFormat:"unix"`

	// The IAM service role that Run Command uses to act on your behalf when sending
	// notifications about command status changes on a per instance basis.
	ServiceRole *string `json:"ssm:CommandInvocation:ServiceRole" type:"string"`

	// The URL to the plugin's StdErr file in Amazon S3, if the Amazon S3 bucket
	// was defined for the parent command. For an invocation, StandardErrorUrl is
	// populated if there is just one plugin defined for the command, and the Amazon
	// S3 bucket was defined for the command.
	StandardErrorUrl *string `json:"ssm:CommandInvocation:StandardErrorUrl" type:"string"`

	// The URL to the plugin's StdOut file in Amazon S3, if the Amazon S3 bucket
	// was defined for the parent command. For an invocation, StandardOutputUrl
	// is populated if there is just one plugin defined for the command, and the
	// Amazon S3 bucket was defined for the command.
	StandardOutputUrl *string `json:"ssm:CommandInvocation:StandardOutputUrl" type:"string"`

	// Whether or not the invocation succeeded, failed, or is pending.
	Status CommandInvocationStatus `json:"ssm:CommandInvocation:Status" type:"string" enum:"true"`

	// A detailed status of the command execution for each invocation (each instance
	// targeted by the command). StatusDetails includes more information than Status
	// because it includes states resulting from error and concurrency control parameters.
	// StatusDetails can show different results than Status. For more information
	// about these statuses, see Understanding Command Statuses (http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html)
	// in the AWS Systems Manager User Guide. StatusDetails can be one of the following
	// values:
	//
	//    * Pending: The command has not been sent to the instance.
	//
	//    * In Progress: The command has been sent to the instance but has not reached
	//    a terminal state.
	//
	//    * Success: The execution of the command or plugin was successfully completed.
	//    This is a terminal state.
	//
	//    * Delivery Timed Out: The command was not delivered to the instance before
	//    the delivery timeout expired. Delivery timeouts do not count against the
	//    parent command's MaxErrors limit, but they do contribute to whether the
	//    parent command status is Success or Incomplete. This is a terminal state.
	//
	//    * Execution Timed Out: Command execution started on the instance, but
	//    the execution was not complete before the execution timeout expired. Execution
	//    timeouts count against the MaxErrors limit of the parent command. This
	//    is a terminal state.
	//
	//    * Failed: The command was not successful on the instance. For a plugin,
	//    this indicates that the result code was not zero. For a command invocation,
	//    this indicates that the result code for one or more plugins was not zero.
	//    Invocation failures count against the MaxErrors limit of the parent command.
	//    This is a terminal state.
	//
	//    * Canceled: The command was terminated before it was completed. This is
	//    a terminal state.
	//
	//    * Undeliverable: The command can't be delivered to the instance. The instance
	//    might not exist or might not be responding. Undeliverable invocations
	//    don't count against the parent command's MaxErrors limit and don't contribute
	//    to whether the parent command status is Success or Incomplete. This is
	//    a terminal state.
	//
	//    * Terminated: The parent command exceeded its MaxErrors limit and subsequent
	//    command invocations were canceled by the system. This is a terminal state.
	StatusDetails *string `json:"ssm:CommandInvocation:StatusDetails" type:"string"`

	// Gets the trace output sent by the agent.
	TraceOutput *string `json:"ssm:CommandInvocation:TraceOutput" type:"string"`
}

// String returns the string representation
func (s CommandInvocation) String() string {
	return awsutil.Prettify(s)
}

// Describes plugin details.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/CommandPlugin
type CommandPlugin struct {
	_ struct{} `type:"structure"`

	// The name of the plugin. Must be one of the following: aws:updateAgent, aws:domainjoin,
	// aws:applications, aws:runPowerShellScript, aws:psmodule, aws:cloudWatch,
	// aws:runShellScript, or aws:updateSSMAgent.
	Name *string `json:"ssm:CommandPlugin:Name" min:"4" type:"string"`

	// Output of the plugin execution.
	Output *string `json:"ssm:CommandPlugin:Output" type:"string"`

	// The S3 bucket where the responses to the command executions should be stored.
	// This was requested when issuing the command. For example, in the following
	// response:
	//
	// test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript
	//
	// test_folder is the name of the Amazon S3 bucket;
	//
	// ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;
	//
	// i-1234567876543 is the instance ID;
	//
	// awsrunShellScript is the name of the plugin.
	OutputS3BucketName *string `json:"ssm:CommandPlugin:OutputS3BucketName" min:"3" type:"string"`

	// The S3 directory path inside the bucket where the responses to the command
	// executions should be stored. This was requested when issuing the command.
	// For example, in the following response:
	//
	// test_folder/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-1234567876543/awsrunShellScript
	//
	// test_folder is the name of the Amazon S3 bucket;
	//
	// ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix is the name of the S3 prefix;
	//
	// i-1234567876543 is the instance ID;
	//
	// awsrunShellScript is the name of the plugin.
	OutputS3KeyPrefix *string `json:"ssm:CommandPlugin:OutputS3KeyPrefix" type:"string"`

	// (Deprecated) You can no longer specify this parameter. The system ignores
	// it. Instead, Systems Manager automatically determines the Amazon S3 bucket
	// region.
	OutputS3Region *string `json:"ssm:CommandPlugin:OutputS3Region" min:"3" type:"string"`

	// A numeric response code generated after running the plugin.
	ResponseCode *int64 `json:"ssm:CommandPlugin:ResponseCode" type:"integer"`

	// The time the plugin stopped running. Could stop prematurely if, for example,
	// a cancel command was sent.
	ResponseFinishDateTime *time.Time `json:"ssm:CommandPlugin:ResponseFinishDateTime" type:"timestamp" timestampFormat:"unix"`

	// The time the plugin started running.
	ResponseStartDateTime *time.Time `json:"ssm:CommandPlugin:ResponseStartDateTime" type:"timestamp" timestampFormat:"unix"`

	// The URL for the complete text written by the plugin to stderr. If execution
	// is not yet complete, then this string is empty.
	StandardErrorUrl *string `json:"ssm:CommandPlugin:StandardErrorUrl" type:"string"`

	// The URL for the complete text written by the plugin to stdout in Amazon S3.
	// If the Amazon S3 bucket for the command was not specified, then this string
	// is empty.
	StandardOutputUrl *string `json:"ssm:CommandPlugin:StandardOutputUrl" type:"string"`

	// The status of this plugin. You can run a document with multiple plugins.
	Status CommandPluginStatus `json:"ssm:CommandPlugin:Status" type:"string" enum:"true"`

	// A detailed status of the plugin execution. StatusDetails includes more information
	// than Status because it includes states resulting from error and concurrency
	// control parameters. StatusDetails can show different results than Status.
	// For more information about these statuses, see Understanding Command Statuses
	// (http://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html)
	// in the AWS Systems Manager User Guide. StatusDetails can be one of the following
	// values:
	//
	//    * Pending: The command has not been sent to the instance.
	//
	//    * In Progress: The command has been sent to the instance but has not reached
	//    a terminal state.
	//
	//    * Success: The execution of the command or plugin was successfully completed.
	//    This is a terminal state.
	//
	//    * Delivery Timed Out: The command was not delivered to the instance before
	//    the delivery timeout expired. Delivery timeouts do not count against the
	//    parent command's MaxErrors limit, but they do contribute to whether the
	//    parent command status is Success or Incomplete. This is a terminal state.
	//
	//    * Execution Timed Out: Command execution started on the instance, but
	//    the execution was not complete before the execution timeout expired. Execution
	//    timeouts count against the MaxErrors limit of the parent command. This
	//    is a terminal state.
	//
	//    * Failed: The command was not successful on the instance. For a plugin,
	//    this indicates that the result code was not zero. For a command invocation,
	//    this indicates that the result code for one or more plugins was not zero.
	//    Invocation failures count against the MaxErrors limit of the parent command.
	//    This is a terminal state.
	//
	//    * Canceled: The command was terminated before it was completed. This is
	//    a terminal state.
	//
	//    * Undeliverable: The command can't be delivered to the instance. The instance
	//    might not exist, or it might not be responding. Undeliverable invocations
	//    don't count against the parent command's MaxErrors limit, and they don't
	//    contribute to whether the parent command status is Success or Incomplete.
	//    This is a terminal state.
	//
	//    * Terminated: The parent command exceeded its MaxErrors limit and subsequent
	//    command invocations were canceled by the system. This is a terminal state.
	StatusDetails *string `json:"ssm:CommandPlugin:StatusDetails" type:"string"`
}

// String returns the string representation
func (s CommandPlugin) String() string {
	return awsutil.Prettify(s)
}

// A summary of the call execution that includes an execution ID, the type of
// execution (for example, Command), and the date/time of the execution using
// a datetime object that is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ComplianceExecutionSummary
type ComplianceExecutionSummary struct {
	_ struct{} `type:"structure"`

	// An ID created by the system when PutComplianceItems was called. For example,
	// CommandID is a valid execution ID. You can use this ID in subsequent calls.
	ExecutionId *string `json:"ssm:ComplianceExecutionSummary:ExecutionId" type:"string"`

	// The time the execution ran as a datetime object that is saved in the following
	// format: yyyy-MM-dd'T'HH:mm:ss'Z'.
	//
	// ExecutionTime is a required field
	ExecutionTime *time.Time `json:"ssm:ComplianceExecutionSummary:ExecutionTime" type:"timestamp" timestampFormat:"unix" required:"true"`

	// The type of execution. For example, Command is a valid execution type.
	ExecutionType *string `json:"ssm:ComplianceExecutionSummary:ExecutionType" type:"string"`
}

// String returns the string representation
func (s ComplianceExecutionSummary) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ComplianceExecutionSummary) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ComplianceExecutionSummary"}

	if s.ExecutionTime == nil {
		invalidParams.Add(aws.NewErrParamRequired("ExecutionTime"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information about the compliance as defined by the resource type. For example,
// for a patch resource type, Items includes information about the PatchSeverity,
// Classification, etc.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ComplianceItem
type ComplianceItem struct {
	_ struct{} `type:"structure"`

	// The compliance type. For example, Association (for a State Manager association),
	// Patch, or Custom:string are all valid compliance types.
	ComplianceType *string `json:"ssm:ComplianceItem:ComplianceType" min:"1" type:"string"`

	// A "Key": "Value" tag combination for the compliance item.
	Details map[string]string `json:"ssm:ComplianceItem:Details" type:"map"`

	// A summary for the compliance item. The summary includes an execution ID,
	// the execution type (for example, command), and the execution time.
	ExecutionSummary *ComplianceExecutionSummary `json:"ssm:ComplianceItem:ExecutionSummary" type:"structure"`

	// An ID for the compliance item. For example, if the compliance item is a Windows
	// patch, the ID could be the number of the KB article; for example: KB4010320.
	Id *string `json:"ssm:ComplianceItem:Id" min:"1" type:"string"`

	// An ID for the resource. For a managed instance, this is the instance ID.
	ResourceId *string `json:"ssm:ComplianceItem:ResourceId" min:"1" type:"string"`

	// The type of resource. ManagedInstance is currently the only supported resource
	// type.
	ResourceType *string `json:"ssm:ComplianceItem:ResourceType" min:"1" type:"string"`

	// The severity of the compliance status. Severity can be one of the following:
	// Critical, High, Medium, Low, Informational, Unspecified.
	Severity ComplianceSeverity `json:"ssm:ComplianceItem:Severity" type:"string" enum:"true"`

	// The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.
	Status ComplianceStatus `json:"ssm:ComplianceItem:Status" type:"string" enum:"true"`

	// A title for the compliance item. For example, if the compliance item is a
	// Windows patch, the title could be the title of the KB article for the patch;
	// for example: Security Update for Active Directory Federation Services.
	Title *string `json:"ssm:ComplianceItem:Title" type:"string"`
}

// String returns the string representation
func (s ComplianceItem) String() string {
	return awsutil.Prettify(s)
}

// Information about a compliance item.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ComplianceItemEntry
type ComplianceItemEntry struct {
	_ struct{} `type:"structure"`

	// A "Key": "Value" tag combination for the compliance item.
	Details map[string]string `json:"ssm:ComplianceItemEntry:Details" type:"map"`

	// The compliance item ID. For example, if the compliance item is a Windows
	// patch, the ID could be the number of the KB article.
	Id *string `json:"ssm:ComplianceItemEntry:Id" min:"1" type:"string"`

	// The severity of the compliance status. Severity can be one of the following:
	// Critical, High, Medium, Low, Informational, Unspecified.
	//
	// Severity is a required field
	Severity ComplianceSeverity `json:"ssm:ComplianceItemEntry:Severity" type:"string" required:"true" enum:"true"`

	// The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.
	//
	// Status is a required field
	Status ComplianceStatus `json:"ssm:ComplianceItemEntry:Status" type:"string" required:"true" enum:"true"`

	// The title of the compliance item. For example, if the compliance item is
	// a Windows patch, the title could be the title of the KB article for the patch;
	// for example: Security Update for Active Directory Federation Services.
	Title *string `json:"ssm:ComplianceItemEntry:Title" type:"string"`
}

// String returns the string representation
func (s ComplianceItemEntry) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ComplianceItemEntry) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ComplianceItemEntry"}
	if s.Id != nil && len(*s.Id) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Id", 1))
	}
	if len(s.Severity) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Severity"))
	}
	if len(s.Status) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Status"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// One or more filters. Use a filter to return a more specific list of results.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ComplianceStringFilter
type ComplianceStringFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	Key *string `json:"ssm:ComplianceStringFilter:Key" min:"1" type:"string"`

	// The type of comparison that should be performed for the value: Equal, NotEqual,
	// BeginWith, LessThan, or GreaterThan.
	Type ComplianceQueryOperatorType `json:"ssm:ComplianceStringFilter:Type" type:"string" enum:"true"`

	// The value for which to search.
	Values []string `json:"ssm:ComplianceStringFilter:Values" min:"1" type:"list"`
}

// String returns the string representation
func (s ComplianceStringFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ComplianceStringFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ComplianceStringFilter"}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A summary of compliance information by compliance type.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ComplianceSummaryItem
type ComplianceSummaryItem struct {
	_ struct{} `type:"structure"`

	// The type of compliance item. For example, the compliance type can be Association,
	// Patch, or Custom:string.
	ComplianceType *string `json:"ssm:ComplianceSummaryItem:ComplianceType" min:"1" type:"string"`

	// A list of COMPLIANT items for the specified compliance type.
	CompliantSummary *CompliantSummary `json:"ssm:ComplianceSummaryItem:CompliantSummary" type:"structure"`

	// A list of NON_COMPLIANT items for the specified compliance type.
	NonCompliantSummary *NonCompliantSummary `json:"ssm:ComplianceSummaryItem:NonCompliantSummary" type:"structure"`
}

// String returns the string representation
func (s ComplianceSummaryItem) String() string {
	return awsutil.Prettify(s)
}

// A summary of resources that are compliant. The summary is organized according
// to the resource count for each compliance type.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/CompliantSummary
type CompliantSummary struct {
	_ struct{} `type:"structure"`

	// The total number of resources that are compliant.
	CompliantCount *int64 `json:"ssm:CompliantSummary:CompliantCount" type:"integer"`

	// A summary of the compliance severity by compliance type.
	SeveritySummary *SeveritySummary `json:"ssm:CompliantSummary:SeveritySummary" type:"structure"`
}

// String returns the string representation
func (s CompliantSummary) String() string {
	return awsutil.Prettify(s)
}

// Describes the association of a Systems Manager SSM document and an instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/CreateAssociationBatchRequestEntry
type CreateAssociationBatchRequestEntry struct {
	_ struct{} `type:"structure"`

	// Specify a descriptive name for the association.
	AssociationName *string `json:"ssm:CreateAssociationBatchRequestEntry:AssociationName" type:"string"`

	// Specify the target for the association. This target is required for associations
	// that use an Automation document and target resources by using rate controls.
	AutomationTargetParameterName *string `json:"ssm:CreateAssociationBatchRequestEntry:AutomationTargetParameterName" min:"1" type:"string"`

	// The severity level to assign to the association.
	ComplianceSeverity AssociationComplianceSeverity `json:"ssm:CreateAssociationBatchRequestEntry:ComplianceSeverity" type:"string" enum:"true"`

	// The document version.
	DocumentVersion *string `json:"ssm:CreateAssociationBatchRequestEntry:DocumentVersion" type:"string"`

	// The ID of the instance.
	InstanceId *string `json:"ssm:CreateAssociationBatchRequestEntry:InstanceId" type:"string"`

	// The maximum number of targets allowed to run the association at the same
	// time. You can specify a number, for example 10, or a percentage of the target
	// set, for example 10%. The default value is 100%, which means all targets
	// run the association at the same time.
	//
	// If a new instance starts and attempts to run an association while Systems
	// Manager is running MaxConcurrency associations, the association is allowed
	// to run. During the next association interval, the new instance will process
	// its association within the limit specified for MaxConcurrency.
	MaxConcurrency *string `json:"ssm:CreateAssociationBatchRequestEntry:MaxConcurrency" min:"1" type:"string"`

	// The number of errors that are allowed before the system stops sending requests
	// to run the association on additional targets. You can specify either an absolute
	// number of errors, for example 10, or a percentage of the target set, for
	// example 10%. If you specify 3, for example, the system stops sending requests
	// when the fourth error is received. If you specify 0, then the system stops
	// sending requests after the first error is returned. If you run an association
	// on 50 instances and set MaxError to 10%, then the system stops sending the
	// request when the sixth error is received.
	//
	// Executions that are already running an association when MaxErrors is reached
	// are allowed to complete, but some of these executions may fail as well. If
	// you need to ensure that there won't be more than max-errors failed executions,
	// set MaxConcurrency to 1 so that executions proceed one at a time.
	MaxErrors *string `json:"ssm:CreateAssociationBatchRequestEntry:MaxErrors" min:"1" type:"string"`

	// The name of the SSM document that contains the configuration information
	// for the instance. You can specify Command or Automation documents.
	//
	// You can specify AWS-predefined documents, documents you created, or a document
	// that is shared with you from another account.
	//
	// For SSM documents that are shared with you from other AWS accounts, you must
	// specify the complete SSM document ARN, in the following format:
	//
	// arn:aws:ssm:region:account-id:document/document-name
	//
	// For example:
	//
	// arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document
	//
	// For AWS-predefined documents and SSM documents you created in your account,
	// you only need to specify the document name. For example, AWS-ApplyPatchBaseline
	// or My-Document.
	//
	// Name is a required field
	Name *string `json:"ssm:CreateAssociationBatchRequestEntry:Name" type:"string" required:"true"`

	// An Amazon S3 bucket where you want to store the results of this request.
	OutputLocation *InstanceAssociationOutputLocation `json:"ssm:CreateAssociationBatchRequestEntry:OutputLocation" type:"structure"`

	// A description of the parameters for a document.
	Parameters map[string][]string `json:"ssm:CreateAssociationBatchRequestEntry:Parameters" type:"map"`

	// A cron expression that specifies a schedule when the association runs.
	ScheduleExpression *string `json:"ssm:CreateAssociationBatchRequestEntry:ScheduleExpression" min:"1" type:"string"`

	// The instances targeted by the request.
	Targets []Target `json:"ssm:CreateAssociationBatchRequestEntry:Targets" type:"list"`
}

// String returns the string representation
func (s CreateAssociationBatchRequestEntry) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateAssociationBatchRequestEntry) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateAssociationBatchRequestEntry"}
	if s.AutomationTargetParameterName != nil && len(*s.AutomationTargetParameterName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("AutomationTargetParameterName", 1))
	}
	if s.MaxConcurrency != nil && len(*s.MaxConcurrency) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("MaxConcurrency", 1))
	}
	if s.MaxErrors != nil && len(*s.MaxErrors) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("MaxErrors", 1))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}
	if s.ScheduleExpression != nil && len(*s.ScheduleExpression) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("ScheduleExpression", 1))
	}
	if s.OutputLocation != nil {
		if err := s.OutputLocation.Validate(); err != nil {
			invalidParams.AddNested("OutputLocation", err.(aws.ErrInvalidParams))
		}
	}
	if s.Targets != nil {
		for i, v := range s.Targets {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Targets", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Filter for the DescribeActivation API.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/DescribeActivationsFilter
type DescribeActivationsFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	FilterKey DescribeActivationsFilterKeys `json:"ssm:DescribeActivationsFilter:FilterKey" type:"string" enum:"true"`

	// The filter values.
	FilterValues []string `json:"ssm:DescribeActivationsFilter:FilterValues" type:"list"`
}

// String returns the string representation
func (s DescribeActivationsFilter) String() string {
	return awsutil.Prettify(s)
}

// A default version of a document.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/DocumentDefaultVersionDescription
type DocumentDefaultVersionDescription struct {
	_ struct{} `type:"structure"`

	// The default version of the document.
	DefaultVersion *string `json:"ssm:DocumentDefaultVersionDescription:DefaultVersion" type:"string"`

	// The default version of the artifact associated with the document.
	DefaultVersionName *string `json:"ssm:DocumentDefaultVersionDescription:DefaultVersionName" type:"string"`

	// The name of the document.
	Name *string `json:"ssm:DocumentDefaultVersionDescription:Name" type:"string"`
}

// String returns the string representation
func (s DocumentDefaultVersionDescription) String() string {
	return awsutil.Prettify(s)
}

// Describes a Systems Manager document.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/DocumentDescription
type DocumentDescription struct {
	_ struct{} `type:"structure"`

	// Details about the document attachments, including names, locations, sizes,
	// etc.
	AttachmentsInformation []AttachmentInformation `json:"ssm:DocumentDescription:AttachmentsInformation" type:"list"`

	// The date when the document was created.
	CreatedDate *time.Time `json:"ssm:DocumentDescription:CreatedDate" type:"timestamp" timestampFormat:"unix"`

	// The default version.
	DefaultVersion *string `json:"ssm:DocumentDescription:DefaultVersion" type:"string"`

	// A description of the document.
	Description *string `json:"ssm:DocumentDescription:Description" type:"string"`

	// The document format, either JSON or YAML.
	DocumentFormat DocumentFormat `json:"ssm:DocumentDescription:DocumentFormat" type:"string" enum:"true"`

	// The type of document.
	DocumentType DocumentType `json:"ssm:DocumentDescription:DocumentType" type:"string" enum:"true"`

	// The document version.
	DocumentVersion *string `json:"ssm:DocumentDescription:DocumentVersion" type:"string"`

	// The Sha256 or Sha1 hash created by the system when the document was created.
	//
	// Sha1 hashes have been deprecated.
	Hash *string `json:"ssm:DocumentDescription:Hash" type:"string"`

	// The hash type of the document. Valid values include Sha256 or Sha1.
	//
	// Sha1 hashes have been deprecated.
	HashType DocumentHashType `json:"ssm:DocumentDescription:HashType" type:"string" enum:"true"`

	// The latest version of the document.
	LatestVersion *string `json:"ssm:DocumentDescription:LatestVersion" type:"string"`

	// The name of the Systems Manager document.
	Name *string `json:"ssm:DocumentDescription:Name" type:"string"`

	// The AWS user account that created the document.
	Owner *string `json:"ssm:DocumentDescription:Owner" type:"string"`

	// A description of the parameters for a document.
	Parameters []DocumentParameter `json:"ssm:DocumentDescription:Parameters" type:"list"`

	// The list of OS platforms compatible with this Systems Manager document.
	PlatformTypes []PlatformType `json:"ssm:DocumentDescription:PlatformTypes" type:"list"`

	// The schema version.
	SchemaVersion *string `json:"ssm:DocumentDescription:SchemaVersion" type:"string"`

	// The SHA1 hash of the document, which you can use for verification.
	Sha1 *string `json:"ssm:DocumentDescription:Sha1" type:"string"`

	// The status of the Systems Manager document.
	Status DocumentStatus `json:"ssm:DocumentDescription:Status" type:"string" enum:"true"`

	// A message returned by AWS Systems Manager that explains the Status value.
	// For example, a Failed status might be explained by the StatusInformation
	// message, "The specified S3 bucket does not exist. Verify that the URL of
	// the S3 bucket is correct."
	StatusInformation *string `json:"ssm:DocumentDescription:StatusInformation" type:"string"`

	// The tags, or metadata, that have been applied to the document.
	Tags []Tag `json:"ssm:DocumentDescription:Tags" type:"list"`

	// The target type which defines the kinds of resources the document can run
	// on. For example, /AWS::EC2::Instance. For a list of valid resource types,
	// see AWS Resource Types Reference (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
	// in the AWS CloudFormation User Guide.
	TargetType *string `json:"ssm:DocumentDescription:TargetType" type:"string"`

	// The version of the artifact associated with the document.
	VersionName *string `json:"ssm:DocumentDescription:VersionName" type:"string"`
}

// String returns the string representation
func (s DocumentDescription) String() string {
	return awsutil.Prettify(s)
}

// Describes a filter.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/DocumentFilter
type DocumentFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key DocumentFilterKey `json:"ssm:DocumentFilter:Key" locationName:"key" type:"string" required:"true" enum:"true"`

	// The value of the filter.
	//
	// Value is a required field
	Value *string `json:"ssm:DocumentFilter:Value" locationName:"value" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s DocumentFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DocumentFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DocumentFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}
	if s.Value != nil && len(*s.Value) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Value", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Describes the name of a Systems Manager document.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/DocumentIdentifier
type DocumentIdentifier struct {
	_ struct{} `type:"structure"`

	// The document format, either JSON or YAML.
	DocumentFormat DocumentFormat `json:"ssm:DocumentIdentifier:DocumentFormat" type:"string" enum:"true"`

	// The document type.
	DocumentType DocumentType `json:"ssm:DocumentIdentifier:DocumentType" type:"string" enum:"true"`

	// The document version.
	DocumentVersion *string `json:"ssm:DocumentIdentifier:DocumentVersion" type:"string"`

	// The name of the Systems Manager document.
	Name *string `json:"ssm:DocumentIdentifier:Name" type:"string"`

	// The AWS user account that created the document.
	Owner *string `json:"ssm:DocumentIdentifier:Owner" type:"string"`

	// The operating system platform.
	PlatformTypes []PlatformType `json:"ssm:DocumentIdentifier:PlatformTypes" type:"list"`

	// The schema version.
	SchemaVersion *string `json:"ssm:DocumentIdentifier:SchemaVersion" type:"string"`

	// The tags, or metadata, that have been applied to the document.
	Tags []Tag `json:"ssm:DocumentIdentifier:Tags" type:"list"`

	// The target type which defines the kinds of resources the document can run
	// on. For example, /AWS::EC2::Instance. For a list of valid resource types,
	// see AWS Resource Types Reference (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html)
	// in the AWS CloudFormation User Guide.
	TargetType *string `json:"ssm:DocumentIdentifier:TargetType" type:"string"`

	// An optional field specifying the version of the artifact associated with
	// the document. For example, "Release 12, Update 6". This value is unique across
	// all versions of a document, and cannot be changed.
	VersionName *string `json:"ssm:DocumentIdentifier:VersionName" type:"string"`
}

// String returns the string representation
func (s DocumentIdentifier) String() string {
	return awsutil.Prettify(s)
}

// One or more filters. Use a filter to return a more specific list of documents.
//
// For keys, you can specify one or more tags that have been applied to a document.
//
// Other valid values include Owner, Name, PlatformTypes, and DocumentType.
//
// Note that only one Owner can be specified in a request. For example: Key=Owner,Values=Self.
//
// If you use Name as a key, you can use a name prefix to return a list of documents.
// For example, in the AWS CLI, to return a list of all documents that begin
// with Te, run the following command:
//
// aws ssm list-documents --filters Key=Name,Values=Te
//
// If you specify more than two keys, only documents that are identified by
// all the tags are returned in the results. If you specify more than two values
// for a key, documents that are identified by any of the values are returned
// in the results.
//
// To specify a custom key and value pair, use the format Key=tag:[tagName],Values=[valueName].
//
// For example, if you created a Key called region and are using the AWS CLI
// to call the list-documents command:
//
// aws ssm list-documents --filters Key=tag:region,Values=east,west Key=Owner,Values=Self
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/DocumentKeyValuesFilter
type DocumentKeyValuesFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter key.
	Key *string `json:"ssm:DocumentKeyValuesFilter:Key" min:"1" type:"string"`

	// The value for the filter key.
	Values []string `json:"ssm:DocumentKeyValuesFilter:Values" type:"list"`
}

// String returns the string representation
func (s DocumentKeyValuesFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DocumentKeyValuesFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DocumentKeyValuesFilter"}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Parameters specified in a System Manager document that run on the server
// when the command is run.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/DocumentParameter
type DocumentParameter struct {
	_ struct{} `type:"structure"`

	// If specified, the default values for the parameters. Parameters without a
	// default value are required. Parameters with a default value are optional.
	DefaultValue *string `json:"ssm:DocumentParameter:DefaultValue" type:"string"`

	// A description of what the parameter does, how to use it, the default value,
	// and whether or not the parameter is optional.
	Description *string `json:"ssm:DocumentParameter:Description" type:"string"`

	// The name of the parameter.
	Name *string `json:"ssm:DocumentParameter:Name" type:"string"`

	// The type of parameter. The type can be either String or StringList.
	Type DocumentParameterType `json:"ssm:DocumentParameter:Type" type:"string" enum:"true"`
}

// String returns the string representation
func (s DocumentParameter) String() string {
	return awsutil.Prettify(s)
}

// Version information about the document.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/DocumentVersionInfo
type DocumentVersionInfo struct {
	_ struct{} `type:"structure"`

	// The date the document was created.
	CreatedDate *time.Time `json:"ssm:DocumentVersionInfo:CreatedDate" type:"timestamp" timestampFormat:"unix"`

	// The document format, either JSON or YAML.
	DocumentFormat DocumentFormat `json:"ssm:DocumentVersionInfo:DocumentFormat" type:"string" enum:"true"`

	// The document version.
	DocumentVersion *string `json:"ssm:DocumentVersionInfo:DocumentVersion" type:"string"`

	// An identifier for the default version of the document.
	IsDefaultVersion *bool `json:"ssm:DocumentVersionInfo:IsDefaultVersion" type:"boolean"`

	// The document name.
	Name *string `json:"ssm:DocumentVersionInfo:Name" type:"string"`

	// The status of the Systems Manager document, such as Creating, Active, Failed,
	// and Deleting.
	Status DocumentStatus `json:"ssm:DocumentVersionInfo:Status" type:"string" enum:"true"`

	// A message returned by AWS Systems Manager that explains the Status value.
	// For example, a Failed status might be explained by the StatusInformation
	// message, "The specified S3 bucket does not exist. Verify that the URL of
	// the S3 bucket is correct."
	StatusInformation *string `json:"ssm:DocumentVersionInfo:StatusInformation" type:"string"`

	// The version of the artifact associated with the document. For example, "Release
	// 12, Update 6". This value is unique across all versions of a document, and
	// cannot be changed.
	VersionName *string `json:"ssm:DocumentVersionInfo:VersionName" type:"string"`
}

// String returns the string representation
func (s DocumentVersionInfo) String() string {
	return awsutil.Prettify(s)
}

// The EffectivePatch structure defines metadata about a patch along with the
// approval state of the patch in a particular patch baseline. The approval
// state includes information about whether the patch is currently approved,
// due to be approved by a rule, explicitly approved, or explicitly rejected
// and the date the patch was or will be approved.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/EffectivePatch
type EffectivePatch struct {
	_ struct{} `type:"structure"`

	// Provides metadata for a patch, including information such as the KB ID, severity,
	// classification and a URL for where more information can be obtained about
	// the patch.
	Patch *Patch `json:"ssm:EffectivePatch:Patch" type:"structure"`

	// The status of the patch in a patch baseline. This includes information about
	// whether the patch is currently approved, due to be approved by a rule, explicitly
	// approved, or explicitly rejected and the date the patch was or will be approved.
	PatchStatus *PatchStatus `json:"ssm:EffectivePatch:PatchStatus" type:"structure"`
}

// String returns the string representation
func (s EffectivePatch) String() string {
	return awsutil.Prettify(s)
}

// Describes a failed association.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/FailedCreateAssociation
type FailedCreateAssociation struct {
	_ struct{} `type:"structure"`

	// The association.
	Entry *CreateAssociationBatchRequestEntry `json:"ssm:FailedCreateAssociation:Entry" type:"structure"`

	// The source of the failure.
	Fault Fault `json:"ssm:FailedCreateAssociation:Fault" type:"string" enum:"true"`

	// A description of the failure.
	Message *string `json:"ssm:FailedCreateAssociation:Message" type:"string"`
}

// String returns the string representation
func (s FailedCreateAssociation) String() string {
	return awsutil.Prettify(s)
}

// Information about an Automation failure.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/FailureDetails
type FailureDetails struct {
	_ struct{} `type:"structure"`

	// Detailed information about the Automation step failure.
	Details map[string][]string `json:"ssm:FailureDetails:Details" min:"1" type:"map"`

	// The stage of the Automation execution when the failure occurred. The stages
	// include the following: InputValidation, PreVerification, Invocation, PostVerification.
	FailureStage *string `json:"ssm:FailureDetails:FailureStage" type:"string"`

	// The type of Automation failure. Failure types include the following: Action,
	// Permission, Throttling, Verification, Internal.
	FailureType *string `json:"ssm:FailureDetails:FailureType" type:"string"`
}

// String returns the string representation
func (s FailureDetails) String() string {
	return awsutil.Prettify(s)
}

// Status information about the aggregated associations.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstanceAggregatedAssociationOverview
type InstanceAggregatedAssociationOverview struct {
	_ struct{} `type:"structure"`

	// Detailed status information about the aggregated associations.
	DetailedStatus *string `json:"ssm:InstanceAggregatedAssociationOverview:DetailedStatus" type:"string"`

	// The number of associations for the instance(s).
	InstanceAssociationStatusAggregatedCount map[string]int64 `json:"ssm:InstanceAggregatedAssociationOverview:InstanceAssociationStatusAggregatedCount" type:"map"`
}

// String returns the string representation
func (s InstanceAggregatedAssociationOverview) String() string {
	return awsutil.Prettify(s)
}

// One or more association documents on the instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstanceAssociation
type InstanceAssociation struct {
	_ struct{} `type:"structure"`

	// The association ID.
	AssociationId *string `json:"ssm:InstanceAssociation:AssociationId" type:"string"`

	// Version information for the association on the instance.
	AssociationVersion *string `json:"ssm:InstanceAssociation:AssociationVersion" type:"string"`

	// The content of the association document for the instance(s).
	Content *string `json:"ssm:InstanceAssociation:Content" min:"1" type:"string"`

	// The instance ID.
	InstanceId *string `json:"ssm:InstanceAssociation:InstanceId" type:"string"`
}

// String returns the string representation
func (s InstanceAssociation) String() string {
	return awsutil.Prettify(s)
}

// An Amazon S3 bucket where you want to store the results of this request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstanceAssociationOutputLocation
type InstanceAssociationOutputLocation struct {
	_ struct{} `type:"structure"`

	// An Amazon S3 bucket where you want to store the results of this request.
	S3Location *S3OutputLocation `json:"ssm:InstanceAssociationOutputLocation:S3Location" type:"structure"`
}

// String returns the string representation
func (s InstanceAssociationOutputLocation) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InstanceAssociationOutputLocation) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InstanceAssociationOutputLocation"}
	if s.S3Location != nil {
		if err := s.S3Location.Validate(); err != nil {
			invalidParams.AddNested("S3Location", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The URL of Amazon S3 bucket where you want to store the results of this request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstanceAssociationOutputUrl
type InstanceAssociationOutputUrl struct {
	_ struct{} `type:"structure"`

	// The URL of Amazon S3 bucket where you want to store the results of this request.
	S3OutputUrl *S3OutputUrl `json:"ssm:InstanceAssociationOutputUrl:S3OutputUrl" type:"structure"`
}

// String returns the string representation
func (s InstanceAssociationOutputUrl) String() string {
	return awsutil.Prettify(s)
}

// Status information about the instance association.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstanceAssociationStatusInfo
type InstanceAssociationStatusInfo struct {
	_ struct{} `type:"structure"`

	// The association ID.
	AssociationId *string `json:"ssm:InstanceAssociationStatusInfo:AssociationId" type:"string"`

	// The name of the association applied to the instance.
	AssociationName *string `json:"ssm:InstanceAssociationStatusInfo:AssociationName" type:"string"`

	// The version of the association applied to the instance.
	AssociationVersion *string `json:"ssm:InstanceAssociationStatusInfo:AssociationVersion" type:"string"`

	// Detailed status information about the instance association.
	DetailedStatus *string `json:"ssm:InstanceAssociationStatusInfo:DetailedStatus" type:"string"`

	// The association document versions.
	DocumentVersion *string `json:"ssm:InstanceAssociationStatusInfo:DocumentVersion" type:"string"`

	// An error code returned by the request to create the association.
	ErrorCode *string `json:"ssm:InstanceAssociationStatusInfo:ErrorCode" type:"string"`

	// The date the instance association ran.
	ExecutionDate *time.Time `json:"ssm:InstanceAssociationStatusInfo:ExecutionDate" type:"timestamp" timestampFormat:"unix"`

	// Summary information about association execution.
	ExecutionSummary *string `json:"ssm:InstanceAssociationStatusInfo:ExecutionSummary" min:"1" type:"string"`

	// The instance ID where the association was created.
	InstanceId *string `json:"ssm:InstanceAssociationStatusInfo:InstanceId" type:"string"`

	// The name of the association.
	Name *string `json:"ssm:InstanceAssociationStatusInfo:Name" type:"string"`

	// A URL for an Amazon S3 bucket where you want to store the results of this
	// request.
	OutputUrl *InstanceAssociationOutputUrl `json:"ssm:InstanceAssociationStatusInfo:OutputUrl" type:"structure"`

	// Status information about the instance association.
	Status *string `json:"ssm:InstanceAssociationStatusInfo:Status" type:"string"`
}

// String returns the string representation
func (s InstanceAssociationStatusInfo) String() string {
	return awsutil.Prettify(s)
}

// Describes a filter for a specific list of instances.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstanceInformation
type InstanceInformation struct {
	_ struct{} `type:"structure"`

	// The activation ID created by Systems Manager when the server or VM was registered.
	ActivationId *string `json:"ssm:InstanceInformation:ActivationId" type:"string"`

	// The version of SSM Agent running on your Linux instance.
	AgentVersion *string `json:"ssm:InstanceInformation:AgentVersion" type:"string"`

	// Information about the association.
	AssociationOverview *InstanceAggregatedAssociationOverview `json:"ssm:InstanceInformation:AssociationOverview" type:"structure"`

	// The status of the association.
	AssociationStatus *string `json:"ssm:InstanceInformation:AssociationStatus" type:"string"`

	// The fully qualified host name of the managed instance.
	ComputerName *string `json:"ssm:InstanceInformation:ComputerName" min:"1" type:"string"`

	// The IP address of the managed instance.
	IPAddress *string `json:"ssm:InstanceInformation:IPAddress" min:"1" type:"string"`

	// The Amazon Identity and Access Management (IAM) role assigned to the on-premises
	// Systems Manager managed instances. This call does not return the IAM role
	// for Amazon EC2 instances.
	IamRole *string `json:"ssm:InstanceInformation:IamRole" type:"string"`

	// The instance ID.
	InstanceId *string `json:"ssm:InstanceInformation:InstanceId" type:"string"`

	// Indicates whether latest version of SSM Agent is running on your instance.
	// Some older versions of Windows Server use the EC2Config service to process
	// SSM requests. For this reason, this field does not indicate whether or not
	// the latest version is installed on Windows managed instances.
	IsLatestVersion *bool `json:"ssm:InstanceInformation:IsLatestVersion" type:"boolean"`

	// The date the association was last run.
	LastAssociationExecutionDate *time.Time `json:"ssm:InstanceInformation:LastAssociationExecutionDate" type:"timestamp" timestampFormat:"unix"`

	// The date and time when agent last pinged Systems Manager service.
	LastPingDateTime *time.Time `json:"ssm:InstanceInformation:LastPingDateTime" type:"timestamp" timestampFormat:"unix"`

	// The last date the association was successfully run.
	LastSuccessfulAssociationExecutionDate *time.Time `json:"ssm:InstanceInformation:LastSuccessfulAssociationExecutionDate" type:"timestamp" timestampFormat:"unix"`

	// The name of the managed instance.
	Name *string `json:"ssm:InstanceInformation:Name" type:"string"`

	// Connection status of SSM Agent.
	PingStatus PingStatus `json:"ssm:InstanceInformation:PingStatus" type:"string" enum:"true"`

	// The name of the operating system platform running on your instance.
	PlatformName *string `json:"ssm:InstanceInformation:PlatformName" type:"string"`

	// The operating system platform type.
	PlatformType PlatformType `json:"ssm:InstanceInformation:PlatformType" type:"string" enum:"true"`

	// The version of the OS platform running on your instance.
	PlatformVersion *string `json:"ssm:InstanceInformation:PlatformVersion" type:"string"`

	// The date the server or VM was registered with AWS as a managed instance.
	RegistrationDate *time.Time `json:"ssm:InstanceInformation:RegistrationDate" type:"timestamp" timestampFormat:"unix"`

	// The type of instance. Instances are either EC2 instances or managed instances.
	ResourceType ResourceType `json:"ssm:InstanceInformation:ResourceType" type:"string" enum:"true"`
}

// String returns the string representation
func (s InstanceInformation) String() string {
	return awsutil.Prettify(s)
}

// Describes a filter for a specific list of instances. You can filter instances
// information by using tags. You specify tags by using a key-value mapping.
//
// Use this action instead of the DescribeInstanceInformationRequest$InstanceInformationFilterList
// method. The InstanceInformationFilterList method is a legacy method and does
// not support tags.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstanceInformationFilter
type InstanceInformationFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key InstanceInformationFilterKey `json:"ssm:InstanceInformationFilter:Key" locationName:"key" type:"string" required:"true" enum:"true"`

	// The filter values.
	//
	// ValueSet is a required field
	ValueSet []string `json:"ssm:InstanceInformationFilter:ValueSet" locationName:"valueSet" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s InstanceInformationFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InstanceInformationFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InstanceInformationFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.ValueSet == nil {
		invalidParams.Add(aws.NewErrParamRequired("ValueSet"))
	}
	if s.ValueSet != nil && len(s.ValueSet) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("ValueSet", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The filters to describe or get information about your managed instances.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstanceInformationStringFilter
type InstanceInformationStringFilter struct {
	_ struct{} `type:"structure"`

	// The filter key name to describe your instances. For example:
	//
	// "InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"|"ResourceType"|"AssociationStatus"|"Tag
	// Key"
	//
	// Key is a required field
	Key *string `json:"ssm:InstanceInformationStringFilter:Key" min:"1" type:"string" required:"true"`

	// The filter values.
	//
	// Values is a required field
	Values []string `json:"ssm:InstanceInformationStringFilter:Values" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s InstanceInformationStringFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InstanceInformationStringFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InstanceInformationStringFilter"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Defines the high-level patch compliance state for a managed instance, providing
// information about the number of installed, missing, not applicable, and failed
// patches along with metadata about the operation when this information was
// gathered for the instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstancePatchState
type InstancePatchState struct {
	_ struct{} `type:"structure"`

	// The ID of the patch baseline used to patch the instance.
	//
	// BaselineId is a required field
	BaselineId *string `json:"ssm:InstancePatchState:BaselineId" min:"20" type:"string" required:"true"`

	// The number of patches from the patch baseline that were attempted to be installed
	// during the last patching operation, but failed to install.
	FailedCount *int64 `json:"ssm:InstancePatchState:FailedCount" type:"integer"`

	// An https URL or an Amazon S3 path-style URL to a list of patches to be installed.
	// This patch installation list, which you maintain in an Amazon S3 bucket in
	// YAML format and specify in the SSM document AWS-RunPatchBaseline, overrides
	// the patches specified by the default patch baseline.
	//
	// For more information about the InstallOverrideList parameter, see About the
	// SSM Document AWS-RunPatchBaseline (http://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html)
	// in the AWS Systems Manager User Guide.
	InstallOverrideList *string `json:"ssm:InstancePatchState:InstallOverrideList" min:"1" type:"string"`

	// The number of patches from the patch baseline that are installed on the instance.
	InstalledCount *int64 `json:"ssm:InstancePatchState:InstalledCount" type:"integer"`

	// The number of patches not specified in the patch baseline that are installed
	// on the instance.
	InstalledOtherCount *int64 `json:"ssm:InstancePatchState:InstalledOtherCount" type:"integer"`

	// The number of instances with patches installed that are specified in a RejectedPatches
	// list. Patches with a status of InstalledRejected were typically installed
	// before they were added to a RejectedPatches list.
	//
	// If ALLOW_AS_DEPENDENCY is the specified option for RejectedPatchesAction,
	// the value of InstalledRejectedCount will always be 0 (zero).
	InstalledRejectedCount *int64 `json:"ssm:InstancePatchState:InstalledRejectedCount" type:"integer"`

	// The ID of the managed instance the high-level patch compliance information
	// was collected for.
	//
	// InstanceId is a required field
	InstanceId *string `json:"ssm:InstancePatchState:InstanceId" type:"string" required:"true"`

	// The number of patches from the patch baseline that are applicable for the
	// instance but aren't currently installed.
	MissingCount *int64 `json:"ssm:InstancePatchState:MissingCount" type:"integer"`

	// The number of patches from the patch baseline that aren't applicable for
	// the instance and therefore aren't installed on the instance. This number
	// may be truncated if the list of patch names is very large. The number of
	// patches beyond this limit are reported in UnreportedNotApplicableCount.
	NotApplicableCount *int64 `json:"ssm:InstancePatchState:NotApplicableCount" type:"integer"`

	// The type of patching operation that was performed: SCAN (assess patch compliance
	// state) or INSTALL (install missing patches).
	//
	// Operation is a required field
	Operation PatchOperationType `json:"ssm:InstancePatchState:Operation" type:"string" required:"true" enum:"true"`

	// The time the most recent patching operation completed on the instance.
	//
	// OperationEndTime is a required field
	OperationEndTime *time.Time `json:"ssm:InstancePatchState:OperationEndTime" type:"timestamp" timestampFormat:"unix" required:"true"`

	// The time the most recent patching operation was started on the instance.
	//
	// OperationStartTime is a required field
	OperationStartTime *time.Time `json:"ssm:InstancePatchState:OperationStartTime" type:"timestamp" timestampFormat:"unix" required:"true"`

	// Placeholder information. This field will always be empty in the current release
	// of the service.
	OwnerInformation *string `json:"ssm:InstancePatchState:OwnerInformation" min:"1" type:"string"`

	// The name of the patch group the managed instance belongs to.
	//
	// PatchGroup is a required field
	PatchGroup *string `json:"ssm:InstancePatchState:PatchGroup" min:"1" type:"string" required:"true"`

	// The ID of the patch baseline snapshot used during the patching operation
	// when this compliance data was collected.
	SnapshotId *string `json:"ssm:InstancePatchState:SnapshotId" min:"36" type:"string"`

	// The number of patches beyond the supported limit of NotApplicableCount that
	// are not reported by name to Systems Manager Inventory.
	UnreportedNotApplicableCount *int64 `json:"ssm:InstancePatchState:UnreportedNotApplicableCount" type:"integer"`
}

// String returns the string representation
func (s InstancePatchState) String() string {
	return awsutil.Prettify(s)
}

// Defines a filter used in DescribeInstancePatchStatesForPatchGroup used to
// scope down the information returned by the API.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InstancePatchStateFilter
type InstancePatchStateFilter struct {
	_ struct{} `type:"structure"`

	// The key for the filter. Supported values are FailedCount, InstalledCount,
	// InstalledOtherCount, MissingCount and NotApplicableCount.
	//
	// Key is a required field
	Key *string `json:"ssm:InstancePatchStateFilter:Key" min:"1" type:"string" required:"true"`

	// The type of comparison that should be performed for the value: Equal, NotEqual,
	// LessThan or GreaterThan.
	//
	// Type is a required field
	Type InstancePatchStateOperatorType `json:"ssm:InstancePatchStateFilter:Type" type:"string" required:"true" enum:"true"`

	// The value for the filter, must be an integer greater than or equal to 0.
	//
	// Values is a required field
	Values []string `json:"ssm:InstancePatchStateFilter:Values" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s InstancePatchStateFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InstancePatchStateFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InstancePatchStateFilter"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}
	if len(s.Type) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Type"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Specifies the inventory type and attribute for the aggregation execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryAggregator
type InventoryAggregator struct {
	_ struct{} `type:"structure"`

	// Nested aggregators to further refine aggregation for an inventory type.
	Aggregators []InventoryAggregator `json:"ssm:InventoryAggregator:Aggregators" min:"1" type:"list"`

	// The inventory type and attribute name for aggregation.
	Expression *string `json:"ssm:InventoryAggregator:Expression" min:"1" type:"string"`

	// A user-defined set of one or more filters on which to aggregate inventory
	// data. Groups return a count of resources that match and don't match the specified
	// criteria.
	Groups []InventoryGroup `json:"ssm:InventoryAggregator:Groups" min:"1" type:"list"`
}

// String returns the string representation
func (s InventoryAggregator) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InventoryAggregator) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InventoryAggregator"}
	if s.Aggregators != nil && len(s.Aggregators) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Aggregators", 1))
	}
	if s.Expression != nil && len(*s.Expression) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Expression", 1))
	}
	if s.Groups != nil && len(s.Groups) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Groups", 1))
	}
	if s.Aggregators != nil {
		for i, v := range s.Aggregators {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Aggregators", i), err.(aws.ErrInvalidParams))
			}
		}
	}
	if s.Groups != nil {
		for i, v := range s.Groups {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Groups", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Status information returned by the DeleteInventory action.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryDeletionStatusItem
type InventoryDeletionStatusItem struct {
	_ struct{} `type:"structure"`

	// The deletion ID returned by the DeleteInventory action.
	DeletionId *string `json:"ssm:InventoryDeletionStatusItem:DeletionId" type:"string"`

	// The UTC timestamp when the delete operation started.
	DeletionStartTime *time.Time `json:"ssm:InventoryDeletionStatusItem:DeletionStartTime" type:"timestamp" timestampFormat:"unix"`

	// Information about the delete operation. For more information about this summary,
	// see Understanding the Delete Inventory Summary (http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete)
	// in the AWS Systems Manager User Guide.
	DeletionSummary *InventoryDeletionSummary `json:"ssm:InventoryDeletionStatusItem:DeletionSummary" type:"structure"`

	// The status of the operation. Possible values are InProgress and Complete.
	LastStatus InventoryDeletionStatus `json:"ssm:InventoryDeletionStatusItem:LastStatus" type:"string" enum:"true"`

	// Information about the status.
	LastStatusMessage *string `json:"ssm:InventoryDeletionStatusItem:LastStatusMessage" type:"string"`

	// The UTC timestamp of when the last status report.
	LastStatusUpdateTime *time.Time `json:"ssm:InventoryDeletionStatusItem:LastStatusUpdateTime" type:"timestamp" timestampFormat:"unix"`

	// The name of the inventory data type.
	TypeName *string `json:"ssm:InventoryDeletionStatusItem:TypeName" min:"1" type:"string"`
}

// String returns the string representation
func (s InventoryDeletionStatusItem) String() string {
	return awsutil.Prettify(s)
}

// Information about the delete operation.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryDeletionSummary
type InventoryDeletionSummary struct {
	_ struct{} `type:"structure"`

	// Remaining number of items to delete.
	RemainingCount *int64 `json:"ssm:InventoryDeletionSummary:RemainingCount" type:"integer"`

	// A list of counts and versions for deleted items.
	SummaryItems []InventoryDeletionSummaryItem `json:"ssm:InventoryDeletionSummary:SummaryItems" type:"list"`

	// The total number of items to delete. This count does not change during the
	// delete operation.
	TotalCount *int64 `json:"ssm:InventoryDeletionSummary:TotalCount" type:"integer"`
}

// String returns the string representation
func (s InventoryDeletionSummary) String() string {
	return awsutil.Prettify(s)
}

// Either a count, remaining count, or a version number in a delete inventory
// summary.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryDeletionSummaryItem
type InventoryDeletionSummaryItem struct {
	_ struct{} `type:"structure"`

	// A count of the number of deleted items.
	Count *int64 `json:"ssm:InventoryDeletionSummaryItem:Count" type:"integer"`

	// The remaining number of items to delete.
	RemainingCount *int64 `json:"ssm:InventoryDeletionSummaryItem:RemainingCount" type:"integer"`

	// The inventory type version.
	Version *string `json:"ssm:InventoryDeletionSummaryItem:Version" type:"string"`
}

// String returns the string representation
func (s InventoryDeletionSummaryItem) String() string {
	return awsutil.Prettify(s)
}

// One or more filters. Use a filter to return a more specific list of results.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryFilter
type InventoryFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter key.
	//
	// Key is a required field
	Key *string `json:"ssm:InventoryFilter:Key" min:"1" type:"string" required:"true"`

	// The type of filter. Valid values include the following: "Equal"|"NotEqual"|"BeginWith"|"LessThan"|"GreaterThan"
	Type InventoryQueryOperatorType `json:"ssm:InventoryFilter:Type" type:"string" enum:"true"`

	// Inventory filter values. Example: inventory filter where instance IDs are
	// specified as values Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g,
	// i-1a2b3c4d5e6,Type=Equal
	//
	// Values is a required field
	Values []string `json:"ssm:InventoryFilter:Values" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s InventoryFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InventoryFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InventoryFilter"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A user-defined set of one or more filters on which to aggregate inventory
// data. Groups return a count of resources that match and don't match the specified
// criteria.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryGroup
type InventoryGroup struct {
	_ struct{} `type:"structure"`

	// Filters define the criteria for the group. The matchingCount field displays
	// the number of resources that match the criteria. The notMatchingCount field
	// displays the number of resources that don't match the criteria.
	//
	// Filters is a required field
	Filters []InventoryFilter `json:"ssm:InventoryGroup:Filters" min:"1" type:"list" required:"true"`

	// The name of the group.
	//
	// Name is a required field
	Name *string `json:"ssm:InventoryGroup:Name" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s InventoryGroup) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InventoryGroup) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InventoryGroup"}

	if s.Filters == nil {
		invalidParams.Add(aws.NewErrParamRequired("Filters"))
	}
	if s.Filters != nil && len(s.Filters) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Filters", 1))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Name", 1))
	}
	if s.Filters != nil {
		for i, v := range s.Filters {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Filters", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information collected from managed instances based on your inventory policy
// document
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryItem
type InventoryItem struct {
	_ struct{} `type:"structure"`

	// The time the inventory information was collected.
	//
	// CaptureTime is a required field
	CaptureTime *string `json:"ssm:InventoryItem:CaptureTime" type:"string" required:"true"`

	// The inventory data of the inventory type.
	Content []map[string]string `json:"ssm:InventoryItem:Content" type:"list"`

	// MD5 hash of the inventory item type contents. The content hash is used to
	// determine whether to update inventory information. The PutInventory API does
	// not update the inventory item type contents if the MD5 hash has not changed
	// since last update.
	ContentHash *string `json:"ssm:InventoryItem:ContentHash" type:"string"`

	// A map of associated properties for a specified inventory type. For example,
	// with this attribute, you can specify the ExecutionId, ExecutionType, ComplianceType
	// properties of the AWS:ComplianceItem type.
	Context map[string]string `json:"ssm:InventoryItem:Context" type:"map"`

	// The schema version for the inventory item.
	//
	// SchemaVersion is a required field
	SchemaVersion *string `json:"ssm:InventoryItem:SchemaVersion" type:"string" required:"true"`

	// The name of the inventory type. Default inventory item type names start with
	// AWS. Custom inventory type names will start with Custom. Default inventory
	// item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation,
	// AWS:Network, and AWS:WindowsUpdate.
	//
	// TypeName is a required field
	TypeName *string `json:"ssm:InventoryItem:TypeName" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s InventoryItem) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *InventoryItem) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "InventoryItem"}

	if s.CaptureTime == nil {
		invalidParams.Add(aws.NewErrParamRequired("CaptureTime"))
	}

	if s.SchemaVersion == nil {
		invalidParams.Add(aws.NewErrParamRequired("SchemaVersion"))
	}

	if s.TypeName == nil {
		invalidParams.Add(aws.NewErrParamRequired("TypeName"))
	}
	if s.TypeName != nil && len(*s.TypeName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TypeName", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Attributes are the entries within the inventory item content. It contains
// name and value.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryItemAttribute
type InventoryItemAttribute struct {
	_ struct{} `type:"structure"`

	// The data type of the inventory item attribute.
	//
	// DataType is a required field
	DataType InventoryAttributeDataType `json:"ssm:InventoryItemAttribute:DataType" type:"string" required:"true" enum:"true"`

	// Name of the inventory item attribute.
	//
	// Name is a required field
	Name *string `json:"ssm:InventoryItemAttribute:Name" type:"string" required:"true"`
}

// String returns the string representation
func (s InventoryItemAttribute) String() string {
	return awsutil.Prettify(s)
}

// The inventory item schema definition. Users can use this to compose inventory
// query filters.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryItemSchema
type InventoryItemSchema struct {
	_ struct{} `type:"structure"`

	// The schema attributes for inventory. This contains data type and attribute
	// name.
	//
	// Attributes is a required field
	Attributes []InventoryItemAttribute `json:"ssm:InventoryItemSchema:Attributes" min:"1" type:"list" required:"true"`

	// The alias name of the inventory type. The alias name is used for display
	// purposes.
	DisplayName *string `json:"ssm:InventoryItemSchema:DisplayName" type:"string"`

	// The name of the inventory type. Default inventory item type names start with
	// AWS. Custom inventory type names will start with Custom. Default inventory
	// item types include the following: AWS:AWSComponent, AWS:Application, AWS:InstanceInformation,
	// AWS:Network, and AWS:WindowsUpdate.
	//
	// TypeName is a required field
	TypeName *string `json:"ssm:InventoryItemSchema:TypeName" min:"1" type:"string" required:"true"`

	// The schema version for the inventory item.
	Version *string `json:"ssm:InventoryItemSchema:Version" type:"string"`
}

// String returns the string representation
func (s InventoryItemSchema) String() string {
	return awsutil.Prettify(s)
}

// Inventory query results.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryResultEntity
type InventoryResultEntity struct {
	_ struct{} `type:"structure"`

	// The data section in the inventory result entity JSON.
	Data map[string]InventoryResultItem `json:"ssm:InventoryResultEntity:Data" type:"map"`

	// ID of the inventory result entity. For example, for managed instance inventory
	// the result will be the managed instance ID. For EC2 instance inventory, the
	// result will be the instance ID.
	Id *string `json:"ssm:InventoryResultEntity:Id" type:"string"`
}

// String returns the string representation
func (s InventoryResultEntity) String() string {
	return awsutil.Prettify(s)
}

// The inventory result item.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/InventoryResultItem
type InventoryResultItem struct {
	_ struct{} `type:"structure"`

	// The time inventory item data was captured.
	CaptureTime *string `json:"ssm:InventoryResultItem:CaptureTime" type:"string"`

	// Contains all the inventory data of the item type. Results include attribute
	// names and values.
	//
	// Content is a required field
	Content []map[string]string `json:"ssm:InventoryResultItem:Content" type:"list" required:"true"`

	// MD5 hash of the inventory item type contents. The content hash is used to
	// determine whether to update inventory information. The PutInventory API does
	// not update the inventory item type contents if the MD5 hash has not changed
	// since last update.
	ContentHash *string `json:"ssm:InventoryResultItem:ContentHash" type:"string"`

	// The schema version for the inventory result item/
	//
	// SchemaVersion is a required field
	SchemaVersion *string `json:"ssm:InventoryResultItem:SchemaVersion" type:"string" required:"true"`

	// The name of the inventory result item type.
	//
	// TypeName is a required field
	TypeName *string `json:"ssm:InventoryResultItem:TypeName" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s InventoryResultItem) String() string {
	return awsutil.Prettify(s)
}

// Information about an Amazon S3 bucket to write instance-level logs to.
//
// LoggingInfo has been deprecated. To specify an S3 bucket to contain logs,
// instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters
// structure. For information about how Systems Manager handles these options
// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/LoggingInfo
type LoggingInfo struct {
	_ struct{} `type:"structure"`

	// The name of an Amazon S3 bucket where execution logs are stored .
	//
	// S3BucketName is a required field
	S3BucketName *string `json:"ssm:LoggingInfo:S3BucketName" min:"3" type:"string" required:"true"`

	// (Optional) The Amazon S3 bucket subfolder.
	S3KeyPrefix *string `json:"ssm:LoggingInfo:S3KeyPrefix" type:"string"`

	// The region where the Amazon S3 bucket is located.
	//
	// S3Region is a required field
	S3Region *string `json:"ssm:LoggingInfo:S3Region" min:"3" type:"string" required:"true"`
}

// String returns the string representation
func (s LoggingInfo) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *LoggingInfo) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "LoggingInfo"}

	if s.S3BucketName == nil {
		invalidParams.Add(aws.NewErrParamRequired("S3BucketName"))
	}
	if s.S3BucketName != nil && len(*s.S3BucketName) < 3 {
		invalidParams.Add(aws.NewErrParamMinLen("S3BucketName", 3))
	}

	if s.S3Region == nil {
		invalidParams.Add(aws.NewErrParamRequired("S3Region"))
	}
	if s.S3Region != nil && len(*s.S3Region) < 3 {
		invalidParams.Add(aws.NewErrParamMinLen("S3Region", 3))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The parameters for an AUTOMATION task type.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowAutomationParameters
type MaintenanceWindowAutomationParameters struct {
	_ struct{} `type:"structure"`

	// The version of an Automation document to use during task execution.
	DocumentVersion *string `json:"ssm:MaintenanceWindowAutomationParameters:DocumentVersion" type:"string"`

	// The parameters for the AUTOMATION task.
	//
	// For information about specifying and updating task parameters, see RegisterTaskWithMaintenanceWindow
	// and UpdateMaintenanceWindowTask.
	//
	// LoggingInfo has been deprecated. To specify an S3 bucket to contain logs,
	// instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters
	// structure. For information about how Systems Manager handles these options
	// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
	//
	// TaskParameters has been deprecated. To specify parameters to pass to a task
	// when it runs, instead use the Parameters option in the TaskInvocationParameters
	// structure. For information about how Systems Manager handles these options
	// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
	//
	// For AUTOMATION task types, Systems Manager ignores any values specified for
	// these parameters.
	Parameters map[string][]string `json:"ssm:MaintenanceWindowAutomationParameters:Parameters" min:"1" type:"map"`
}

// String returns the string representation
func (s MaintenanceWindowAutomationParameters) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MaintenanceWindowAutomationParameters) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "MaintenanceWindowAutomationParameters"}
	if s.Parameters != nil && len(s.Parameters) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Parameters", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Describes the information about an execution of a maintenance window.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowExecution
type MaintenanceWindowExecution struct {
	_ struct{} `type:"structure"`

	// The time the execution finished.
	EndTime *time.Time `json:"ssm:MaintenanceWindowExecution:EndTime" type:"timestamp" timestampFormat:"unix"`

	// The time the execution started.
	StartTime *time.Time `json:"ssm:MaintenanceWindowExecution:StartTime" type:"timestamp" timestampFormat:"unix"`

	// The status of the execution.
	Status MaintenanceWindowExecutionStatus `json:"ssm:MaintenanceWindowExecution:Status" type:"string" enum:"true"`

	// The details explaining the Status. Only available for certain status values.
	StatusDetails *string `json:"ssm:MaintenanceWindowExecution:StatusDetails" type:"string"`

	// The ID of the maintenance window execution.
	WindowExecutionId *string `json:"ssm:MaintenanceWindowExecution:WindowExecutionId" min:"36" type:"string"`

	// The ID of the maintenance window.
	WindowId *string `json:"ssm:MaintenanceWindowExecution:WindowId" min:"20" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowExecution) String() string {
	return awsutil.Prettify(s)
}

// Information about a task execution performed as part of a maintenance window
// execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowExecutionTaskIdentity
type MaintenanceWindowExecutionTaskIdentity struct {
	_ struct{} `type:"structure"`

	// The time the task execution finished.
	EndTime *time.Time `json:"ssm:MaintenanceWindowExecutionTaskIdentity:EndTime" type:"timestamp" timestampFormat:"unix"`

	// The time the task execution started.
	StartTime *time.Time `json:"ssm:MaintenanceWindowExecutionTaskIdentity:StartTime" type:"timestamp" timestampFormat:"unix"`

	// The status of the task execution.
	Status MaintenanceWindowExecutionStatus `json:"ssm:MaintenanceWindowExecutionTaskIdentity:Status" type:"string" enum:"true"`

	// The details explaining the status of the task execution. Only available for
	// certain status values.
	StatusDetails *string `json:"ssm:MaintenanceWindowExecutionTaskIdentity:StatusDetails" type:"string"`

	// The ARN of the task that ran.
	TaskArn *string `json:"ssm:MaintenanceWindowExecutionTaskIdentity:TaskArn" min:"1" type:"string"`

	// The ID of the specific task execution in the maintenance window execution.
	TaskExecutionId *string `json:"ssm:MaintenanceWindowExecutionTaskIdentity:TaskExecutionId" min:"36" type:"string"`

	// The type of task that ran.
	TaskType MaintenanceWindowTaskType `json:"ssm:MaintenanceWindowExecutionTaskIdentity:TaskType" type:"string" enum:"true"`

	// The ID of the maintenance window execution that ran the task.
	WindowExecutionId *string `json:"ssm:MaintenanceWindowExecutionTaskIdentity:WindowExecutionId" min:"36" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowExecutionTaskIdentity) String() string {
	return awsutil.Prettify(s)
}

// Describes the information about a task invocation for a particular target
// as part of a task execution performed as part of a maintenance window execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowExecutionTaskInvocationIdentity
type MaintenanceWindowExecutionTaskInvocationIdentity struct {
	_ struct{} `type:"structure"`

	// The time the invocation finished.
	EndTime *time.Time `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:EndTime" type:"timestamp" timestampFormat:"unix"`

	// The ID of the action performed in the service that actually handled the task
	// invocation. If the task type is RUN_COMMAND, this value is the command ID.
	ExecutionId *string `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:ExecutionId" type:"string"`

	// The ID of the task invocation.
	InvocationId *string `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:InvocationId" min:"36" type:"string"`

	// User-provided value that was specified when the target was registered with
	// the maintenance window. This was also included in any CloudWatch events raised
	// during the task invocation.
	OwnerInformation *string `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:OwnerInformation" min:"1" type:"string"`

	// The parameters that were provided for the invocation when it was run.
	Parameters *string `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:Parameters" type:"string"`

	// The time the invocation started.
	StartTime *time.Time `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:StartTime" type:"timestamp" timestampFormat:"unix"`

	// The status of the task invocation.
	Status MaintenanceWindowExecutionStatus `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:Status" type:"string" enum:"true"`

	// The details explaining the status of the task invocation. Only available
	// for certain Status values.
	StatusDetails *string `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:StatusDetails" type:"string"`

	// The ID of the specific task execution in the maintenance window execution.
	TaskExecutionId *string `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:TaskExecutionId" min:"36" type:"string"`

	// The task type.
	TaskType MaintenanceWindowTaskType `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:TaskType" type:"string" enum:"true"`

	// The ID of the maintenance window execution that ran the task.
	WindowExecutionId *string `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:WindowExecutionId" min:"36" type:"string"`

	// The ID of the target definition in this maintenance window the invocation
	// was performed for.
	WindowTargetId *string `json:"ssm:MaintenanceWindowExecutionTaskInvocationIdentity:WindowTargetId" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowExecutionTaskInvocationIdentity) String() string {
	return awsutil.Prettify(s)
}

// Filter used in the request. Supported filter keys are Name and Enabled.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowFilter
type MaintenanceWindowFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	Key *string `json:"ssm:MaintenanceWindowFilter:Key" min:"1" type:"string"`

	// The filter values.
	Values []string `json:"ssm:MaintenanceWindowFilter:Values" type:"list"`
}

// String returns the string representation
func (s MaintenanceWindowFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MaintenanceWindowFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "MaintenanceWindowFilter"}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information about the maintenance window.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowIdentity
type MaintenanceWindowIdentity struct {
	_ struct{} `type:"structure"`

	// The number of hours before the end of the maintenance window that Systems
	// Manager stops scheduling new tasks for execution.
	Cutoff *int64 `json:"ssm:MaintenanceWindowIdentity:Cutoff" type:"integer"`

	// A description of the maintenance window.
	Description *string `json:"ssm:MaintenanceWindowIdentity:Description" min:"1" type:"string"`

	// The duration of the maintenance window in hours.
	Duration *int64 `json:"ssm:MaintenanceWindowIdentity:Duration" min:"1" type:"integer"`

	// Indicates whether the maintenance window is enabled.
	Enabled *bool `json:"ssm:MaintenanceWindowIdentity:Enabled" type:"boolean"`

	// The date and time, in ISO-8601 Extended format, for when the maintenance
	// window is scheduled to become inactive.
	EndDate *string `json:"ssm:MaintenanceWindowIdentity:EndDate" type:"string"`

	// The name of the maintenance window.
	Name *string `json:"ssm:MaintenanceWindowIdentity:Name" min:"3" type:"string"`

	// The next time the maintenance window will actually run, taking into account
	// any specified times for the maintenance window to become active or inactive.
	NextExecutionTime *string `json:"ssm:MaintenanceWindowIdentity:NextExecutionTime" type:"string"`

	// The schedule of the maintenance window in the form of a cron or rate expression.
	Schedule *string `json:"ssm:MaintenanceWindowIdentity:Schedule" min:"1" type:"string"`

	// The time zone that the scheduled maintenance window executions are based
	// on, in Internet Assigned Numbers Authority (IANA) format.
	ScheduleTimezone *string `json:"ssm:MaintenanceWindowIdentity:ScheduleTimezone" type:"string"`

	// The date and time, in ISO-8601 Extended format, for when the maintenance
	// window is scheduled to become active.
	StartDate *string `json:"ssm:MaintenanceWindowIdentity:StartDate" type:"string"`

	// The ID of the maintenance window.
	WindowId *string `json:"ssm:MaintenanceWindowIdentity:WindowId" min:"20" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowIdentity) String() string {
	return awsutil.Prettify(s)
}

// The maintenance window to which the specified target belongs.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowIdentityForTarget
type MaintenanceWindowIdentityForTarget struct {
	_ struct{} `type:"structure"`

	// The name of the maintenance window.
	Name *string `json:"ssm:MaintenanceWindowIdentityForTarget:Name" min:"3" type:"string"`

	// The ID of the maintenance window.
	WindowId *string `json:"ssm:MaintenanceWindowIdentityForTarget:WindowId" min:"20" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowIdentityForTarget) String() string {
	return awsutil.Prettify(s)
}

// The parameters for a LAMBDA task type.
//
// For information about specifying and updating task parameters, see RegisterTaskWithMaintenanceWindow
// and UpdateMaintenanceWindowTask.
//
// LoggingInfo has been deprecated. To specify an S3 bucket to contain logs,
// instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters
// structure. For information about how Systems Manager handles these options
// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
//
// TaskParameters has been deprecated. To specify parameters to pass to a task
// when it runs, instead use the Parameters option in the TaskInvocationParameters
// structure. For information about how Systems Manager handles these options
// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
//
// For Lambda tasks, Systems Manager ignores any values specified for TaskParameters
// and LoggingInfo.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowLambdaParameters
type MaintenanceWindowLambdaParameters struct {
	_ struct{} `type:"structure"`

	// Pass client-specific information to the Lambda function that you are invoking.
	// You can then process the client information in your Lambda function as you
	// choose through the context variable.
	ClientContext *string `json:"ssm:MaintenanceWindowLambdaParameters:ClientContext" min:"1" type:"string"`

	// JSON to provide to your Lambda function as input.
	//
	// Payload is automatically base64 encoded/decoded by the SDK.
	Payload []byte `json:"ssm:MaintenanceWindowLambdaParameters:Payload" type:"blob"`

	// (Optional) Specify a Lambda function version or alias name. If you specify
	// a function version, the action uses the qualified function ARN to invoke
	// a specific Lambda function. If you specify an alias name, the action uses
	// the alias ARN to invoke the Lambda function version to which the alias points.
	Qualifier *string `json:"ssm:MaintenanceWindowLambdaParameters:Qualifier" min:"1" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowLambdaParameters) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MaintenanceWindowLambdaParameters) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "MaintenanceWindowLambdaParameters"}
	if s.ClientContext != nil && len(*s.ClientContext) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("ClientContext", 1))
	}
	if s.Qualifier != nil && len(*s.Qualifier) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Qualifier", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The parameters for a RUN_COMMAND task type.
//
// For information about specifying and updating task parameters, see RegisterTaskWithMaintenanceWindow
// and UpdateMaintenanceWindowTask.
//
// LoggingInfo has been deprecated. To specify an S3 bucket to contain logs,
// instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters
// structure. For information about how Systems Manager handles these options
// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
//
// TaskParameters has been deprecated. To specify parameters to pass to a task
// when it runs, instead use the Parameters option in the TaskInvocationParameters
// structure. For information about how Systems Manager handles these options
// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
//
// For Run Command tasks, Systems Manager uses specified values for TaskParameters
// and LoggingInfo only if no values are specified for TaskInvocationParameters.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowRunCommandParameters
type MaintenanceWindowRunCommandParameters struct {
	_ struct{} `type:"structure"`

	// Information about the commands to run.
	Comment *string `json:"ssm:MaintenanceWindowRunCommandParameters:Comment" type:"string"`

	// The SHA-256 or SHA-1 hash created by the system when the document was created.
	// SHA-1 hashes have been deprecated.
	DocumentHash *string `json:"ssm:MaintenanceWindowRunCommandParameters:DocumentHash" type:"string"`

	// SHA-256 or SHA-1. SHA-1 hashes have been deprecated.
	DocumentHashType DocumentHashType `json:"ssm:MaintenanceWindowRunCommandParameters:DocumentHashType" type:"string" enum:"true"`

	// Configurations for sending notifications about command status changes on
	// a per-instance basis.
	NotificationConfig *NotificationConfig `json:"ssm:MaintenanceWindowRunCommandParameters:NotificationConfig" type:"structure"`

	// The name of the Amazon S3 bucket.
	OutputS3BucketName *string `json:"ssm:MaintenanceWindowRunCommandParameters:OutputS3BucketName" min:"3" type:"string"`

	// The Amazon S3 bucket subfolder.
	OutputS3KeyPrefix *string `json:"ssm:MaintenanceWindowRunCommandParameters:OutputS3KeyPrefix" type:"string"`

	// The parameters for the RUN_COMMAND task execution.
	Parameters map[string][]string `json:"ssm:MaintenanceWindowRunCommandParameters:Parameters" type:"map"`

	// The ARN of the IAM service role to use to publish Amazon Simple Notification
	// Service (Amazon SNS) notifications for maintenance window Run Command tasks.
	ServiceRoleArn *string `json:"ssm:MaintenanceWindowRunCommandParameters:ServiceRoleArn" type:"string"`

	// If this time is reached and the command has not already started running,
	// it doesn't run.
	TimeoutSeconds *int64 `json:"ssm:MaintenanceWindowRunCommandParameters:TimeoutSeconds" min:"30" type:"integer"`
}

// String returns the string representation
func (s MaintenanceWindowRunCommandParameters) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MaintenanceWindowRunCommandParameters) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "MaintenanceWindowRunCommandParameters"}
	if s.OutputS3BucketName != nil && len(*s.OutputS3BucketName) < 3 {
		invalidParams.Add(aws.NewErrParamMinLen("OutputS3BucketName", 3))
	}
	if s.TimeoutSeconds != nil && *s.TimeoutSeconds < 30 {
		invalidParams.Add(aws.NewErrParamMinValue("TimeoutSeconds", 30))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The parameters for a STEP_FUNCTIONS task.
//
// For information about specifying and updating task parameters, see RegisterTaskWithMaintenanceWindow
// and UpdateMaintenanceWindowTask.
//
// LoggingInfo has been deprecated. To specify an S3 bucket to contain logs,
// instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters
// structure. For information about how Systems Manager handles these options
// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
//
// TaskParameters has been deprecated. To specify parameters to pass to a task
// when it runs, instead use the Parameters option in the TaskInvocationParameters
// structure. For information about how Systems Manager handles these options
// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
//
// For Step Functions tasks, Systems Manager ignores any values specified for
// TaskParameters and LoggingInfo.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowStepFunctionsParameters
type MaintenanceWindowStepFunctionsParameters struct {
	_ struct{} `type:"structure"`

	// The inputs for the STEP_FUNCTIONS task.
	Input *string `json:"ssm:MaintenanceWindowStepFunctionsParameters:Input" type:"string"`

	// The name of the STEP_FUNCTIONS task.
	Name *string `json:"ssm:MaintenanceWindowStepFunctionsParameters:Name" min:"1" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowStepFunctionsParameters) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MaintenanceWindowStepFunctionsParameters) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "MaintenanceWindowStepFunctionsParameters"}
	if s.Name != nil && len(*s.Name) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Name", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The target registered with the maintenance window.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowTarget
type MaintenanceWindowTarget struct {
	_ struct{} `type:"structure"`

	// A description for the target.
	Description *string `json:"ssm:MaintenanceWindowTarget:Description" min:"1" type:"string"`

	// The name for the maintenance window target.
	Name *string `json:"ssm:MaintenanceWindowTarget:Name" min:"3" type:"string"`

	// A user-provided value that will be included in any CloudWatch events that
	// are raised while running tasks for these targets in this maintenance window.
	OwnerInformation *string `json:"ssm:MaintenanceWindowTarget:OwnerInformation" min:"1" type:"string"`

	// The type of target that is being registered with the maintenance window.
	ResourceType MaintenanceWindowResourceType `json:"ssm:MaintenanceWindowTarget:ResourceType" type:"string" enum:"true"`

	// The targets, either instances or tags.
	//
	// Specify instances using the following format:
	//
	// Key=instanceids,Values=<instanceid1>,<instanceid2>
	//
	// Tags are specified using the following format:
	//
	// Key=<tag name>,Values=<tag value>.
	Targets []Target `json:"ssm:MaintenanceWindowTarget:Targets" type:"list"`

	// The ID of the maintenance window to register the target with.
	WindowId *string `json:"ssm:MaintenanceWindowTarget:WindowId" min:"20" type:"string"`

	// The ID of the target.
	WindowTargetId *string `json:"ssm:MaintenanceWindowTarget:WindowTargetId" min:"36" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowTarget) String() string {
	return awsutil.Prettify(s)
}

// Information about a task defined for a maintenance window.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowTask
type MaintenanceWindowTask struct {
	_ struct{} `type:"structure"`

	// A description of the task.
	Description *string `json:"ssm:MaintenanceWindowTask:Description" min:"1" type:"string"`

	// Information about an Amazon S3 bucket to write task-level logs to.
	//
	// LoggingInfo has been deprecated. To specify an S3 bucket to contain logs,
	// instead use the OutputS3BucketName and OutputS3KeyPrefix options in the TaskInvocationParameters
	// structure. For information about how Systems Manager handles these options
	// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
	LoggingInfo *LoggingInfo `json:"ssm:MaintenanceWindowTask:LoggingInfo" type:"structure"`

	// The maximum number of targets this task can be run for, in parallel.
	MaxConcurrency *string `json:"ssm:MaintenanceWindowTask:MaxConcurrency" min:"1" type:"string"`

	// The maximum number of errors allowed before this task stops being scheduled.
	MaxErrors *string `json:"ssm:MaintenanceWindowTask:MaxErrors" min:"1" type:"string"`

	// The task name.
	Name *string `json:"ssm:MaintenanceWindowTask:Name" min:"3" type:"string"`

	// The priority of the task in the maintenance window. The lower the number,
	// the higher the priority. Tasks that have the same priority are scheduled
	// in parallel.
	Priority *int64 `json:"ssm:MaintenanceWindowTask:Priority" type:"integer"`

	// The ARN of the IAM service role to use to publish Amazon Simple Notification
	// Service (Amazon SNS) notifications for maintenance window Run Command tasks.
	ServiceRoleArn *string `json:"ssm:MaintenanceWindowTask:ServiceRoleArn" type:"string"`

	// The targets (either instances or tags). Instances are specified using Key=instanceids,Values=<instanceid1>,<instanceid2>.
	// Tags are specified using Key=<tag name>,Values=<tag value>.
	Targets []Target `json:"ssm:MaintenanceWindowTask:Targets" type:"list"`

	// The resource that the task uses during execution. For RUN_COMMAND and AUTOMATION
	// task types, TaskArn is the Systems Manager document name or ARN. For LAMBDA
	// tasks, it's the function name or ARN. For STEP_FUNCTIONS tasks, it's the
	// state machine ARN.
	TaskArn *string `json:"ssm:MaintenanceWindowTask:TaskArn" min:"1" type:"string"`

	// The parameters that should be passed to the task when it is run.
	//
	// TaskParameters has been deprecated. To specify parameters to pass to a task
	// when it runs, instead use the Parameters option in the TaskInvocationParameters
	// structure. For information about how Systems Manager handles these options
	// for the supported maintenance window task types, see MaintenanceWindowTaskInvocationParameters.
	TaskParameters map[string]MaintenanceWindowTaskParameterValueExpression `json:"ssm:MaintenanceWindowTask:TaskParameters" type:"map"`

	// The type of task. The type can be one of the following: RUN_COMMAND, AUTOMATION,
	// LAMBDA, or STEP_FUNCTIONS.
	Type MaintenanceWindowTaskType `json:"ssm:MaintenanceWindowTask:Type" type:"string" enum:"true"`

	// The ID of the maintenance window where the task is registered.
	WindowId *string `json:"ssm:MaintenanceWindowTask:WindowId" min:"20" type:"string"`

	// The task ID.
	WindowTaskId *string `json:"ssm:MaintenanceWindowTask:WindowTaskId" min:"36" type:"string"`
}

// String returns the string representation
func (s MaintenanceWindowTask) String() string {
	return awsutil.Prettify(s)
}

// The parameters for task execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowTaskInvocationParameters
type MaintenanceWindowTaskInvocationParameters struct {
	_ struct{} `type:"structure"`

	// The parameters for an AUTOMATION task type.
	Automation *MaintenanceWindowAutomationParameters `json:"ssm:MaintenanceWindowTaskInvocationParameters:Automation" type:"structure"`

	// The parameters for a LAMBDA task type.
	Lambda *MaintenanceWindowLambdaParameters `json:"ssm:MaintenanceWindowTaskInvocationParameters:Lambda" type:"structure"`

	// The parameters for a RUN_COMMAND task type.
	RunCommand *MaintenanceWindowRunCommandParameters `json:"ssm:MaintenanceWindowTaskInvocationParameters:RunCommand" type:"structure"`

	// The parameters for a STEP_FUNCTIONS task type.
	StepFunctions *MaintenanceWindowStepFunctionsParameters `json:"ssm:MaintenanceWindowTaskInvocationParameters:StepFunctions" type:"structure"`
}

// String returns the string representation
func (s MaintenanceWindowTaskInvocationParameters) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MaintenanceWindowTaskInvocationParameters) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "MaintenanceWindowTaskInvocationParameters"}
	if s.Automation != nil {
		if err := s.Automation.Validate(); err != nil {
			invalidParams.AddNested("Automation", err.(aws.ErrInvalidParams))
		}
	}
	if s.Lambda != nil {
		if err := s.Lambda.Validate(); err != nil {
			invalidParams.AddNested("Lambda", err.(aws.ErrInvalidParams))
		}
	}
	if s.RunCommand != nil {
		if err := s.RunCommand.Validate(); err != nil {
			invalidParams.AddNested("RunCommand", err.(aws.ErrInvalidParams))
		}
	}
	if s.StepFunctions != nil {
		if err := s.StepFunctions.Validate(); err != nil {
			invalidParams.AddNested("StepFunctions", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Defines the values for a task parameter.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/MaintenanceWindowTaskParameterValueExpression
type MaintenanceWindowTaskParameterValueExpression struct {
	_ struct{} `type:"structure"`

	// This field contains an array of 0 or more strings, each 1 to 255 characters
	// in length.
	Values []string `json:"ssm:MaintenanceWindowTaskParameterValueExpression:Values" type:"list"`
}

// String returns the string representation
func (s MaintenanceWindowTaskParameterValueExpression) String() string {
	return awsutil.Prettify(s)
}

// A summary of resources that are not compliant. The summary is organized according
// to resource type.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/NonCompliantSummary
type NonCompliantSummary struct {
	_ struct{} `type:"structure"`

	// The total number of compliance items that are not compliant.
	NonCompliantCount *int64 `json:"ssm:NonCompliantSummary:NonCompliantCount" type:"integer"`

	// A summary of the non-compliance severity by compliance type
	SeveritySummary *SeveritySummary `json:"ssm:NonCompliantSummary:SeveritySummary" type:"structure"`
}

// String returns the string representation
func (s NonCompliantSummary) String() string {
	return awsutil.Prettify(s)
}

// Configurations for sending notifications.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/NotificationConfig
type NotificationConfig struct {
	_ struct{} `type:"structure"`

	// An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon
	// SNS) topic. Run Command pushes notifications about command status changes
	// to this topic.
	NotificationArn *string `json:"ssm:NotificationConfig:NotificationArn" type:"string"`

	// The different events for which you can receive notifications. These events
	// include the following: All (events), InProgress, Success, TimedOut, Cancelled,
	// Failed. To learn more about these events, see Configuring Amazon SNS Notifications
	// for AWS Systems Manager (http://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html)
	// in the AWS Systems Manager User Guide.
	NotificationEvents []NotificationEvent `json:"ssm:NotificationConfig:NotificationEvents" type:"list"`

	// Command: Receive notification when the status of a command changes. Invocation:
	// For commands sent to multiple instances, receive notification on a per-instance
	// basis when the status of a command changes.
	NotificationType NotificationType `json:"ssm:NotificationConfig:NotificationType" type:"string" enum:"true"`
}

// String returns the string representation
func (s NotificationConfig) String() string {
	return awsutil.Prettify(s)
}

// One or more aggregators for viewing counts of OpsItems using different dimensions
// such as Source, CreatedTime, or Source and CreatedTime, to name a few.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsAggregator
type OpsAggregator struct {
	_ struct{} `type:"structure"`

	// Either a Range or Count aggregator for limiting an OpsItem summary.
	AggregatorType *string `json:"ssm:OpsAggregator:AggregatorType" min:"1" type:"string"`

	// A nested aggregator for viewing counts of OpsItems.
	Aggregators []OpsAggregator `json:"ssm:OpsAggregator:Aggregators" min:"1" type:"list"`

	// The name of an OpsItem attribute on which to limit the count of OpsItems.
	AttributeName *string `json:"ssm:OpsAggregator:AttributeName" type:"string"`

	// The aggregator filters.
	Filters []OpsFilter `json:"ssm:OpsAggregator:Filters" min:"1" type:"list"`

	// The data type name to use for viewing counts of OpsItems.
	TypeName *string `json:"ssm:OpsAggregator:TypeName" min:"1" type:"string"`

	// The aggregator value.
	Values map[string]string `json:"ssm:OpsAggregator:Values" type:"map"`
}

// String returns the string representation
func (s OpsAggregator) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *OpsAggregator) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "OpsAggregator"}
	if s.AggregatorType != nil && len(*s.AggregatorType) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("AggregatorType", 1))
	}
	if s.Aggregators != nil && len(s.Aggregators) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Aggregators", 1))
	}
	if s.Filters != nil && len(s.Filters) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Filters", 1))
	}
	if s.TypeName != nil && len(*s.TypeName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TypeName", 1))
	}
	if s.Aggregators != nil {
		for i, v := range s.Aggregators {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Aggregators", i), err.(aws.ErrInvalidParams))
			}
		}
	}
	if s.Filters != nil {
		for i, v := range s.Filters {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Filters", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The result of the query.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsEntity
type OpsEntity struct {
	_ struct{} `type:"structure"`

	// The data returned by the query.
	Data map[string]OpsEntityItem `json:"ssm:OpsEntity:Data" type:"map"`

	// The query ID.
	Id *string `json:"ssm:OpsEntity:Id" type:"string"`
}

// String returns the string representation
func (s OpsEntity) String() string {
	return awsutil.Prettify(s)
}

// The OpsItem summaries result item.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsEntityItem
type OpsEntityItem struct {
	_ struct{} `type:"structure"`

	// The detailed data content for an OpsItem summaries result item.
	Content []map[string]string `json:"ssm:OpsEntityItem:Content" type:"list"`
}

// String returns the string representation
func (s OpsEntityItem) String() string {
	return awsutil.Prettify(s)
}

// A filter for viewing OpsItem summaries.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsFilter
type OpsFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key *string `json:"ssm:OpsFilter:Key" min:"1" type:"string" required:"true"`

	// The type of filter.
	Type OpsFilterOperatorType `json:"ssm:OpsFilter:Type" type:"string" enum:"true"`

	// The filter value.
	//
	// Values is a required field
	Values []string `json:"ssm:OpsFilter:Values" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s OpsFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *OpsFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "OpsFilter"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Operations engineers and IT professionals use OpsCenter to view, investigate,
// and remediate operational issues impacting the performance and health of
// their AWS resources. For more information, see AWS Systems Manager OpsCenter
// (http://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html)
// in the AWS Systems Manager User Guide.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsItem
type OpsItem struct {
	_ struct{} `type:"structure"`

	// The ARN of the AWS account that created the OpsItem.
	CreatedBy *string `json:"ssm:OpsItem:CreatedBy" type:"string"`

	// The date and time the OpsItem was created.
	CreatedTime *time.Time `json:"ssm:OpsItem:CreatedTime" type:"timestamp" timestampFormat:"unix"`

	// The OpsItem description.
	Description *string `json:"ssm:OpsItem:Description" min:"1" type:"string"`

	// The ARN of the AWS account that last updated the OpsItem.
	LastModifiedBy *string `json:"ssm:OpsItem:LastModifiedBy" type:"string"`

	// The date and time the OpsItem was last updated.
	LastModifiedTime *time.Time `json:"ssm:OpsItem:LastModifiedTime" type:"timestamp" timestampFormat:"unix"`

	// The Amazon Resource Name (ARN) of an SNS topic where notifications are sent
	// when this OpsItem is edited or changed.
	Notifications []OpsItemNotification `json:"ssm:OpsItem:Notifications" type:"list"`

	// Operational data is custom data that provides useful reference details about
	// the OpsItem. For example, you can specify log files, error strings, license
	// keys, troubleshooting tips, or other relevant data. You enter operational
	// data as key-value pairs. The key has a maximum length of 128 characters.
	// The value has a maximum size of 20 KB.
	//
	// Operational data keys can't begin with the following: amazon, aws, amzn,
	// ssm, /amazon, /aws, /amzn, /ssm.
	//
	// You can choose to make the data searchable by other users in the account
	// or you can restrict search access. Searchable data means that all users with
	// access to the OpsItem Overview page (as provided by the DescribeOpsItems
	// API action) can view and search on the specified data. Operational data that
	// is not searchable is only viewable by users who have access to the OpsItem
	// (as provided by the GetOpsItem API action).
	//
	// Use the /aws/resources key in OperationalData to specify a related resource
	// in the request. Use the /aws/automations key in OperationalData to associate
	// an Automation runbook with the OpsItem. To view AWS CLI example commands
	// that use these keys, see Creating OpsItems Manually (http://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems)
	// in the AWS Systems Manager User Guide.
	OperationalData map[string]OpsItemDataValue `json:"ssm:OpsItem:OperationalData" type:"map"`

	// The ID of the OpsItem.
	OpsItemId *string `json:"ssm:OpsItem:OpsItemId" type:"string"`

	// The importance of this OpsItem in relation to other OpsItems in the system.
	Priority *int64 `json:"ssm:OpsItem:Priority" min:"1" type:"integer"`

	// One or more OpsItems that share something in common with the current OpsItem.
	// For example, related OpsItems can include OpsItems with similar error messages,
	// impacted resources, or statuses for the impacted resource.
	RelatedOpsItems []RelatedOpsItem `json:"ssm:OpsItem:RelatedOpsItems" type:"list"`

	// The origin of the OpsItem, such as Amazon EC2 or AWS Systems Manager. The
	// impacted resource is a subset of source.
	Source *string `json:"ssm:OpsItem:Source" min:"1" type:"string"`

	// The OpsItem status. Status can be Open, In Progress, or Resolved. For more
	// information, see Editing OpsItem Details (http://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-working-with-OpsItems-editing-details.html)
	// in the AWS Systems Manager User Guide.
	Status OpsItemStatus `json:"ssm:OpsItem:Status" type:"string" enum:"true"`

	// A short heading that describes the nature of the OpsItem and the impacted
	// resource.
	Title *string `json:"ssm:OpsItem:Title" min:"1" type:"string"`

	// The version of this OpsItem. Each time the OpsItem is edited the version
	// number increments by one.
	Version *string `json:"ssm:OpsItem:Version" type:"string"`
}

// String returns the string representation
func (s OpsItem) String() string {
	return awsutil.Prettify(s)
}

// An object that defines the value of the key and its type in the OperationalData
// map.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsItemDataValue
type OpsItemDataValue struct {
	_ struct{} `type:"structure"`

	// The type of key-value pair. Valid types include SearchableString and String.
	Type OpsItemDataType `json:"ssm:OpsItemDataValue:Type" type:"string" enum:"true"`

	// The value of the OperationalData key.
	Value *string `json:"ssm:OpsItemDataValue:Value" type:"string"`
}

// String returns the string representation
func (s OpsItemDataValue) String() string {
	return awsutil.Prettify(s)
}

// Describes an OpsItem filter.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsItemFilter
type OpsItemFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key OpsItemFilterKey `json:"ssm:OpsItemFilter:Key" type:"string" required:"true" enum:"true"`

	// The operator used by the filter call.
	//
	// Operator is a required field
	Operator OpsItemFilterOperator `json:"ssm:OpsItemFilter:Operator" type:"string" required:"true" enum:"true"`

	// The filter value.
	//
	// Values is a required field
	Values []string `json:"ssm:OpsItemFilter:Values" type:"list" required:"true"`
}

// String returns the string representation
func (s OpsItemFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *OpsItemFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "OpsItemFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if len(s.Operator) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Operator"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A notification about the OpsItem.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsItemNotification
type OpsItemNotification struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) of an SNS topic where notifications are sent
	// when this OpsItem is edited or changed.
	Arn *string `json:"ssm:OpsItemNotification:Arn" type:"string"`
}

// String returns the string representation
func (s OpsItemNotification) String() string {
	return awsutil.Prettify(s)
}

// A count of OpsItems.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OpsItemSummary
type OpsItemSummary struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem.
	CreatedBy *string `json:"ssm:OpsItemSummary:CreatedBy" type:"string"`

	// The date and time the OpsItem was created.
	CreatedTime *time.Time `json:"ssm:OpsItemSummary:CreatedTime" type:"timestamp" timestampFormat:"unix"`

	// The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem.
	LastModifiedBy *string `json:"ssm:OpsItemSummary:LastModifiedBy" type:"string"`

	// The date and time the OpsItem was last updated.
	LastModifiedTime *time.Time `json:"ssm:OpsItemSummary:LastModifiedTime" type:"timestamp" timestampFormat:"unix"`

	// Operational data is custom data that provides useful reference details about
	// the OpsItem.
	OperationalData map[string]OpsItemDataValue `json:"ssm:OpsItemSummary:OperationalData" type:"map"`

	// The ID of the OpsItem.
	OpsItemId *string `json:"ssm:OpsItemSummary:OpsItemId" type:"string"`

	// The importance of this OpsItem in relation to other OpsItems in the system.
	Priority *int64 `json:"ssm:OpsItemSummary:Priority" min:"1" type:"integer"`

	// The impacted AWS resource.
	Source *string `json:"ssm:OpsItemSummary:Source" min:"1" type:"string"`

	// The OpsItem status. Status can be Open, In Progress, or Resolved.
	Status OpsItemStatus `json:"ssm:OpsItemSummary:Status" type:"string" enum:"true"`

	// A short heading that describes the nature of the OpsItem and the impacted
	// resource.
	Title *string `json:"ssm:OpsItemSummary:Title" min:"1" type:"string"`
}

// String returns the string representation
func (s OpsItemSummary) String() string {
	return awsutil.Prettify(s)
}

// Information about the source where the association execution details are
// stored.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/OutputSource
type OutputSource struct {
	_ struct{} `type:"structure"`

	// The ID of the output source, for example the URL of an Amazon S3 bucket.
	OutputSourceId *string `json:"ssm:OutputSource:OutputSourceId" min:"36" type:"string"`

	// The type of source where the association execution details are stored, for
	// example, Amazon S3.
	OutputSourceType *string `json:"ssm:OutputSource:OutputSourceType" type:"string"`
}

// String returns the string representation
func (s OutputSource) String() string {
	return awsutil.Prettify(s)
}

// An Amazon EC2 Systems Manager parameter in Parameter Store.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/Parameter
type Parameter struct {
	_ struct{} `type:"structure"`

	// The Amazon Resource Name (ARN) of the parameter.
	ARN *string `json:"ssm:Parameter:ARN" type:"string"`

	// Date the parameter was last changed or updated and the parameter version
	// was created.
	LastModifiedDate *time.Time `json:"ssm:Parameter:LastModifiedDate" type:"timestamp" timestampFormat:"unix"`

	// The name of the parameter.
	Name *string `json:"ssm:Parameter:Name" min:"1" type:"string"`

	// Either the version number or the label used to retrieve the parameter value.
	// Specify selectors by using one of the following formats:
	//
	// parameter_name:version
	//
	// parameter_name:label
	Selector *string `json:"ssm:Parameter:Selector" type:"string"`

	// Applies to parameters that reference information in other AWS services. SourceResult
	// is the raw result or response from the source.
	SourceResult *string `json:"ssm:Parameter:SourceResult" type:"string"`

	// The type of parameter. Valid values include the following: String, String
	// list, Secure string.
	Type ParameterType `json:"ssm:Parameter:Type" type:"string" enum:"true"`

	// The parameter value.
	Value *string `json:"ssm:Parameter:Value" type:"string"`

	// The parameter version.
	Version *int64 `json:"ssm:Parameter:Version" type:"long"`
}

// String returns the string representation
func (s Parameter) String() string {
	return awsutil.Prettify(s)
}

// Information about parameter usage.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ParameterHistory
type ParameterHistory struct {
	_ struct{} `type:"structure"`

	// Parameter names can include the following letters and symbols.
	//
	// a-zA-Z0-9_.-
	AllowedPattern *string `json:"ssm:ParameterHistory:AllowedPattern" type:"string"`

	// Information about the parameter.
	Description *string `json:"ssm:ParameterHistory:Description" type:"string"`

	// The ID of the query key used for this parameter.
	KeyId *string `json:"ssm:ParameterHistory:KeyId" min:"1" type:"string"`

	// Labels assigned to the parameter version.
	Labels []string `json:"ssm:ParameterHistory:Labels" min:"1" type:"list"`

	// Date the parameter was last changed or updated.
	LastModifiedDate *time.Time `json:"ssm:ParameterHistory:LastModifiedDate" type:"timestamp" timestampFormat:"unix"`

	// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
	LastModifiedUser *string `json:"ssm:ParameterHistory:LastModifiedUser" type:"string"`

	// The name of the parameter.
	Name *string `json:"ssm:ParameterHistory:Name" min:"1" type:"string"`

	// Information about the policies assigned to a parameter.
	//
	// Working with Parameter Policies (https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html)
	// in the AWS Systems Manager User Guide.
	Policies []ParameterInlinePolicy `json:"ssm:ParameterHistory:Policies" type:"list"`

	// The parameter tier.
	Tier ParameterTier `json:"ssm:ParameterHistory:Tier" type:"string" enum:"true"`

	// The type of parameter used.
	Type ParameterType `json:"ssm:ParameterHistory:Type" type:"string" enum:"true"`

	// The parameter value.
	Value *string `json:"ssm:ParameterHistory:Value" type:"string"`

	// The parameter version.
	Version *int64 `json:"ssm:ParameterHistory:Version" type:"long"`
}

// String returns the string representation
func (s ParameterHistory) String() string {
	return awsutil.Prettify(s)
}

// One or more policies assigned to a parameter.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ParameterInlinePolicy
type ParameterInlinePolicy struct {
	_ struct{} `type:"structure"`

	// The status of the policy. Policies report the following statuses: Pending
	// (the policy has not been enforced or applied yet), Finished (the policy was
	// applied), Failed (the policy was not applied), or InProgress (the policy
	// is being applied now).
	PolicyStatus *string `json:"ssm:ParameterInlinePolicy:PolicyStatus" type:"string"`

	// The JSON text of the policy.
	PolicyText *string `json:"ssm:ParameterInlinePolicy:PolicyText" type:"string"`

	// The type of policy. Parameter Store supports the following policy types:
	// Expiration, ExpirationNotification, and NoChangeNotification.
	PolicyType *string `json:"ssm:ParameterInlinePolicy:PolicyType" type:"string"`
}

// String returns the string representation
func (s ParameterInlinePolicy) String() string {
	return awsutil.Prettify(s)
}

// Metadata includes information like the ARN of the last user and the date/time
// the parameter was last used.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ParameterMetadata
type ParameterMetadata struct {
	_ struct{} `type:"structure"`

	// A parameter name can include only the following letters and symbols.
	//
	// a-zA-Z0-9_.-
	AllowedPattern *string `json:"ssm:ParameterMetadata:AllowedPattern" type:"string"`

	// Description of the parameter actions.
	Description *string `json:"ssm:ParameterMetadata:Description" type:"string"`

	// The ID of the query key used for this parameter.
	KeyId *string `json:"ssm:ParameterMetadata:KeyId" min:"1" type:"string"`

	// Date the parameter was last changed or updated.
	LastModifiedDate *time.Time `json:"ssm:ParameterMetadata:LastModifiedDate" type:"timestamp" timestampFormat:"unix"`

	// Amazon Resource Name (ARN) of the AWS user who last changed the parameter.
	LastModifiedUser *string `json:"ssm:ParameterMetadata:LastModifiedUser" type:"string"`

	// The parameter name.
	Name *string `json:"ssm:ParameterMetadata:Name" min:"1" type:"string"`

	// A list of policies associated with a parameter.
	Policies []ParameterInlinePolicy `json:"ssm:ParameterMetadata:Policies" type:"list"`

	// The parameter tier.
	Tier ParameterTier `json:"ssm:ParameterMetadata:Tier" type:"string" enum:"true"`

	// The type of parameter. Valid parameter types include the following: String,
	// String list, Secure string.
	Type ParameterType `json:"ssm:ParameterMetadata:Type" type:"string" enum:"true"`

	// The parameter version.
	Version *int64 `json:"ssm:ParameterMetadata:Version" type:"long"`
}

// String returns the string representation
func (s ParameterMetadata) String() string {
	return awsutil.Prettify(s)
}

// One or more filters. Use a filter to return a more specific list of results.
//
// The Name and Tier filter keys can't be used with the GetParametersByPath
// API action. Also, the Label filter key can't be used with the DescribeParameters
// API action.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ParameterStringFilter
type ParameterStringFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key *string `json:"ssm:ParameterStringFilter:Key" min:"1" type:"string" required:"true"`

	// Valid options are Equals and BeginsWith. For Path filter, valid options are
	// Recursive and OneLevel.
	Option *string `json:"ssm:ParameterStringFilter:Option" min:"1" type:"string"`

	// The value you want to search for.
	Values []string `json:"ssm:ParameterStringFilter:Values" min:"1" type:"list"`
}

// String returns the string representation
func (s ParameterStringFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ParameterStringFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ParameterStringFilter"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}
	if s.Option != nil && len(*s.Option) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Option", 1))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// This data type is deprecated. Instead, use ParameterStringFilter.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ParametersFilter
type ParametersFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key ParametersFilterKey `json:"ssm:ParametersFilter:Key" type:"string" required:"true" enum:"true"`

	// The filter values.
	//
	// Values is a required field
	Values []string `json:"ssm:ParametersFilter:Values" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s ParametersFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ParametersFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ParametersFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Represents metadata about a patch.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/Patch
type Patch struct {
	_ struct{} `type:"structure"`

	// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
	Classification *string `json:"ssm:Patch:Classification" type:"string"`

	// The URL where more information can be obtained about the patch.
	ContentUrl *string `json:"ssm:Patch:ContentUrl" type:"string"`

	// The description of the patch.
	Description *string `json:"ssm:Patch:Description" type:"string"`

	// The ID of the patch (this is different than the Microsoft Knowledge Base
	// ID).
	Id *string `json:"ssm:Patch:Id" min:"1" type:"string"`

	// The Microsoft Knowledge Base ID of the patch.
	KbNumber *string `json:"ssm:Patch:KbNumber" type:"string"`

	// The language of the patch if it's language-specific.
	Language *string `json:"ssm:Patch:Language" type:"string"`

	// The ID of the MSRC bulletin the patch is related to.
	MsrcNumber *string `json:"ssm:Patch:MsrcNumber" type:"string"`

	// The severity of the patch (for example Critical, Important, Moderate).
	MsrcSeverity *string `json:"ssm:Patch:MsrcSeverity" type:"string"`

	// The specific product the patch is applicable for (for example, WindowsServer2016).
	Product *string `json:"ssm:Patch:Product" type:"string"`

	// The product family the patch is applicable for (for example, Windows).
	ProductFamily *string `json:"ssm:Patch:ProductFamily" type:"string"`

	// The date the patch was released.
	ReleaseDate *time.Time `json:"ssm:Patch:ReleaseDate" type:"timestamp" timestampFormat:"unix"`

	// The title of the patch.
	Title *string `json:"ssm:Patch:Title" type:"string"`

	// The name of the vendor providing the patch.
	Vendor *string `json:"ssm:Patch:Vendor" type:"string"`
}

// String returns the string representation
func (s Patch) String() string {
	return awsutil.Prettify(s)
}

// Defines the basic information about a patch baseline.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchBaselineIdentity
type PatchBaselineIdentity struct {
	_ struct{} `type:"structure"`

	// The description of the patch baseline.
	BaselineDescription *string `json:"ssm:PatchBaselineIdentity:BaselineDescription" min:"1" type:"string"`

	// The ID of the patch baseline.
	BaselineId *string `json:"ssm:PatchBaselineIdentity:BaselineId" min:"20" type:"string"`

	// The name of the patch baseline.
	BaselineName *string `json:"ssm:PatchBaselineIdentity:BaselineName" min:"3" type:"string"`

	// Whether this is the default baseline. Note that Systems Manager supports
	// creating multiple default patch baselines. For example, you can create a
	// default patch baseline for each operating system.
	DefaultBaseline *bool `json:"ssm:PatchBaselineIdentity:DefaultBaseline" type:"boolean"`

	// Defines the operating system the patch baseline applies to. The Default value
	// is WINDOWS.
	OperatingSystem OperatingSystem `json:"ssm:PatchBaselineIdentity:OperatingSystem" type:"string" enum:"true"`
}

// String returns the string representation
func (s PatchBaselineIdentity) String() string {
	return awsutil.Prettify(s)
}

// Information about the state of a patch on a particular instance as it relates
// to the patch baseline used to patch the instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchComplianceData
type PatchComplianceData struct {
	_ struct{} `type:"structure"`

	// The classification of the patch (for example, SecurityUpdates, Updates, CriticalUpdates).
	//
	// Classification is a required field
	Classification *string `json:"ssm:PatchComplianceData:Classification" type:"string" required:"true"`

	// The date/time the patch was installed on the instance. Note that not all
	// operating systems provide this level of information.
	//
	// InstalledTime is a required field
	InstalledTime *time.Time `json:"ssm:PatchComplianceData:InstalledTime" type:"timestamp" timestampFormat:"unix" required:"true"`

	// The operating system-specific ID of the patch.
	//
	// KBId is a required field
	KBId *string `json:"ssm:PatchComplianceData:KBId" type:"string" required:"true"`

	// The severity of the patch (for example, Critical, Important, Moderate).
	//
	// Severity is a required field
	Severity *string `json:"ssm:PatchComplianceData:Severity" type:"string" required:"true"`

	// The state of the patch on the instance, such as INSTALLED or FAILED.
	//
	// For descriptions of each patch state, see About Patch Compliance (http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch)
	// in the AWS Systems Manager User Guide.
	//
	// State is a required field
	State PatchComplianceDataState `json:"ssm:PatchComplianceData:State" type:"string" required:"true" enum:"true"`

	// The title of the patch.
	//
	// Title is a required field
	Title *string `json:"ssm:PatchComplianceData:Title" type:"string" required:"true"`
}

// String returns the string representation
func (s PatchComplianceData) String() string {
	return awsutil.Prettify(s)
}

// Defines which patches should be included in a patch baseline.
//
// A patch filter consists of a key and a set of values. The filter key is a
// patch property. For example, the available filter keys for WINDOWS are PATCH_SET,
// PRODUCT, PRODUCT_FAMILY, CLASSIFICATION, and MSRC_SEVERITY. The filter values
// define a matching criterion for the patch property indicated by the key.
// For example, if the filter key is PRODUCT and the filter values are ["Office
// 2013", "Office 2016"], then the filter accepts all patches where product
// name is either "Office 2013" or "Office 2016". The filter values can be exact
// values for the patch property given as a key, or a wildcard (*), which matches
// all values.
//
// You can view lists of valid values for the patch properties by running the
// DescribePatchProperties command. For information about which patch properties
// can be used with each major operating system, see DescribePatchProperties.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchFilter
type PatchFilter struct {
	_ struct{} `type:"structure"`

	// The key for the filter.
	//
	// Run the DescribePatchProperties command to view lists of valid keys for each
	// operating system type.
	//
	// Key is a required field
	Key PatchFilterKey `json:"ssm:PatchFilter:Key" type:"string" required:"true" enum:"true"`

	// The value for the filter key.
	//
	// Run the DescribePatchProperties command to view lists of valid values for
	// each key based on operating system type.
	//
	// Values is a required field
	Values []string `json:"ssm:PatchFilter:Values" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s PatchFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PatchFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PatchFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A set of patch filters, typically used for approval rules.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchFilterGroup
type PatchFilterGroup struct {
	_ struct{} `type:"structure"`

	// The set of patch filters that make up the group.
	//
	// PatchFilters is a required field
	PatchFilters []PatchFilter `json:"ssm:PatchFilterGroup:PatchFilters" type:"list" required:"true"`
}

// String returns the string representation
func (s PatchFilterGroup) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PatchFilterGroup) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PatchFilterGroup"}

	if s.PatchFilters == nil {
		invalidParams.Add(aws.NewErrParamRequired("PatchFilters"))
	}
	if s.PatchFilters != nil {
		for i, v := range s.PatchFilters {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "PatchFilters", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The mapping between a patch group and the patch baseline the patch group
// is registered with.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchGroupPatchBaselineMapping
type PatchGroupPatchBaselineMapping struct {
	_ struct{} `type:"structure"`

	// The patch baseline the patch group is registered with.
	BaselineIdentity *PatchBaselineIdentity `json:"ssm:PatchGroupPatchBaselineMapping:BaselineIdentity" type:"structure"`

	// The name of the patch group registered with the patch baseline.
	PatchGroup *string `json:"ssm:PatchGroupPatchBaselineMapping:PatchGroup" min:"1" type:"string"`
}

// String returns the string representation
func (s PatchGroupPatchBaselineMapping) String() string {
	return awsutil.Prettify(s)
}

// Defines a filter used in Patch Manager APIs.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchOrchestratorFilter
type PatchOrchestratorFilter struct {
	_ struct{} `type:"structure"`

	// The key for the filter.
	Key *string `json:"ssm:PatchOrchestratorFilter:Key" min:"1" type:"string"`

	// The value for the filter.
	Values []string `json:"ssm:PatchOrchestratorFilter:Values" type:"list"`
}

// String returns the string representation
func (s PatchOrchestratorFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PatchOrchestratorFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PatchOrchestratorFilter"}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Defines an approval rule for a patch baseline.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchRule
type PatchRule struct {
	_ struct{} `type:"structure"`

	// The number of days after the release date of each patch matched by the rule
	// that the patch is marked as approved in the patch baseline. For example,
	// a value of 7 means that patches are approved seven days after they are released.
	//
	// ApproveAfterDays is a required field
	ApproveAfterDays *int64 `json:"ssm:PatchRule:ApproveAfterDays" type:"integer" required:"true"`

	// A compliance severity level for all approved patches in a patch baseline.
	// Valid compliance severity levels include the following: Unspecified, Critical,
	// High, Medium, Low, and Informational.
	ComplianceLevel PatchComplianceLevel `json:"ssm:PatchRule:ComplianceLevel" type:"string" enum:"true"`

	// For instances identified by the approval rule filters, enables a patch baseline
	// to apply non-security updates available in the specified repository. The
	// default value is 'false'. Applies to Linux instances only.
	EnableNonSecurity *bool `json:"ssm:PatchRule:EnableNonSecurity" type:"boolean"`

	// The patch filter group that defines the criteria for the rule.
	//
	// PatchFilterGroup is a required field
	PatchFilterGroup *PatchFilterGroup `json:"ssm:PatchRule:PatchFilterGroup" type:"structure" required:"true"`
}

// String returns the string representation
func (s PatchRule) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PatchRule) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PatchRule"}

	if s.ApproveAfterDays == nil {
		invalidParams.Add(aws.NewErrParamRequired("ApproveAfterDays"))
	}

	if s.PatchFilterGroup == nil {
		invalidParams.Add(aws.NewErrParamRequired("PatchFilterGroup"))
	}
	if s.PatchFilterGroup != nil {
		if err := s.PatchFilterGroup.Validate(); err != nil {
			invalidParams.AddNested("PatchFilterGroup", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A set of rules defining the approval rules for a patch baseline.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchRuleGroup
type PatchRuleGroup struct {
	_ struct{} `type:"structure"`

	// The rules that make up the rule group.
	//
	// PatchRules is a required field
	PatchRules []PatchRule `json:"ssm:PatchRuleGroup:PatchRules" type:"list" required:"true"`
}

// String returns the string representation
func (s PatchRuleGroup) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PatchRuleGroup) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PatchRuleGroup"}

	if s.PatchRules == nil {
		invalidParams.Add(aws.NewErrParamRequired("PatchRules"))
	}
	if s.PatchRules != nil {
		for i, v := range s.PatchRules {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "PatchRules", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information about the patches to use to update the instances, including target
// operating systems and source repository. Applies to Linux instances only.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchSource
type PatchSource struct {
	_ struct{} `type:"structure"`

	// The value of the yum repo configuration. For example:
	//
	// [main]
	//
	// cachedir=/var/cache/yum/$basesearch$releasever
	//
	// keepcache=0
	//
	// debuglevel=2
	//
	// Configuration is a required field
	Configuration *string `json:"ssm:PatchSource:Configuration" min:"1" type:"string" required:"true"`

	// The name specified to identify the patch source.
	//
	// Name is a required field
	Name *string `json:"ssm:PatchSource:Name" type:"string" required:"true"`

	// The specific operating system versions a patch repository applies to, such
	// as "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7".
	// For lists of supported product values, see PatchFilter.
	//
	// Products is a required field
	Products []string `json:"ssm:PatchSource:Products" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s PatchSource) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PatchSource) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PatchSource"}

	if s.Configuration == nil {
		invalidParams.Add(aws.NewErrParamRequired("Configuration"))
	}
	if s.Configuration != nil && len(*s.Configuration) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Configuration", 1))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.Products == nil {
		invalidParams.Add(aws.NewErrParamRequired("Products"))
	}
	if s.Products != nil && len(s.Products) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Products", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information about the approval status of a patch.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/PatchStatus
type PatchStatus struct {
	_ struct{} `type:"structure"`

	// The date the patch was approved (or will be approved if the status is PENDING_APPROVAL).
	ApprovalDate *time.Time `json:"ssm:PatchStatus:ApprovalDate" type:"timestamp" timestampFormat:"unix"`

	// The compliance severity level for a patch.
	ComplianceLevel PatchComplianceLevel `json:"ssm:PatchStatus:ComplianceLevel" type:"string" enum:"true"`

	// The approval status of a patch (APPROVED, PENDING_APPROVAL, EXPLICIT_APPROVED,
	// EXPLICIT_REJECTED).
	DeploymentStatus PatchDeploymentStatus `json:"ssm:PatchStatus:DeploymentStatus" type:"string" enum:"true"`
}

// String returns the string representation
func (s PatchStatus) String() string {
	return awsutil.Prettify(s)
}

// An aggregate of step execution statuses displayed in the AWS Console for
// a multi-Region and multi-account Automation execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ProgressCounters
type ProgressCounters struct {
	_ struct{} `type:"structure"`

	// The total number of steps that the system cancelled in all specified AWS
	// Regions and accounts for the current Automation execution.
	CancelledSteps *int64 `json:"ssm:ProgressCounters:CancelledSteps" type:"integer"`

	// The total number of steps that failed to run in all specified AWS Regions
	// and accounts for the current Automation execution.
	FailedSteps *int64 `json:"ssm:ProgressCounters:FailedSteps" type:"integer"`

	// The total number of steps that successfully completed in all specified AWS
	// Regions and accounts for the current Automation execution.
	SuccessSteps *int64 `json:"ssm:ProgressCounters:SuccessSteps" type:"integer"`

	// The total number of steps that timed out in all specified AWS Regions and
	// accounts for the current Automation execution.
	TimedOutSteps *int64 `json:"ssm:ProgressCounters:TimedOutSteps" type:"integer"`

	// The total number of steps run in all specified AWS Regions and accounts for
	// the current Automation execution.
	TotalSteps *int64 `json:"ssm:ProgressCounters:TotalSteps" type:"integer"`
}

// String returns the string representation
func (s ProgressCounters) String() string {
	return awsutil.Prettify(s)
}

// An OpsItems that shares something in common with the current OpsItem. For
// example, related OpsItems can include OpsItems with similar error messages,
// impacted resources, or statuses for the impacted resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/RelatedOpsItem
type RelatedOpsItem struct {
	_ struct{} `type:"structure"`

	// The ID of an OpsItem related to the current OpsItem.
	//
	// OpsItemId is a required field
	OpsItemId *string `json:"ssm:RelatedOpsItem:OpsItemId" type:"string" required:"true"`
}

// String returns the string representation
func (s RelatedOpsItem) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RelatedOpsItem) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RelatedOpsItem"}

	if s.OpsItemId == nil {
		invalidParams.Add(aws.NewErrParamRequired("OpsItemId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information about targets that resolved during the Automation execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ResolvedTargets
type ResolvedTargets struct {
	_ struct{} `type:"structure"`

	// A list of parameter values sent to targets that resolved during the Automation
	// execution.
	ParameterValues []string `json:"ssm:ResolvedTargets:ParameterValues" type:"list"`

	// A boolean value indicating whether the resolved target list is truncated.
	Truncated *bool `json:"ssm:ResolvedTargets:Truncated" type:"boolean"`
}

// String returns the string representation
func (s ResolvedTargets) String() string {
	return awsutil.Prettify(s)
}

// Compliance summary information for a specific resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ResourceComplianceSummaryItem
type ResourceComplianceSummaryItem struct {
	_ struct{} `type:"structure"`

	// The compliance type.
	ComplianceType *string `json:"ssm:ResourceComplianceSummaryItem:ComplianceType" min:"1" type:"string"`

	// A list of items that are compliant for the resource.
	CompliantSummary *CompliantSummary `json:"ssm:ResourceComplianceSummaryItem:CompliantSummary" type:"structure"`

	// Information about the execution.
	ExecutionSummary *ComplianceExecutionSummary `json:"ssm:ResourceComplianceSummaryItem:ExecutionSummary" type:"structure"`

	// A list of items that aren't compliant for the resource.
	NonCompliantSummary *NonCompliantSummary `json:"ssm:ResourceComplianceSummaryItem:NonCompliantSummary" type:"structure"`

	// The highest severity item found for the resource. The resource is compliant
	// for this item.
	OverallSeverity ComplianceSeverity `json:"ssm:ResourceComplianceSummaryItem:OverallSeverity" type:"string" enum:"true"`

	// The resource ID.
	ResourceId *string `json:"ssm:ResourceComplianceSummaryItem:ResourceId" min:"1" type:"string"`

	// The resource type.
	ResourceType *string `json:"ssm:ResourceComplianceSummaryItem:ResourceType" min:"1" type:"string"`

	// The compliance status for the resource.
	Status ComplianceStatus `json:"ssm:ResourceComplianceSummaryItem:Status" type:"string" enum:"true"`
}

// String returns the string representation
func (s ResourceComplianceSummaryItem) String() string {
	return awsutil.Prettify(s)
}

// Information about a Resource Data Sync configuration, including its current
// status and last successful sync.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ResourceDataSyncItem
type ResourceDataSyncItem struct {
	_ struct{} `type:"structure"`

	// The status reported by the last sync.
	LastStatus LastResourceDataSyncStatus `json:"ssm:ResourceDataSyncItem:LastStatus" type:"string" enum:"true"`

	// The last time the sync operations returned a status of SUCCESSFUL (UTC).
	LastSuccessfulSyncTime *time.Time `json:"ssm:ResourceDataSyncItem:LastSuccessfulSyncTime" type:"timestamp" timestampFormat:"unix"`

	// The status message details reported by the last sync.
	LastSyncStatusMessage *string `json:"ssm:ResourceDataSyncItem:LastSyncStatusMessage" type:"string"`

	// The last time the configuration attempted to sync (UTC).
	LastSyncTime *time.Time `json:"ssm:ResourceDataSyncItem:LastSyncTime" type:"timestamp" timestampFormat:"unix"`

	// Configuration information for the target Amazon S3 bucket.
	S3Destination *ResourceDataSyncS3Destination `json:"ssm:ResourceDataSyncItem:S3Destination" type:"structure"`

	// The date and time the configuration was created (UTC).
	SyncCreatedTime *time.Time `json:"ssm:ResourceDataSyncItem:SyncCreatedTime" type:"timestamp" timestampFormat:"unix"`

	// The name of the Resource Data Sync.
	SyncName *string `json:"ssm:ResourceDataSyncItem:SyncName" min:"1" type:"string"`
}

// String returns the string representation
func (s ResourceDataSyncItem) String() string {
	return awsutil.Prettify(s)
}

// Information about the target Amazon S3 bucket for the Resource Data Sync.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ResourceDataSyncS3Destination
type ResourceDataSyncS3Destination struct {
	_ struct{} `type:"structure"`

	// The ARN of an encryption key for a destination in Amazon S3. Must belong
	// to the same Region as the destination Amazon S3 bucket.
	AWSKMSKeyARN *string `json:"ssm:ResourceDataSyncS3Destination:AWSKMSKeyARN" min:"1" type:"string"`

	// The name of the Amazon S3 bucket where the aggregated data is stored.
	//
	// BucketName is a required field
	BucketName *string `json:"ssm:ResourceDataSyncS3Destination:BucketName" min:"1" type:"string" required:"true"`

	// An Amazon S3 prefix for the bucket.
	Prefix *string `json:"ssm:ResourceDataSyncS3Destination:Prefix" min:"1" type:"string"`

	// The AWS Region with the Amazon S3 bucket targeted by the Resource Data Sync.
	//
	// Region is a required field
	Region *string `json:"ssm:ResourceDataSyncS3Destination:Region" min:"1" type:"string" required:"true"`

	// A supported sync format. The following format is currently supported: JsonSerDe
	//
	// SyncFormat is a required field
	SyncFormat ResourceDataSyncS3Format `json:"ssm:ResourceDataSyncS3Destination:SyncFormat" type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s ResourceDataSyncS3Destination) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResourceDataSyncS3Destination) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ResourceDataSyncS3Destination"}
	if s.AWSKMSKeyARN != nil && len(*s.AWSKMSKeyARN) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("AWSKMSKeyARN", 1))
	}

	if s.BucketName == nil {
		invalidParams.Add(aws.NewErrParamRequired("BucketName"))
	}
	if s.BucketName != nil && len(*s.BucketName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("BucketName", 1))
	}
	if s.Prefix != nil && len(*s.Prefix) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Prefix", 1))
	}

	if s.Region == nil {
		invalidParams.Add(aws.NewErrParamRequired("Region"))
	}
	if s.Region != nil && len(*s.Region) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Region", 1))
	}
	if len(s.SyncFormat) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("SyncFormat"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The inventory item result attribute.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ResultAttribute
type ResultAttribute struct {
	_ struct{} `type:"structure"`

	// Name of the inventory item type. Valid value: AWS:InstanceInformation. Default
	// Value: AWS:InstanceInformation.
	//
	// TypeName is a required field
	TypeName *string `json:"ssm:ResultAttribute:TypeName" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s ResultAttribute) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ResultAttribute) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ResultAttribute"}

	if s.TypeName == nil {
		invalidParams.Add(aws.NewErrParamRequired("TypeName"))
	}
	if s.TypeName != nil && len(*s.TypeName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TypeName", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// An Amazon S3 bucket where you want to store the results of this request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/S3OutputLocation
type S3OutputLocation struct {
	_ struct{} `type:"structure"`

	// The name of the Amazon S3 bucket.
	OutputS3BucketName *string `json:"ssm:S3OutputLocation:OutputS3BucketName" min:"3" type:"string"`

	// The Amazon S3 bucket subfolder.
	OutputS3KeyPrefix *string `json:"ssm:S3OutputLocation:OutputS3KeyPrefix" type:"string"`

	// (Deprecated) You can no longer specify this parameter. The system ignores
	// it. Instead, Systems Manager automatically determines the Amazon S3 bucket
	// region.
	OutputS3Region *string `json:"ssm:S3OutputLocation:OutputS3Region" min:"3" type:"string"`
}

// String returns the string representation
func (s S3OutputLocation) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *S3OutputLocation) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "S3OutputLocation"}
	if s.OutputS3BucketName != nil && len(*s.OutputS3BucketName) < 3 {
		invalidParams.Add(aws.NewErrParamMinLen("OutputS3BucketName", 3))
	}
	if s.OutputS3Region != nil && len(*s.OutputS3Region) < 3 {
		invalidParams.Add(aws.NewErrParamMinLen("OutputS3Region", 3))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A URL for the Amazon S3 bucket where you want to store the results of this
// request.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/S3OutputUrl
type S3OutputUrl struct {
	_ struct{} `type:"structure"`

	// A URL for an Amazon S3 bucket where you want to store the results of this
	// request.
	OutputUrl *string `json:"ssm:S3OutputUrl:OutputUrl" type:"string"`
}

// String returns the string representation
func (s S3OutputUrl) String() string {
	return awsutil.Prettify(s)
}

// Information about a scheduled execution for a maintenance window.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ScheduledWindowExecution
type ScheduledWindowExecution struct {
	_ struct{} `type:"structure"`

	// The time, in ISO-8601 Extended format, that the maintenance window is scheduled
	// to be run.
	ExecutionTime *string `json:"ssm:ScheduledWindowExecution:ExecutionTime" type:"string"`

	// The name of the maintenance window to be run.
	Name *string `json:"ssm:ScheduledWindowExecution:Name" min:"3" type:"string"`

	// The ID of the maintenance window to be run.
	WindowId *string `json:"ssm:ScheduledWindowExecution:WindowId" min:"20" type:"string"`
}

// String returns the string representation
func (s ScheduledWindowExecution) String() string {
	return awsutil.Prettify(s)
}

// The service setting data structure.
//
// ServiceSetting is an account-level setting for an AWS service. This setting
// defines how a user interacts with or uses a service or a feature of a service.
// For example, if an AWS service charges money to the account based on feature
// or service usage, then the AWS service team might create a default setting
// of "false". This means the user can't use this feature unless they change
// the setting to "true" and intentionally opt in for a paid feature.
//
// Services map a SettingId object to a setting value. AWS services teams define
// the default value for a SettingId. You can't create a new SettingId, but
// you can overwrite the default value if you have the ssm:UpdateServiceSetting
// permission for the setting. Use the UpdateServiceSetting API action to change
// the default setting. Or, use the ResetServiceSetting to change the value
// back to the original value defined by the AWS service team.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/ServiceSetting
type ServiceSetting struct {
	_ struct{} `type:"structure"`

	// The ARN of the service setting.
	ARN *string `json:"ssm:ServiceSetting:ARN" type:"string"`

	// The last time the service setting was modified.
	LastModifiedDate *time.Time `json:"ssm:ServiceSetting:LastModifiedDate" type:"timestamp" timestampFormat:"unix"`

	// The ARN of the last modified user. This field is populated only if the setting
	// value was overwritten.
	LastModifiedUser *string `json:"ssm:ServiceSetting:LastModifiedUser" type:"string"`

	// The ID of the service setting.
	SettingId *string `json:"ssm:ServiceSetting:SettingId" min:"1" type:"string"`

	// The value of the service setting.
	SettingValue *string `json:"ssm:ServiceSetting:SettingValue" min:"1" type:"string"`

	// The status of the service setting. The value can be Default, Customized or
	// PendingUpdate.
	//
	//    * Default: The current setting uses a default value provisioned by the
	//    AWS service team.
	//
	//    * Customized: The current setting use a custom value specified by the
	//    customer.
	//
	//    * PendingUpdate: The current setting uses a default or custom value, but
	//    a setting change request is pending approval.
	Status *string `json:"ssm:ServiceSetting:Status" type:"string"`
}

// String returns the string representation
func (s ServiceSetting) String() string {
	return awsutil.Prettify(s)
}

// Information about a Session Manager connection to an instance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/Session
type Session struct {
	_ struct{} `type:"structure"`

	// Reserved for future use.
	Details *string `json:"ssm:Session:Details" min:"1" type:"string"`

	// The name of the Session Manager SSM document used to define the parameters
	// and plugin settings for the session. For example, SSM-SessionManagerRunShell.
	DocumentName *string `json:"ssm:Session:DocumentName" type:"string"`

	// The date and time, in ISO-8601 Extended format, when the session was terminated.
	EndDate *time.Time `json:"ssm:Session:EndDate" type:"timestamp" timestampFormat:"unix"`

	// Reserved for future use.
	OutputUrl *SessionManagerOutputUrl `json:"ssm:Session:OutputUrl" type:"structure"`

	// The ID of the AWS user account that started the session.
	Owner *string `json:"ssm:Session:Owner" min:"1" type:"string"`

	// The ID of the session.
	SessionId *string `json:"ssm:Session:SessionId" min:"1" type:"string"`

	// The date and time, in ISO-8601 Extended format, when the session began.
	StartDate *time.Time `json:"ssm:Session:StartDate" type:"timestamp" timestampFormat:"unix"`

	// The status of the session. For example, "Connected" or "Terminated".
	Status SessionStatus `json:"ssm:Session:Status" type:"string" enum:"true"`

	// The instance that the Session Manager session connected to.
	Target *string `json:"ssm:Session:Target" min:"1" type:"string"`
}

// String returns the string representation
func (s Session) String() string {
	return awsutil.Prettify(s)
}

// Describes a filter for Session Manager information.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/SessionFilter
type SessionFilter struct {
	_ struct{} `type:"structure"`

	// The name of the filter.
	//
	// Key is a required field
	Key SessionFilterKey `json:"ssm:SessionFilter:Key" locationName:"key" type:"string" required:"true" enum:"true"`

	// The filter value. Valid values for each filter key are as follows:
	//
	//    * InvokedAfter: Specify a timestamp to limit your results. For example,
	//    specify 2018-08-29T00:00:00Z to see sessions that started August 29, 2018,
	//    and later.
	//
	//    * InvokedBefore: Specify a timestamp to limit your results. For example,
	//    specify 2018-08-29T00:00:00Z to see sessions that started before August
	//    29, 2018.
	//
	//    * Target: Specify an instance to which session connections have been made.
	//
	//    * Owner: Specify an AWS user account to see a list of sessions started
	//    by that user.
	//
	//    * Status: Specify a valid session status to see a list of all sessions
	//    with that status. Status values you can specify include: Connected Connecting
	//    Disconnected Terminated Terminating Failed
	//
	// Value is a required field
	Value *string `json:"ssm:SessionFilter:Value" locationName:"value" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s SessionFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SessionFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "SessionFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}
	if s.Value != nil && len(*s.Value) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Value", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Reserved for future use.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/SessionManagerOutputUrl
type SessionManagerOutputUrl struct {
	_ struct{} `type:"structure"`

	// Reserved for future use.
	CloudWatchOutputUrl *string `json:"ssm:SessionManagerOutputUrl:CloudWatchOutputUrl" min:"1" type:"string"`

	// Reserved for future use.
	S3OutputUrl *string `json:"ssm:SessionManagerOutputUrl:S3OutputUrl" min:"1" type:"string"`
}

// String returns the string representation
func (s SessionManagerOutputUrl) String() string {
	return awsutil.Prettify(s)
}

// The number of managed instances found for each patch severity level defined
// in the request filter.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/SeveritySummary
type SeveritySummary struct {
	_ struct{} `type:"structure"`

	// The total number of resources or compliance items that have a severity level
	// of critical. Critical severity is determined by the organization that published
	// the compliance items.
	CriticalCount *int64 `json:"ssm:SeveritySummary:CriticalCount" type:"integer"`

	// The total number of resources or compliance items that have a severity level
	// of high. High severity is determined by the organization that published the
	// compliance items.
	HighCount *int64 `json:"ssm:SeveritySummary:HighCount" type:"integer"`

	// The total number of resources or compliance items that have a severity level
	// of informational. Informational severity is determined by the organization
	// that published the compliance items.
	InformationalCount *int64 `json:"ssm:SeveritySummary:InformationalCount" type:"integer"`

	// The total number of resources or compliance items that have a severity level
	// of low. Low severity is determined by the organization that published the
	// compliance items.
	LowCount *int64 `json:"ssm:SeveritySummary:LowCount" type:"integer"`

	// The total number of resources or compliance items that have a severity level
	// of medium. Medium severity is determined by the organization that published
	// the compliance items.
	MediumCount *int64 `json:"ssm:SeveritySummary:MediumCount" type:"integer"`

	// The total number of resources or compliance items that have a severity level
	// of unspecified. Unspecified severity is determined by the organization that
	// published the compliance items.
	UnspecifiedCount *int64 `json:"ssm:SeveritySummary:UnspecifiedCount" type:"integer"`
}

// String returns the string representation
func (s SeveritySummary) String() string {
	return awsutil.Prettify(s)
}

// Detailed information about an the execution state of an Automation step.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/StepExecution
type StepExecution struct {
	_ struct{} `type:"structure"`

	// The action this step performs. The action determines the behavior of the
	// step.
	Action *string `json:"ssm:StepExecution:Action" type:"string"`

	// If a step has finished execution, this contains the time the execution ended.
	// If the step has not yet concluded, this field is not populated.
	ExecutionEndTime *time.Time `json:"ssm:StepExecution:ExecutionEndTime" type:"timestamp" timestampFormat:"unix"`

	// If a step has begun execution, this contains the time the step started. If
	// the step is in Pending status, this field is not populated.
	ExecutionStartTime *time.Time `json:"ssm:StepExecution:ExecutionStartTime" type:"timestamp" timestampFormat:"unix"`

	// Information about the Automation failure.
	FailureDetails *FailureDetails `json:"ssm:StepExecution:FailureDetails" type:"structure"`

	// If a step failed, this message explains why the execution failed.
	FailureMessage *string `json:"ssm:StepExecution:FailureMessage" type:"string"`

	// Fully-resolved values passed into the step before execution.
	Inputs map[string]string `json:"ssm:StepExecution:Inputs" type:"map"`

	// The flag which can be used to help decide whether the failure of current
	// step leads to the Automation failure.
	IsCritical *bool `json:"ssm:StepExecution:IsCritical" type:"boolean"`

	// The flag which can be used to end automation no matter whether the step succeeds
	// or fails.
	IsEnd *bool `json:"ssm:StepExecution:IsEnd" type:"boolean"`

	// The maximum number of tries to run the action of the step. The default value
	// is 1.
	MaxAttempts *int64 `json:"ssm:StepExecution:MaxAttempts" type:"integer"`

	// The next step after the step succeeds.
	NextStep *string `json:"ssm:StepExecution:NextStep" type:"string"`

	// The action to take if the step fails. The default value is Abort.
	OnFailure *string `json:"ssm:StepExecution:OnFailure" type:"string"`

	// Returned values from the execution of the step.
	Outputs map[string][]string `json:"ssm:StepExecution:Outputs" min:"1" type:"map"`

	// A user-specified list of parameters to override when running a step.
	OverriddenParameters map[string][]string `json:"ssm:StepExecution:OverriddenParameters" min:"1" type:"map"`

	// A message associated with the response code for an execution.
	Response *string `json:"ssm:StepExecution:Response" type:"string"`

	// The response code returned by the execution of the step.
	ResponseCode *string `json:"ssm:StepExecution:ResponseCode" type:"string"`

	// The unique ID of a step execution.
	StepExecutionId *string `json:"ssm:StepExecution:StepExecutionId" type:"string"`

	// The name of this execution step.
	StepName *string `json:"ssm:StepExecution:StepName" type:"string"`

	// The execution status for this step. Valid values include: Pending, InProgress,
	// Success, Cancelled, Failed, and TimedOut.
	StepStatus AutomationExecutionStatus `json:"ssm:StepExecution:StepStatus" type:"string" enum:"true"`

	// The combination of AWS Regions and accounts targeted by the current Automation
	// execution.
	TargetLocation *TargetLocation `json:"ssm:StepExecution:TargetLocation" type:"structure"`

	// The targets for the step execution.
	Targets []Target `json:"ssm:StepExecution:Targets" type:"list"`

	// The timeout seconds of the step.
	TimeoutSeconds *int64 `json:"ssm:StepExecution:TimeoutSeconds" type:"long"`

	// Strategies used when step fails, we support Continue and Abort. Abort will
	// fail the automation when the step fails. Continue will ignore the failure
	// of current step and allow automation to run the next step. With conditional
	// branching, we add step:stepName to support the automation to go to another
	// specific step.
	ValidNextSteps []string `json:"ssm:StepExecution:ValidNextSteps" type:"list"`
}

// String returns the string representation
func (s StepExecution) String() string {
	return awsutil.Prettify(s)
}

// A filter to limit the amount of step execution information returned by the
// call.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/StepExecutionFilter
type StepExecutionFilter struct {
	_ struct{} `type:"structure"`

	// One or more keys to limit the results. Valid filter keys include the following:
	// StepName, Action, StepExecutionId, StepExecutionStatus, StartTimeBefore,
	// StartTimeAfter.
	//
	// Key is a required field
	Key StepExecutionFilterKey `json:"ssm:StepExecutionFilter:Key" type:"string" required:"true" enum:"true"`

	// The values of the filter key.
	//
	// Values is a required field
	Values []string `json:"ssm:StepExecutionFilter:Values" min:"1" type:"list" required:"true"`
}

// String returns the string representation
func (s StepExecutionFilter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *StepExecutionFilter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "StepExecutionFilter"}
	if len(s.Key) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}
	if s.Values != nil && len(s.Values) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Values", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Metadata that you assign to your AWS resources. Tags enable you to categorize
// your resources in different ways, for example, by purpose, owner, or environment.
// In Systems Manager, you can apply tags to documents, managed instances, maintenance
// windows, Parameter Store parameters, and patch baselines.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/Tag
type Tag struct {
	_ struct{} `type:"structure"`

	// The name of the tag.
	//
	// Key is a required field
	Key *string `json:"ssm:Tag:Key" min:"1" type:"string" required:"true"`

	// The value of the tag.
	//
	// Value is a required field
	Value *string `json:"ssm:Tag:Value" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s Tag) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Tag) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Tag"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}
	if s.Value != nil && len(*s.Value) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Value", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// An array of search criteria that targets instances using a Key,Value combination
// that you specify.
//
// Supported formats include the following.
//
//    * Key=InstanceIds,Values=instance-id-1,instance-id-2,instance-id-3
//
//    * Key=tag:my-tag-key,Values=my-tag-value-1,my-tag-value-2
//
//    * Key=tag-key,Values=my-tag-key-1,my-tag-key-2
//
//    * (Maintenance window targets only) Key=resource-groups:Name,Values=resource-group-name
//
//    * (Maintenance window targets only) Key=resource-groups:ResourceTypeFilters,Values=resource-type-1,resource-type-2
//
// For example:
//
//    * Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE
//
//    * Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3
//
//    * Key=tag-key,Values=Name,Instance-Type,CostCenter
//
//    * (Maintenance window targets only) Key=resource-groups:Name,Values=ProductionResourceGroup
//
//    * (Maintenance window targets only) Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::INSTANCE,AWS::EC2::VPC
//
// For information about how to send commands that target instances using Key,Value
// parameters, see Using Targets and Rate Controls to Send Commands to a Fleet
// (https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting)
// in the AWS Systems Manager User Guide.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/Target
type Target struct {
	_ struct{} `type:"structure"`

	// User-defined criteria for sending commands that target instances that meet
	// the criteria.
	Key *string `json:"ssm:Target:Key" min:"1" type:"string"`

	// User-defined criteria that maps to Key. For example, if you specified tag:ServerRole,
	// you could specify value:WebServer to run a command on instances that include
	// Amazon EC2 tags of ServerRole,WebServer.
	Values []string `json:"ssm:Target:Values" type:"list"`
}

// String returns the string representation
func (s Target) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Target) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Target"}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The combination of AWS Regions and accounts targeted by the current Automation
// execution.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/ssm-2014-11-06/TargetLocation
type TargetLocation struct {
	_ struct{} `type:"structure"`

	// The AWS accounts targeted by the current Automation execution.
	Accounts []string `json:"ssm:TargetLocation:Accounts" min:"1" type:"list"`

	// The Automation execution role used by the currently running Automation.
	ExecutionRoleName *string `json:"ssm:TargetLocation:ExecutionRoleName" min:"1" type:"string"`

	// The AWS Regions targeted by the current Automation execution.
	Regions []string `json:"ssm:TargetLocation:Regions" min:"1" type:"list"`

	// The maximum number of AWS accounts and AWS regions allowed to run the Automation
	// concurrently
	TargetLocationMaxConcurrency *string `json:"ssm:TargetLocation:TargetLocationMaxConcurrency" min:"1" type:"string"`

	// The maximum number of errors allowed before the system stops queueing additional
	// Automation executions for the currently running Automation.
	TargetLocationMaxErrors *string `json:"ssm:TargetLocation:TargetLocationMaxErrors" min:"1" type:"string"`
}

// String returns the string representation
func (s TargetLocation) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *TargetLocation) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "TargetLocation"}
	if s.Accounts != nil && len(s.Accounts) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Accounts", 1))
	}
	if s.ExecutionRoleName != nil && len(*s.ExecutionRoleName) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("ExecutionRoleName", 1))
	}
	if s.Regions != nil && len(s.Regions) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Regions", 1))
	}
	if s.TargetLocationMaxConcurrency != nil && len(*s.TargetLocationMaxConcurrency) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TargetLocationMaxConcurrency", 1))
	}
	if s.TargetLocationMaxErrors != nil && len(*s.TargetLocationMaxErrors) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("TargetLocationMaxErrors", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}
