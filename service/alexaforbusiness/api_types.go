// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package alexaforbusiness

import (
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/internal/awsutil"
)

var _ aws.Config
var _ = awsutil.Prettify

// An address book with attributes.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/AddressBook
type AddressBook struct {
	_ struct{} `type:"structure"`

	// The ARN of the address book.
	AddressBookArn *string `json:"a4b:AddressBook:AddressBookArn" type:"string"`

	// The description of the address book.
	Description *string `json:"a4b:AddressBook:Description" min:"1" type:"string"`

	// The name of the address book.
	Name *string `json:"a4b:AddressBook:Name" min:"1" type:"string"`
}

// String returns the string representation
func (s AddressBook) String() string {
	return awsutil.Prettify(s)
}

// Information related to an address book.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/AddressBookData
type AddressBookData struct {
	_ struct{} `type:"structure"`

	// The ARN of the address book.
	AddressBookArn *string `json:"a4b:AddressBookData:AddressBookArn" type:"string"`

	// The description of the address book.
	Description *string `json:"a4b:AddressBookData:Description" min:"1" type:"string"`

	// The name of the address book.
	Name *string `json:"a4b:AddressBookData:Name" min:"1" type:"string"`
}

// String returns the string representation
func (s AddressBookData) String() string {
	return awsutil.Prettify(s)
}

// The audio message. There is a 1 MB limit on the audio file input and the
// only supported format is MP3. To convert your MP3 audio files to an Alexa-friendly,
//
// required codec version (MPEG version 2) and bit rate (48 kbps), you might
// use converter software. One option for this is a command-line tool, FFmpeg.
// For more information, see FFmpeg (https://www.ffmpeg.org/). The following
// command converts the provided <input-file> to an MP3 file that is played
// in the announcement:
//
// ffmpeg -i <input-file> -ac 2 -codec:a libmp3lame -b:a 48k -ar 16000 <output-file.mp3>
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Audio
type Audio struct {
	_ struct{} `type:"structure"`

	// The locale of the audio message. Currently, en-US is supported.
	//
	// Locale is a required field
	Locale Locale `json:"a4b:Audio:Locale" type:"string" required:"true" enum:"true"`

	// The location of the audio file. Currently, S3 URLs are supported. Only S3
	// locations comprised of safe characters are valid. For more information, see
	// Safe Characters (https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#Safe%20Characters).
	//
	// Location is a required field
	Location *string `json:"a4b:Audio:Location" type:"string" required:"true"`
}

// String returns the string representation
func (s Audio) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Audio) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Audio"}
	if len(s.Locale) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Locale"))
	}

	if s.Location == nil {
		invalidParams.Add(aws.NewErrParamRequired("Location"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Usage report with specified parameters.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/BusinessReport
type BusinessReport struct {
	_ struct{} `type:"structure"`

	// The time of report delivery.
	DeliveryTime *time.Time `json:"a4b:BusinessReport:DeliveryTime" type:"timestamp" timestampFormat:"unix"`

	// The download link where a user can download the report.
	DownloadUrl *string `json:"a4b:BusinessReport:DownloadUrl" type:"string"`

	// The failure code.
	FailureCode BusinessReportFailureCode `json:"a4b:BusinessReport:FailureCode" type:"string" enum:"true"`

	// The S3 location of the output reports.
	S3Location *BusinessReportS3Location `json:"a4b:BusinessReport:S3Location" type:"structure"`

	// The status of the report generation execution (RUNNING, SUCCEEDED, or FAILED).
	Status BusinessReportStatus `json:"a4b:BusinessReport:Status" type:"string" enum:"true"`
}

// String returns the string representation
func (s BusinessReport) String() string {
	return awsutil.Prettify(s)
}

// The content range of the report.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/BusinessReportContentRange
type BusinessReportContentRange struct {
	_ struct{} `type:"structure"`

	// The interval of the content range.
	Interval BusinessReportInterval `json:"a4b:BusinessReportContentRange:Interval" type:"string" enum:"true"`
}

// String returns the string representation
func (s BusinessReportContentRange) String() string {
	return awsutil.Prettify(s)
}

// The recurrence of the reports.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/BusinessReportRecurrence
type BusinessReportRecurrence struct {
	_ struct{} `type:"structure"`

	// The start date.
	StartDate *string `json:"a4b:BusinessReportRecurrence:StartDate" type:"string"`
}

// String returns the string representation
func (s BusinessReportRecurrence) String() string {
	return awsutil.Prettify(s)
}

// The S3 location of the output reports.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/BusinessReportS3Location
type BusinessReportS3Location struct {
	_ struct{} `type:"structure"`

	// The S3 bucket name of the output reports.
	BucketName *string `json:"a4b:BusinessReportS3Location:BucketName" type:"string"`

	// The path of the business report.
	Path *string `json:"a4b:BusinessReportS3Location:Path" type:"string"`
}

// String returns the string representation
func (s BusinessReportS3Location) String() string {
	return awsutil.Prettify(s)
}

// The schedule of the usage report.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/BusinessReportSchedule
type BusinessReportSchedule struct {
	_ struct{} `type:"structure"`

	// The content range of the reports.
	ContentRange *BusinessReportContentRange `json:"a4b:BusinessReportSchedule:ContentRange" type:"structure"`

	// The format of the generated report (individual CSV files or zipped files
	// of individual files).
	Format BusinessReportFormat `json:"a4b:BusinessReportSchedule:Format" type:"string" enum:"true"`

	// The details of the last business report delivery for a specified time interval.
	LastBusinessReport *BusinessReport `json:"a4b:BusinessReportSchedule:LastBusinessReport" type:"structure"`

	// The recurrence of the reports.
	Recurrence *BusinessReportRecurrence `json:"a4b:BusinessReportSchedule:Recurrence" type:"structure"`

	// The S3 bucket name of the output reports.
	S3BucketName *string `json:"a4b:BusinessReportSchedule:S3BucketName" type:"string"`

	// The S3 key where the report is delivered.
	S3KeyPrefix *string `json:"a4b:BusinessReportSchedule:S3KeyPrefix" type:"string"`

	// The ARN of the business report schedule.
	ScheduleArn *string `json:"a4b:BusinessReportSchedule:ScheduleArn" type:"string"`

	// The name identifier of the schedule.
	ScheduleName *string `json:"a4b:BusinessReportSchedule:ScheduleName" type:"string"`
}

// String returns the string representation
func (s BusinessReportSchedule) String() string {
	return awsutil.Prettify(s)
}

// The skill store category that is shown. Alexa skills are assigned a specific
// skill category during creation, such as News, Social, and Sports.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Category
type Category struct {
	_ struct{} `type:"structure"`

	// The ID of the skill store category.
	CategoryId *int64 `json:"a4b:Category:CategoryId" min:"1" type:"long"`

	// The name of the skill store category.
	CategoryName *string `json:"a4b:Category:CategoryName" type:"string"`
}

// String returns the string representation
func (s Category) String() string {
	return awsutil.Prettify(s)
}

// The default conference provider that is used if no other scheduled meetings
// are detected.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/ConferencePreference
type ConferencePreference struct {
	_ struct{} `type:"structure"`

	// The ARN of the default conference provider.
	DefaultConferenceProviderArn *string `json:"a4b:ConferencePreference:DefaultConferenceProviderArn" type:"string"`
}

// String returns the string representation
func (s ConferencePreference) String() string {
	return awsutil.Prettify(s)
}

// An entity that provides a conferencing solution. Alexa for Business acts
// as the voice interface and mediator that connects users to their preferred
// conference provider. Examples of conference providers include Amazon Chime,
// Zoom, Cisco, and Polycom.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/ConferenceProvider
type ConferenceProvider struct {
	_ struct{} `type:"structure"`

	// The ARN of the newly created conference provider.
	Arn *string `json:"a4b:ConferenceProvider:Arn" type:"string"`

	// The IP endpoint and protocol for calling.
	IPDialIn *IPDialIn `json:"a4b:ConferenceProvider:IPDialIn" type:"structure"`

	// The meeting settings for the conference provider.
	MeetingSetting *MeetingSetting `json:"a4b:ConferenceProvider:MeetingSetting" type:"structure"`

	// The name of the conference provider.
	Name *string `json:"a4b:ConferenceProvider:Name" min:"1" type:"string"`

	// The information for PSTN conferencing.
	PSTNDialIn *PSTNDialIn `json:"a4b:ConferenceProvider:PSTNDialIn" type:"structure"`

	// The type of conference providers.
	Type ConferenceProviderType `json:"a4b:ConferenceProvider:Type" type:"string" enum:"true"`
}

// String returns the string representation
func (s ConferenceProvider) String() string {
	return awsutil.Prettify(s)
}

// A contact with attributes.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Contact
type Contact struct {
	_ struct{} `type:"structure"`

	// The ARN of the contact.
	ContactArn *string `json:"a4b:Contact:ContactArn" type:"string"`

	// The name of the contact to display on the console.
	DisplayName *string `json:"a4b:Contact:DisplayName" min:"1" type:"string"`

	// The first name of the contact, used to call the contact on the device.
	FirstName *string `json:"a4b:Contact:FirstName" min:"1" type:"string"`

	// The last name of the contact, used to call the contact on the device.
	LastName *string `json:"a4b:Contact:LastName" min:"1" type:"string"`

	// The phone number of the contact. The phone number type defaults to WORK.
	// You can either specify PhoneNumber or PhoneNumbers. We recommend that you
	// use PhoneNumbers, which lets you specify the phone number type and multiple
	// numbers.
	PhoneNumber *string `json:"a4b:Contact:PhoneNumber" type:"string"`

	// The list of phone numbers for the contact.
	PhoneNumbers []PhoneNumber `json:"a4b:Contact:PhoneNumbers" type:"list"`

	// The list of SIP addresses for the contact.
	SipAddresses []SipAddress `json:"a4b:Contact:SipAddresses" type:"list"`
}

// String returns the string representation
func (s Contact) String() string {
	return awsutil.Prettify(s)
}

// Information related to a contact.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/ContactData
type ContactData struct {
	_ struct{} `type:"structure"`

	// The ARN of the contact.
	ContactArn *string `json:"a4b:ContactData:ContactArn" type:"string"`

	// The name of the contact to display on the console.
	DisplayName *string `json:"a4b:ContactData:DisplayName" min:"1" type:"string"`

	// The first name of the contact, used to call the contact on the device.
	FirstName *string `json:"a4b:ContactData:FirstName" min:"1" type:"string"`

	// The last name of the contact, used to call the contact on the device.
	LastName *string `json:"a4b:ContactData:LastName" min:"1" type:"string"`

	// The phone number of the contact. The phone number type defaults to WORK.
	// You can specify PhoneNumber or PhoneNumbers. We recommend that you use PhoneNumbers,
	// which lets you specify the phone number type and multiple numbers.
	PhoneNumber *string `json:"a4b:ContactData:PhoneNumber" type:"string"`

	// The list of phone numbers for the contact.
	PhoneNumbers []PhoneNumber `json:"a4b:ContactData:PhoneNumbers" type:"list"`

	// The list of SIP addresses for the contact.
	SipAddresses []SipAddress `json:"a4b:ContactData:SipAddresses" type:"list"`
}

// String returns the string representation
func (s ContactData) String() string {
	return awsutil.Prettify(s)
}

// The content definition. This can contain only one text, SSML, or audio list
// object.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Content
type Content struct {
	_ struct{} `type:"structure"`

	// The list of audio messages.
	AudioList []Audio `json:"a4b:Content:AudioList" type:"list"`

	// The list of SSML messages.
	SsmlList []Ssml `json:"a4b:Content:SsmlList" type:"list"`

	// The list of text messages.
	TextList []Text `json:"a4b:Content:TextList" type:"list"`
}

// String returns the string representation
func (s Content) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Content) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Content"}
	if s.AudioList != nil {
		for i, v := range s.AudioList {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "AudioList", i), err.(aws.ErrInvalidParams))
			}
		}
	}
	if s.SsmlList != nil {
		for i, v := range s.SsmlList {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "SsmlList", i), err.(aws.ErrInvalidParams))
			}
		}
	}
	if s.TextList != nil {
		for i, v := range s.TextList {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "TextList", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The details about the developer that published the skill.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/DeveloperInfo
type DeveloperInfo struct {
	_ struct{} `type:"structure"`

	// The name of the developer.
	DeveloperName *string `json:"a4b:DeveloperInfo:DeveloperName" type:"string"`

	// The email of the developer.
	Email *string `json:"a4b:DeveloperInfo:Email" min:"1" type:"string"`

	// The URL of the privacy policy.
	PrivacyPolicy *string `json:"a4b:DeveloperInfo:PrivacyPolicy" type:"string"`

	// The website of the developer.
	Url *string `json:"a4b:DeveloperInfo:Url" type:"string"`
}

// String returns the string representation
func (s DeveloperInfo) String() string {
	return awsutil.Prettify(s)
}

// A device with attributes.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Device
type Device struct {
	_ struct{} `type:"structure"`

	// The ARN of a device.
	DeviceArn *string `json:"a4b:Device:DeviceArn" type:"string"`

	// The name of a device.
	DeviceName *string `json:"a4b:Device:DeviceName" min:"2" type:"string"`

	// The serial number of a device.
	DeviceSerialNumber *string `json:"a4b:Device:DeviceSerialNumber" type:"string"`

	// The status of a device. If the status is not READY, check the DeviceStatusInfo
	// value for details.
	DeviceStatus DeviceStatus `json:"a4b:Device:DeviceStatus" type:"string" enum:"true"`

	// Detailed information about a device's status.
	DeviceStatusInfo *DeviceStatusInfo `json:"a4b:Device:DeviceStatusInfo" type:"structure"`

	// The type of a device.
	DeviceType *string `json:"a4b:Device:DeviceType" type:"string"`

	// The MAC address of a device.
	MacAddress *string `json:"a4b:Device:MacAddress" type:"string"`

	// Detailed information about a device's network profile.
	NetworkProfileInfo *DeviceNetworkProfileInfo `json:"a4b:Device:NetworkProfileInfo" type:"structure"`

	// The room ARN of a device.
	RoomArn *string `json:"a4b:Device:RoomArn" type:"string"`

	// The software version of a device.
	SoftwareVersion *string `json:"a4b:Device:SoftwareVersion" type:"string"`
}

// String returns the string representation
func (s Device) String() string {
	return awsutil.Prettify(s)
}

// Device attributes.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/DeviceData
type DeviceData struct {
	_ struct{} `type:"structure"`

	// The ARN of a device.
	DeviceArn *string `json:"a4b:DeviceData:DeviceArn" type:"string"`

	// The name of a device.
	DeviceName *string `json:"a4b:DeviceData:DeviceName" min:"2" type:"string"`

	// The serial number of a device.
	DeviceSerialNumber *string `json:"a4b:DeviceData:DeviceSerialNumber" type:"string"`

	// The status of a device.
	DeviceStatus DeviceStatus `json:"a4b:DeviceData:DeviceStatus" type:"string" enum:"true"`

	// Detailed information about a device's status.
	DeviceStatusInfo *DeviceStatusInfo `json:"a4b:DeviceData:DeviceStatusInfo" type:"structure"`

	// The type of a device.
	DeviceType *string `json:"a4b:DeviceData:DeviceType" type:"string"`

	// The MAC address of a device.
	MacAddress *string `json:"a4b:DeviceData:MacAddress" type:"string"`

	// The ARN of the network profile associated with a device.
	NetworkProfileArn *string `json:"a4b:DeviceData:NetworkProfileArn" type:"string"`

	// The name of the network profile associated with a device.
	NetworkProfileName *string `json:"a4b:DeviceData:NetworkProfileName" min:"1" type:"string"`

	// The room ARN associated with a device.
	RoomArn *string `json:"a4b:DeviceData:RoomArn" type:"string"`

	// The name of the room associated with a device.
	RoomName *string `json:"a4b:DeviceData:RoomName" min:"1" type:"string"`

	// The software version of a device.
	SoftwareVersion *string `json:"a4b:DeviceData:SoftwareVersion" type:"string"`
}

// String returns the string representation
func (s DeviceData) String() string {
	return awsutil.Prettify(s)
}

// The list of device events.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/DeviceEvent
type DeviceEvent struct {
	_ struct{} `type:"structure"`

	// The time (in epoch) when the event occurred.
	Timestamp *time.Time `json:"a4b:DeviceEvent:Timestamp" type:"timestamp" timestampFormat:"unix"`

	// The type of device event.
	Type DeviceEventType `json:"a4b:DeviceEvent:Type" type:"string" enum:"true"`

	// The value of the event.
	Value *string `json:"a4b:DeviceEvent:Value" type:"string"`
}

// String returns the string representation
func (s DeviceEvent) String() string {
	return awsutil.Prettify(s)
}

// Detailed information about a device's network profile.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/DeviceNetworkProfileInfo
type DeviceNetworkProfileInfo struct {
	_ struct{} `type:"structure"`

	// The ARN of the certificate associated with a device.
	CertificateArn *string `json:"a4b:DeviceNetworkProfileInfo:CertificateArn" type:"string"`

	// The time (in epoch) when the certificate expires.
	CertificateExpirationTime *time.Time `json:"a4b:DeviceNetworkProfileInfo:CertificateExpirationTime" type:"timestamp" timestampFormat:"unix"`

	// The ARN of the network profile associated with a device.
	NetworkProfileArn *string `json:"a4b:DeviceNetworkProfileInfo:NetworkProfileArn" type:"string"`
}

// String returns the string representation
func (s DeviceNetworkProfileInfo) String() string {
	return awsutil.Prettify(s)
}

// Details of a device’s status.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/DeviceStatusDetail
type DeviceStatusDetail struct {
	_ struct{} `type:"structure"`

	// The device status detail code.
	Code DeviceStatusDetailCode `json:"a4b:DeviceStatusDetail:Code" type:"string" enum:"true"`

	// The list of available features on the device.
	Feature Feature `json:"a4b:DeviceStatusDetail:Feature" type:"string" enum:"true"`
}

// String returns the string representation
func (s DeviceStatusDetail) String() string {
	return awsutil.Prettify(s)
}

// Detailed information about a device's status.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/DeviceStatusInfo
type DeviceStatusInfo struct {
	_ struct{} `type:"structure"`

	// The latest available information about the connection status of a device.
	ConnectionStatus ConnectionStatus `json:"a4b:DeviceStatusInfo:ConnectionStatus" type:"string" enum:"true"`

	// One or more device status detail descriptions.
	DeviceStatusDetails []DeviceStatusDetail `json:"a4b:DeviceStatusInfo:DeviceStatusDetails" type:"list"`
}

// String returns the string representation
func (s DeviceStatusInfo) String() string {
	return awsutil.Prettify(s)
}

// A filter name and value pair that is used to return a more specific list
// of results. Filters can be used to match a set of resources by various criteria.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Filter
type Filter struct {
	_ struct{} `type:"structure"`

	// The key of a filter.
	//
	// Key is a required field
	Key *string `json:"a4b:Filter:Key" min:"1" type:"string" required:"true"`

	// The values of a filter.
	//
	// Values is a required field
	Values []string `json:"a4b:Filter:Values" type:"list" required:"true"`
}

// String returns the string representation
func (s Filter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Filter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Filter"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if s.Values == nil {
		invalidParams.Add(aws.NewErrParamRequired("Values"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The details of the gateway.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Gateway
type Gateway struct {
	_ struct{} `type:"structure"`

	// The ARN of the gateway.
	Arn *string `json:"a4b:Gateway:Arn" type:"string"`

	// The description of the gateway.
	Description *string `json:"a4b:Gateway:Description" type:"string"`

	// The ARN of the gateway group that the gateway is associated to.
	GatewayGroupArn *string `json:"a4b:Gateway:GatewayGroupArn" type:"string"`

	// The name of the gateway.
	Name *string `json:"a4b:Gateway:Name" min:"1" type:"string"`

	// The software version of the gateway. The gateway automatically updates its
	// software version during normal operation.
	SoftwareVersion *string `json:"a4b:Gateway:SoftwareVersion" min:"1" type:"string"`
}

// String returns the string representation
func (s Gateway) String() string {
	return awsutil.Prettify(s)
}

// The details of the gateway group.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/GatewayGroup
type GatewayGroup struct {
	_ struct{} `type:"structure"`

	// The ARN of the gateway group.
	Arn *string `json:"a4b:GatewayGroup:Arn" type:"string"`

	// The description of the gateway group.
	Description *string `json:"a4b:GatewayGroup:Description" type:"string"`

	// The name of the gateway group.
	Name *string `json:"a4b:GatewayGroup:Name" min:"1" type:"string"`
}

// String returns the string representation
func (s GatewayGroup) String() string {
	return awsutil.Prettify(s)
}

// The summary of a gateway group.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/GatewayGroupSummary
type GatewayGroupSummary struct {
	_ struct{} `type:"structure"`

	// The ARN of the gateway group.
	Arn *string `json:"a4b:GatewayGroupSummary:Arn" type:"string"`

	// The description of the gateway group.
	Description *string `json:"a4b:GatewayGroupSummary:Description" type:"string"`

	// The name of the gateway group.
	Name *string `json:"a4b:GatewayGroupSummary:Name" min:"1" type:"string"`
}

// String returns the string representation
func (s GatewayGroupSummary) String() string {
	return awsutil.Prettify(s)
}

// The summary of a gateway.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/GatewaySummary
type GatewaySummary struct {
	_ struct{} `type:"structure"`

	// The ARN of the gateway.
	Arn *string `json:"a4b:GatewaySummary:Arn" type:"string"`

	// The description of the gateway.
	Description *string `json:"a4b:GatewaySummary:Description" type:"string"`

	// The ARN of the gateway group that the gateway is associated to.
	GatewayGroupArn *string `json:"a4b:GatewaySummary:GatewayGroupArn" type:"string"`

	// The name of the gateway.
	Name *string `json:"a4b:GatewaySummary:Name" min:"1" type:"string"`

	// The software version of the gateway. The gateway automatically updates its
	// software version during normal operation.
	SoftwareVersion *string `json:"a4b:GatewaySummary:SoftwareVersion" min:"1" type:"string"`
}

// String returns the string representation
func (s GatewaySummary) String() string {
	return awsutil.Prettify(s)
}

// The IP endpoint and protocol for calling.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/IPDialIn
type IPDialIn struct {
	_ struct{} `type:"structure"`

	// The protocol, including SIP, SIPS, and H323.
	//
	// CommsProtocol is a required field
	CommsProtocol CommsProtocol `json:"a4b:IPDialIn:CommsProtocol" type:"string" required:"true" enum:"true"`

	// The IP address.
	//
	// Endpoint is a required field
	Endpoint *string `json:"a4b:IPDialIn:Endpoint" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s IPDialIn) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *IPDialIn) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "IPDialIn"}
	if len(s.CommsProtocol) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("CommsProtocol"))
	}

	if s.Endpoint == nil {
		invalidParams.Add(aws.NewErrParamRequired("Endpoint"))
	}
	if s.Endpoint != nil && len(*s.Endpoint) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Endpoint", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The values that indicate whether a pin is always required (YES), never required
// (NO), or OPTIONAL.
//
//    * If YES, Alexa will always ask for a meeting pin.
//
//    * If NO, Alexa will never ask for a meeting pin.
//
//    * If OPTIONAL, Alexa will ask if you have a meeting pin and if the customer
//    responds with yes, it will ask for the meeting pin.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/MeetingSetting
type MeetingSetting struct {
	_ struct{} `type:"structure"`

	// The values that indicate whether the pin is always required.
	//
	// RequirePin is a required field
	RequirePin RequirePin `json:"a4b:MeetingSetting:RequirePin" type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s MeetingSetting) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *MeetingSetting) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "MeetingSetting"}
	if len(s.RequirePin) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("RequirePin"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The network profile associated with a device.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/NetworkProfile
type NetworkProfile struct {
	_ struct{} `type:"structure"`

	// The ARN of the Private Certificate Authority (PCA) created in AWS Certificate
	// Manager (ACM). This is used to issue certificates to the devices.
	CertificateAuthorityArn *string `json:"a4b:NetworkProfile:CertificateAuthorityArn" type:"string"`

	// The current password of the Wi-Fi network.
	CurrentPassword *string `json:"a4b:NetworkProfile:CurrentPassword" min:"5" type:"string"`

	// Detailed information about a device's network profile.
	Description *string `json:"a4b:NetworkProfile:Description" type:"string"`

	// The authentication standard that is used in the EAP framework. Currently,
	// EAP_TLS is supported.
	EapMethod NetworkEapMethod `json:"a4b:NetworkProfile:EapMethod" type:"string" enum:"true"`

	// The ARN of the network profile associated with a device.
	NetworkProfileArn *string `json:"a4b:NetworkProfile:NetworkProfileArn" type:"string"`

	// The name of the network profile associated with a device.
	NetworkProfileName *string `json:"a4b:NetworkProfile:NetworkProfileName" min:"1" type:"string"`

	// The next, or subsequent, password of the Wi-Fi network. This password is
	// asynchronously transmitted to the device and is used when the password of
	// the network changes to NextPassword.
	NextPassword *string `json:"a4b:NetworkProfile:NextPassword" type:"string"`

	// The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK,
	// WPA_PSK, WEP, or OPEN.
	SecurityType NetworkSecurityType `json:"a4b:NetworkProfile:SecurityType" type:"string" enum:"true"`

	// The SSID of the Wi-Fi network.
	Ssid *string `json:"a4b:NetworkProfile:Ssid" min:"1" type:"string"`

	// The root certificates of your authentication server, which is installed on
	// your devices and used to trust your authentication server during EAP negotiation.
	TrustAnchors []string `json:"a4b:NetworkProfile:TrustAnchors" min:"1" type:"list"`
}

// String returns the string representation
func (s NetworkProfile) String() string {
	return awsutil.Prettify(s)
}

// The data associated with a network profile.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/NetworkProfileData
type NetworkProfileData struct {
	_ struct{} `type:"structure"`

	// The ARN of the Private Certificate Authority (PCA) created in AWS Certificate
	// Manager (ACM). This is used to issue certificates to the devices.
	CertificateAuthorityArn *string `json:"a4b:NetworkProfileData:CertificateAuthorityArn" type:"string"`

	// Detailed information about a device's network profile.
	Description *string `json:"a4b:NetworkProfileData:Description" type:"string"`

	// The authentication standard that is used in the EAP framework. Currently,
	// EAP_TLS is supported.
	EapMethod NetworkEapMethod `json:"a4b:NetworkProfileData:EapMethod" type:"string" enum:"true"`

	// The ARN of the network profile associated with a device.
	NetworkProfileArn *string `json:"a4b:NetworkProfileData:NetworkProfileArn" type:"string"`

	// The name of the network profile associated with a device.
	NetworkProfileName *string `json:"a4b:NetworkProfileData:NetworkProfileName" min:"1" type:"string"`

	// The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK,
	// WPA_PSK, WEP, or OPEN.
	SecurityType NetworkSecurityType `json:"a4b:NetworkProfileData:SecurityType" type:"string" enum:"true"`

	// The SSID of the Wi-Fi network.
	Ssid *string `json:"a4b:NetworkProfileData:Ssid" min:"1" type:"string"`
}

// String returns the string representation
func (s NetworkProfileData) String() string {
	return awsutil.Prettify(s)
}

// The information for public switched telephone network (PSTN) conferencing.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/PSTNDialIn
type PSTNDialIn struct {
	_ struct{} `type:"structure"`

	// The zip code.
	//
	// CountryCode is a required field
	CountryCode *string `json:"a4b:PSTNDialIn:CountryCode" type:"string" required:"true"`

	// The delay duration before Alexa enters the conference ID with dual-tone multi-frequency
	// (DTMF). Each number on the dial pad corresponds to a DTMF tone, which is
	// how we send data over the telephone network.
	//
	// OneClickIdDelay is a required field
	OneClickIdDelay *string `json:"a4b:PSTNDialIn:OneClickIdDelay" min:"1" type:"string" required:"true"`

	// The delay duration before Alexa enters the conference pin with dual-tone
	// multi-frequency (DTMF). Each number on the dial pad corresponds to a DTMF
	// tone, which is how we send data over the telephone network.
	//
	// OneClickPinDelay is a required field
	OneClickPinDelay *string `json:"a4b:PSTNDialIn:OneClickPinDelay" min:"1" type:"string" required:"true"`

	// The phone number to call to join the conference.
	//
	// PhoneNumber is a required field
	PhoneNumber *string `json:"a4b:PSTNDialIn:PhoneNumber" type:"string" required:"true"`
}

// String returns the string representation
func (s PSTNDialIn) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PSTNDialIn) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PSTNDialIn"}

	if s.CountryCode == nil {
		invalidParams.Add(aws.NewErrParamRequired("CountryCode"))
	}

	if s.OneClickIdDelay == nil {
		invalidParams.Add(aws.NewErrParamRequired("OneClickIdDelay"))
	}
	if s.OneClickIdDelay != nil && len(*s.OneClickIdDelay) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("OneClickIdDelay", 1))
	}

	if s.OneClickPinDelay == nil {
		invalidParams.Add(aws.NewErrParamRequired("OneClickPinDelay"))
	}
	if s.OneClickPinDelay != nil && len(*s.OneClickPinDelay) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("OneClickPinDelay", 1))
	}

	if s.PhoneNumber == nil {
		invalidParams.Add(aws.NewErrParamRequired("PhoneNumber"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The phone number for the contact containing the raw number and phone number
// type.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/PhoneNumber
type PhoneNumber struct {
	_ struct{} `type:"structure"`

	// The raw value of the phone number.
	//
	// Number is a required field
	Number *string `json:"a4b:PhoneNumber:Number" type:"string" required:"true"`

	// The type of the phone number.
	//
	// Type is a required field
	Type PhoneNumberType `json:"a4b:PhoneNumber:Type" type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s PhoneNumber) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PhoneNumber) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "PhoneNumber"}

	if s.Number == nil {
		invalidParams.Add(aws.NewErrParamRequired("Number"))
	}
	if len(s.Type) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Type"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A room profile with attributes.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Profile
type Profile struct {
	_ struct{} `type:"structure"`

	// The address of a room profile.
	Address *string `json:"a4b:Profile:Address" min:"1" type:"string"`

	// The ARN of the address book.
	AddressBookArn *string `json:"a4b:Profile:AddressBookArn" type:"string"`

	// The distance unit of a room profile.
	DistanceUnit DistanceUnit `json:"a4b:Profile:DistanceUnit" type:"string" enum:"true"`

	// Retrieves if the profile is default or not.
	IsDefault *bool `json:"a4b:Profile:IsDefault" type:"boolean"`

	// The max volume limit of a room profile.
	MaxVolumeLimit *int64 `json:"a4b:Profile:MaxVolumeLimit" type:"integer"`

	// The PSTN setting of a room profile.
	PSTNEnabled *bool `json:"a4b:Profile:PSTNEnabled" type:"boolean"`

	// The ARN of a room profile.
	ProfileArn *string `json:"a4b:Profile:ProfileArn" type:"string"`

	// The name of a room profile.
	ProfileName *string `json:"a4b:Profile:ProfileName" min:"1" type:"string"`

	// The setup mode of a room profile.
	SetupModeDisabled *bool `json:"a4b:Profile:SetupModeDisabled" type:"boolean"`

	// The temperature unit of a room profile.
	TemperatureUnit TemperatureUnit `json:"a4b:Profile:TemperatureUnit" type:"string" enum:"true"`

	// The time zone of a room profile.
	Timezone *string `json:"a4b:Profile:Timezone" min:"1" type:"string"`

	// The wake word of a room profile.
	WakeWord WakeWord `json:"a4b:Profile:WakeWord" type:"string" enum:"true"`
}

// String returns the string representation
func (s Profile) String() string {
	return awsutil.Prettify(s)
}

// The data of a room profile.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/ProfileData
type ProfileData struct {
	_ struct{} `type:"structure"`

	// The address of a room profile.
	Address *string `json:"a4b:ProfileData:Address" min:"1" type:"string"`

	// The distance unit of a room profile.
	DistanceUnit DistanceUnit `json:"a4b:ProfileData:DistanceUnit" type:"string" enum:"true"`

	// Retrieves if the profile data is default or not.
	IsDefault *bool `json:"a4b:ProfileData:IsDefault" type:"boolean"`

	// The ARN of a room profile.
	ProfileArn *string `json:"a4b:ProfileData:ProfileArn" type:"string"`

	// The name of a room profile.
	ProfileName *string `json:"a4b:ProfileData:ProfileName" min:"1" type:"string"`

	// The temperature unit of a room profile.
	TemperatureUnit TemperatureUnit `json:"a4b:ProfileData:TemperatureUnit" type:"string" enum:"true"`

	// The timezone of a room profile.
	Timezone *string `json:"a4b:ProfileData:Timezone" min:"1" type:"string"`

	// The wake word of a room profile.
	WakeWord WakeWord `json:"a4b:ProfileData:WakeWord" type:"string" enum:"true"`
}

// String returns the string representation
func (s ProfileData) String() string {
	return awsutil.Prettify(s)
}

// A room with attributes.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Room
type Room struct {
	_ struct{} `type:"structure"`

	// The description of a room.
	Description *string `json:"a4b:Room:Description" min:"1" type:"string"`

	// The profile ARN of a room.
	ProfileArn *string `json:"a4b:Room:ProfileArn" type:"string"`

	// The provider calendar ARN of a room.
	ProviderCalendarId *string `json:"a4b:Room:ProviderCalendarId" type:"string"`

	// The ARN of a room.
	RoomArn *string `json:"a4b:Room:RoomArn" type:"string"`

	// The name of a room.
	RoomName *string `json:"a4b:Room:RoomName" min:"1" type:"string"`
}

// String returns the string representation
func (s Room) String() string {
	return awsutil.Prettify(s)
}

// The data of a room.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/RoomData
type RoomData struct {
	_ struct{} `type:"structure"`

	// The description of a room.
	Description *string `json:"a4b:RoomData:Description" min:"1" type:"string"`

	// The profile ARN of a room.
	ProfileArn *string `json:"a4b:RoomData:ProfileArn" type:"string"`

	// The profile name of a room.
	ProfileName *string `json:"a4b:RoomData:ProfileName" min:"1" type:"string"`

	// The provider calendar ARN of a room.
	ProviderCalendarId *string `json:"a4b:RoomData:ProviderCalendarId" type:"string"`

	// The ARN of a room.
	RoomArn *string `json:"a4b:RoomData:RoomArn" type:"string"`

	// The name of a room.
	RoomName *string `json:"a4b:RoomData:RoomName" min:"1" type:"string"`
}

// String returns the string representation
func (s RoomData) String() string {
	return awsutil.Prettify(s)
}

// A skill parameter associated with a room.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/RoomSkillParameter
type RoomSkillParameter struct {
	_ struct{} `type:"structure"`

	// The parameter key of a room skill parameter. ParameterKey is an enumerated
	// type that only takes “DEFAULT” or “SCOPE” as valid values.
	//
	// ParameterKey is a required field
	ParameterKey *string `json:"a4b:RoomSkillParameter:ParameterKey" min:"1" type:"string" required:"true"`

	// The parameter value of a room skill parameter.
	//
	// ParameterValue is a required field
	ParameterValue *string `json:"a4b:RoomSkillParameter:ParameterValue" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s RoomSkillParameter) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RoomSkillParameter) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RoomSkillParameter"}

	if s.ParameterKey == nil {
		invalidParams.Add(aws.NewErrParamRequired("ParameterKey"))
	}
	if s.ParameterKey != nil && len(*s.ParameterKey) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("ParameterKey", 1))
	}

	if s.ParameterValue == nil {
		invalidParams.Add(aws.NewErrParamRequired("ParameterValue"))
	}
	if s.ParameterValue != nil && len(*s.ParameterValue) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("ParameterValue", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The SIP address for the contact containing the URI and SIP address type.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/SipAddress
type SipAddress struct {
	_ struct{} `type:"structure"`

	// The type of the SIP address.
	//
	// Type is a required field
	Type SipType `json:"a4b:SipAddress:Type" type:"string" required:"true" enum:"true"`

	// The URI for the SIP address.
	//
	// Uri is a required field
	Uri *string `json:"a4b:SipAddress:Uri" min:"1" type:"string" required:"true"`
}

// String returns the string representation
func (s SipAddress) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SipAddress) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "SipAddress"}
	if len(s.Type) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Type"))
	}

	if s.Uri == nil {
		invalidParams.Add(aws.NewErrParamRequired("Uri"))
	}
	if s.Uri != nil && len(*s.Uri) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Uri", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Granular information about the skill.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/SkillDetails
type SkillDetails struct {
	_ struct{} `type:"structure"`

	// The details about what the skill supports organized as bullet points.
	BulletPoints []string `json:"a4b:SkillDetails:BulletPoints" type:"list"`

	// The details about the developer that published the skill.
	DeveloperInfo *DeveloperInfo `json:"a4b:SkillDetails:DeveloperInfo" type:"structure"`

	// The URL of the end user license agreement.
	EndUserLicenseAgreement *string `json:"a4b:SkillDetails:EndUserLicenseAgreement" type:"string"`

	// The generic keywords associated with the skill that can be used to find a
	// skill.
	GenericKeywords []string `json:"a4b:SkillDetails:GenericKeywords" type:"list"`

	// The phrase used to trigger the skill.
	InvocationPhrase *string `json:"a4b:SkillDetails:InvocationPhrase" type:"string"`

	// The updates added in bullet points.
	NewInThisVersionBulletPoints []string `json:"a4b:SkillDetails:NewInThisVersionBulletPoints" type:"list"`

	// The description of the product.
	ProductDescription *string `json:"a4b:SkillDetails:ProductDescription" type:"string"`

	// The date when the skill was released.
	ReleaseDate *string `json:"a4b:SkillDetails:ReleaseDate" type:"string"`

	// The list of reviews for the skill, including Key and Value pair.
	Reviews map[string]string `json:"a4b:SkillDetails:Reviews" type:"map"`

	// The types of skills.
	SkillTypes []string `json:"a4b:SkillDetails:SkillTypes" type:"list"`
}

// String returns the string representation
func (s SkillDetails) String() string {
	return awsutil.Prettify(s)
}

// A skill group with attributes.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/SkillGroup
type SkillGroup struct {
	_ struct{} `type:"structure"`

	// The description of a skill group.
	Description *string `json:"a4b:SkillGroup:Description" min:"1" type:"string"`

	// The ARN of a skill group.
	SkillGroupArn *string `json:"a4b:SkillGroup:SkillGroupArn" type:"string"`

	// The name of a skill group.
	SkillGroupName *string `json:"a4b:SkillGroup:SkillGroupName" min:"1" type:"string"`
}

// String returns the string representation
func (s SkillGroup) String() string {
	return awsutil.Prettify(s)
}

// The attributes of a skill group.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/SkillGroupData
type SkillGroupData struct {
	_ struct{} `type:"structure"`

	// The description of a skill group.
	Description *string `json:"a4b:SkillGroupData:Description" min:"1" type:"string"`

	// The skill group ARN of a skill group.
	SkillGroupArn *string `json:"a4b:SkillGroupData:SkillGroupArn" type:"string"`

	// The skill group name of a skill group.
	SkillGroupName *string `json:"a4b:SkillGroupData:SkillGroupName" min:"1" type:"string"`
}

// String returns the string representation
func (s SkillGroupData) String() string {
	return awsutil.Prettify(s)
}

// The summary of skills.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/SkillSummary
type SkillSummary struct {
	_ struct{} `type:"structure"`

	// Whether the skill is enabled under the user's account, or if it requires
	// linking to be used.
	EnablementType EnablementType `json:"a4b:SkillSummary:EnablementType" type:"string" enum:"true"`

	// The ARN of the skill summary.
	SkillId *string `json:"a4b:SkillSummary:SkillId" type:"string"`

	// The name of the skill.
	SkillName *string `json:"a4b:SkillSummary:SkillName" min:"1" type:"string"`

	// Whether the skill is publicly available or is a private skill.
	SkillType SkillType `json:"a4b:SkillSummary:SkillType" min:"1" type:"string" enum:"true"`

	// Linking support for a skill.
	SupportsLinking *bool `json:"a4b:SkillSummary:SupportsLinking" type:"boolean"`
}

// String returns the string representation
func (s SkillSummary) String() string {
	return awsutil.Prettify(s)
}

// The detailed information about an Alexa skill.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/SkillsStoreSkill
type SkillsStoreSkill struct {
	_ struct{} `type:"structure"`

	// The URL where the skill icon resides.
	IconUrl *string `json:"a4b:SkillsStoreSkill:IconUrl" type:"string"`

	// Sample utterances that interact with the skill.
	SampleUtterances []string `json:"a4b:SkillsStoreSkill:SampleUtterances" type:"list"`

	// Short description about the skill.
	ShortDescription *string `json:"a4b:SkillsStoreSkill:ShortDescription" type:"string"`

	// Information about the skill.
	SkillDetails *SkillDetails `json:"a4b:SkillsStoreSkill:SkillDetails" type:"structure"`

	// The ARN of the skill.
	SkillId *string `json:"a4b:SkillsStoreSkill:SkillId" type:"string"`

	// The name of the skill.
	SkillName *string `json:"a4b:SkillsStoreSkill:SkillName" min:"1" type:"string"`

	// Linking support for a skill.
	SupportsLinking *bool `json:"a4b:SkillsStoreSkill:SupportsLinking" type:"boolean"`
}

// String returns the string representation
func (s SkillsStoreSkill) String() string {
	return awsutil.Prettify(s)
}

// A smart home appliance that can connect to a central system. Any domestic
// device can be a smart appliance.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/SmartHomeAppliance
type SmartHomeAppliance struct {
	_ struct{} `type:"structure"`

	// The description of the smart home appliance.
	Description *string `json:"a4b:SmartHomeAppliance:Description" type:"string"`

	// The friendly name of the smart home appliance.
	FriendlyName *string `json:"a4b:SmartHomeAppliance:FriendlyName" type:"string"`

	// The name of the manufacturer of the smart home appliance.
	ManufacturerName *string `json:"a4b:SmartHomeAppliance:ManufacturerName" type:"string"`
}

// String returns the string representation
func (s SmartHomeAppliance) String() string {
	return awsutil.Prettify(s)
}

// An object representing a sort criteria.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Sort
type Sort struct {
	_ struct{} `type:"structure"`

	// The sort key of a sort object.
	//
	// Key is a required field
	Key *string `json:"a4b:Sort:Key" min:"1" type:"string" required:"true"`

	// The sort value of a sort object.
	//
	// Value is a required field
	Value SortValue `json:"a4b:Sort:Value" type:"string" required:"true" enum:"true"`
}

// String returns the string representation
func (s Sort) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Sort) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Sort"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}
	if len(s.Value) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The SSML message. For more information, see SSML Reference (https://developer.amazon.com/docs/custom-skills/speech-synthesis-markup-language-ssml-reference.html).
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Ssml
type Ssml struct {
	_ struct{} `type:"structure"`

	// The locale of the SSML message. Currently, en-US is supported.
	//
	// Locale is a required field
	Locale Locale `json:"a4b:Ssml:Locale" type:"string" required:"true" enum:"true"`

	// The value of the SSML message in the correct SSML format. The audio tag is
	// not supported.
	//
	// Value is a required field
	Value *string `json:"a4b:Ssml:Value" type:"string" required:"true"`
}

// String returns the string representation
func (s Ssml) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Ssml) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Ssml"}
	if len(s.Locale) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Locale"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// A key-value pair that can be associated with a resource.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Tag
type Tag struct {
	_ struct{} `type:"structure"`

	// The key of a tag. Tag keys are case-sensitive.
	//
	// Key is a required field
	Key *string `json:"a4b:Tag:Key" min:"1" type:"string" required:"true"`

	// The value of a tag. Tag values are case-sensitive and can be null.
	//
	// Value is a required field
	Value *string `json:"a4b:Tag:Value" type:"string" required:"true"`
}

// String returns the string representation
func (s Tag) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Tag) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Tag"}

	if s.Key == nil {
		invalidParams.Add(aws.NewErrParamRequired("Key"))
	}
	if s.Key != nil && len(*s.Key) < 1 {
		invalidParams.Add(aws.NewErrParamMinLen("Key", 1))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// The text message.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/Text
type Text struct {
	_ struct{} `type:"structure"`

	// The locale of the text message. Currently, en-US is supported.
	//
	// Locale is a required field
	Locale Locale `json:"a4b:Text:Locale" type:"string" required:"true" enum:"true"`

	// The value of the text message.
	//
	// Value is a required field
	Value *string `json:"a4b:Text:Value" type:"string" required:"true"`
}

// String returns the string representation
func (s Text) String() string {
	return awsutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *Text) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "Text"}
	if len(s.Locale) == 0 {
		invalidParams.Add(aws.NewErrParamRequired("Locale"))
	}

	if s.Value == nil {
		invalidParams.Add(aws.NewErrParamRequired("Value"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// Information related to a user.
// Please also see https://docs.aws.amazon.com/goto/WebAPI/alexaforbusiness-2017-11-09/UserData
type UserData struct {
	_ struct{} `type:"structure"`

	// The email of a user.
	Email *string `json:"a4b:UserData:Email" min:"1" type:"string"`

	// The enrollment ARN of a user.
	EnrollmentId *string `json:"a4b:UserData:EnrollmentId" type:"string"`

	// The enrollment status of a user.
	EnrollmentStatus EnrollmentStatus `json:"a4b:UserData:EnrollmentStatus" type:"string" enum:"true"`

	// The first name of a user.
	FirstName *string `json:"a4b:UserData:FirstName" type:"string"`

	// The last name of a user.
	LastName *string `json:"a4b:UserData:LastName" type:"string"`

	// The ARN of a user.
	UserArn *string `json:"a4b:UserData:UserArn" type:"string"`
}

// String returns the string representation
func (s UserData) String() string {
	return awsutil.Prettify(s)
}
